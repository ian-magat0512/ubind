//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace UBind.Application.Funding.PremiumFunding
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PremiumFundingClient
    {
        private string _baseUrl = "https://api.premiumfunding.net.au/";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public PremiumFundingClient()
        {
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>Premium Funding API Notes</summary>
        /// <returns>Produces this API Documentation.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task GetAsync()
        {
            return GetAsync(System.Threading.CancellationToken.None);
        }

        /// <summary>Premium Funding API Notes</summary>
        /// <returns>Produces this API Documentation.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task GetAsync(System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            return;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Request a new AccessToken</summary>
        /// <returns>AccessToken granted.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<AccessTokenResponse> PostAccessTokenAsync(Credentials credentials)
        {
            return PostAccessTokenAsync(credentials, System.Threading.CancellationToken.None);
        }

        /// <summary>Request a new AccessToken</summary>
        /// <returns>AccessToken granted.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<AccessTokenResponse> PostAccessTokenAsync(Credentials credentials, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/token");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(credentials, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(AccessTokenResponse);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<AccessTokenResponse>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>(" Bad Request, could be fields missing or other conditions not met. <br /> The response may indicate steps needed to avoid this error. ", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(AccessTokenResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Delete the AccessToken</summary>
        /// <returns>Token deleted.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResponseModel> DeleteAccessTokenAsync(string accessToken)
        {
            return DeleteAccessTokenAsync(accessToken, System.Threading.CancellationToken.None);
        }

        /// <summary>Delete the AccessToken</summary>
        /// <returns>Token deleted.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ResponseModel> DeleteAccessTokenAsync(string accessToken, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (accessToken == null)
                throw new System.ArgumentNullException("accessToken");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/token/{AccessToken}");
            urlBuilder_.Replace("{AccessToken}", System.Uri.EscapeDataString(ConvertToString(accessToken, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseModel>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get a list of saved contracts</summary>
        /// <returns>List of contracts
        /// ID, Name, Amount, NumberOfMonths.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContractSummaryListResponse> GetContractsAsync(int? limit, int? offset)
        {
            return GetContractsAsync(limit, offset, System.Threading.CancellationToken.None);
        }

        /// <summary>Get a list of saved contracts</summary>
        /// <returns>List of contracts
        /// ID, Name, Amount, NumberOfMonths.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ContractSummaryListResponse> GetContractsAsync(int? limit, int? offset, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contract?");
            if (limit != null) urlBuilder_.Append("Limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (offset != null) urlBuilder_.Append("Offset=").Append(System.Uri.EscapeDataString(ConvertToString(offset, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ContractSummaryListResponse);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ContractSummaryListResponse>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ContractSummaryListResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Create a new contract</summary>
        /// <returns>New contract created.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContractSummaryResponse> PostContractAsync(Contract body)
        {
            return PostContractAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>Create a new contract</summary>
        /// <returns>New contract created.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ContractSummaryResponse> PostContractAsync(Contract body, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contract");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ContractSummaryResponse);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ContractSummaryResponse>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Bad Request, missing required values or validation errors. <br /> The response should indicate what the problem is. ", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ContractSummaryResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get a contract by ID</summary>
        /// <returns>Contract retrieved.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContractResponse> GetContractAsync(int iD)
        {
            return GetContractAsync(iD, System.Threading.CancellationToken.None);
        }

        /// <summary>Get a contract by ID</summary>
        /// <returns>Contract retrieved.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ContractResponse> GetContractAsync(int iD, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (iD == null)
                throw new System.ArgumentNullException("iD");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contract/{ID}");
            urlBuilder_.Replace("{ID}", System.Uri.EscapeDataString(ConvertToString(iD, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ContractResponse);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ContractResponse>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Contract not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ContractResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Update a contract</summary>
        /// <returns>Contract Updated.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ContractResponse> PutContractAsync(int iD, Contract body)
        {
            return PutContractAsync(iD, body, System.Threading.CancellationToken.None);
        }

        /// <summary>Update a contract</summary>
        /// <returns>Contract Updated.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ContractResponse> PutContractAsync(int iD, Contract body, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (iD == null)
                throw new System.ArgumentNullException("iD");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contract/{ID}");
            urlBuilder_.Replace("{ID}", System.Uri.EscapeDataString(ConvertToString(iD, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ContractResponse);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ContractResponse>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Bad Request, missing required values or validation errors. <br /> The response should indicate what the problem is. ", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Contract not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ContractResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a contract</summary>
        /// <returns>Contract has been deleted.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResponseModel> DeleteContractAsync(int iD)
        {
            return DeleteContractAsync(iD, System.Threading.CancellationToken.None);
        }

        /// <summary>Delete a contract</summary>
        /// <returns>Contract has been deleted.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ResponseModel> DeleteContractAsync(int iD, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (iD == null)
                throw new System.ArgumentNullException("iD");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contract/{ID}");
            urlBuilder_.Replace("{ID}", System.Uri.EscapeDataString(ConvertToString(iD, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseModel>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Contract not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("The contract can\'t be deleted.  <br />  (usually after it\'s been submitted or due to other condition / circumstance)", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Submit a contract</summary>
        /// <returns>Your contract has been successfully submitted.  <br />  You, and (provided there was a "ClientEmailAddress" email address) your client should now receive transactional emails.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResponseModel> PutSubmissionAsync(int iD)
        {
            return PutSubmissionAsync(iD, System.Threading.CancellationToken.None);
        }

        /// <summary>Submit a contract</summary>
        /// <returns>Your contract has been successfully submitted.  <br />  You, and (provided there was a "ClientEmailAddress" email address) your client should now receive transactional emails.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ResponseModel> PutSubmissionAsync(int iD, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (iD == null)
                throw new System.ArgumentNullException("iD");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contract/{ID}/submit");
            urlBuilder_.Replace("{ID}", System.Uri.EscapeDataString(ConvertToString(iD, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Content = new System.Net.Http.StringContent(string.Empty, System.Text.Encoding.UTF8, "application/json");
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseModel>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Bad Request, missing required values or validation errors. <br /> The response should indicate what the problem is. ", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Contract not found or EPFKey invalid", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("The contract has already been submitted", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get the contract PDF document</summary>
        /// <returns>Success, you should receive a PDF file.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> GetPdfAsync(int iD, string pDFKey)
        {
            return GetPdfAsync(iD, pDFKey, System.Threading.CancellationToken.None);
        }

        /// <summary>Get the contract PDF document</summary>
        /// <returns>Success, you should receive a PDF file.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<FileResponse> GetPdfAsync(int iD, string pDFKey, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (iD == null)
                throw new System.ArgumentNullException("iD");

            if (pDFKey == null)
                throw new System.ArgumentNullException("pDFKey");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contract/{ID}/PDF/{PDFKey}");
            urlBuilder_.Replace("{ID}", System.Uri.EscapeDataString(ConvertToString(iD, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{PDFKey}", System.Uri.EscapeDataString(ConvertToString(pDFKey, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/pdf"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206")
                        {
                            var responseStream_ = await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, client_, response_);
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Contract not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Certain conditions (data validation) may prevent the production of a PDF.  <br /> The response may indicate what needs to be done in order to be able to request a PDF.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get the contract PDF document</summary>
        /// <returns>Success, you should receive a PDF file.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<FileResponse> GetPdfAsync(int iD)
        {
            return GetPdfAsync(iD, System.Threading.CancellationToken.None);
        }

        /// <summary>Get the contract PDF document</summary>
        /// <returns>Success, you should receive a PDF file.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<FileResponse> GetPdfAsync(int iD, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (iD == null)
                throw new System.ArgumentNullException("iD");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/contract/{ID}/PDF");
            urlBuilder_.Replace("{ID}", System.Uri.EscapeDataString(ConvertToString(iD, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/pdf"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200" || status_ == "206")
                        {
                            var responseStream_ = await response_.Content.ReadAsStreamAsync().ConfigureAwait(false);
                            var fileResponse_ = new FileResponse((int)response_.StatusCode, headers_, responseStream_, client_, response_);
                            client_ = null; response_ = null; // response and client are disposed by FileResponse
                            return fileResponse_;
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Contract not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Certain conditions (data validation) may prevent the production of a PDF.  <br /> The response may indicate what needs to be done in order to be able to request a PDF.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(FileResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Create a new Broker.</summary>
        /// <returns>New broker created.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BrokerResponseModel> BrokerAsync(Broker body)
        {
            return BrokerAsync(body, System.Threading.CancellationToken.None);
        }

        /// <summary>Create a new Broker.</summary>
        /// <returns>New broker created.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BrokerResponseModel> BrokerAsync(Broker body, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/broker");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "201")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BrokerResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BrokerResponseModel>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Bad Request, missing required values or validation errors. <br /> The response should indicate what the problem is. ", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BrokerResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get a list of your Brokers</summary>
        /// <returns>Get Broker list.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BrokerSummaryListResponseModel> Broker2Async()
        {
            return Broker2Async(System.Threading.CancellationToken.None);
        }

        /// <summary>Get a list of your Brokers</summary>
        /// <returns>Get Broker list.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BrokerSummaryListResponseModel> Broker2Async(System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/broker");

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BrokerSummaryListResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BrokerSummaryListResponseModel>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Broker not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BrokerSummaryListResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Get a Broker by ID</summary>
        /// <returns>Get Broker record.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BrokerResponseModel> Broker3Async(string iD)
        {
            return Broker3Async(iD, System.Threading.CancellationToken.None);
        }

        /// <summary>Get a Broker by ID</summary>
        /// <returns>Get Broker record.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BrokerResponseModel> Broker3Async(string iD, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (iD == null)
                throw new System.ArgumentNullException("iD");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/broker/{ID}");
            urlBuilder_.Replace("{ID}", System.Uri.EscapeDataString(ConvertToString(iD, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BrokerResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BrokerResponseModel>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Broker not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BrokerResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Update a Broker</summary>
        /// <returns>Contract Updated.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BrokerResponseModel> Broker4Async(string iD, Broker body)
        {
            return Broker4Async(iD, body, System.Threading.CancellationToken.None);
        }

        /// <summary>Update a Broker</summary>
        /// <returns>Contract Updated.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<BrokerResponseModel> Broker4Async(string iD, Broker body, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (iD == null)
                throw new System.ArgumentNullException("iD");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/broker/{ID}");
            urlBuilder_.Replace("{ID}", System.Uri.EscapeDataString(ConvertToString(iD, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(BrokerResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<BrokerResponseModel>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "400")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Bad Request, missing required values or validation errors. <br /> The response should indicate what the problem is.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Broker not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(BrokerResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        /// <summary>Delete a Broker</summary>
        /// <returns>Broker has been deleted.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<ResponseModel> Broker5Async(string iD)
        {
            return Broker5Async(iD, System.Threading.CancellationToken.None);
        }

        /// <summary>Delete a Broker</summary>
        /// <returns>Broker has been deleted.</returns>
        /// <exception cref="PremiumFundingException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<ResponseModel> Broker5Async(string iD, System.Threading.CancellationToken cancellationToken)
        {
            cancellationToken.ThrowIfCancellationRequested();
            if (iD == null)
                throw new System.ArgumentNullException("iD");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/broker/{ID}");
            urlBuilder_.Replace("{ID}", System.Uri.EscapeDataString(ConvertToString(iD, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseModel>(responseData_, _settings.Value);
                                return result_;
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ == "401")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Unauthorized", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "404")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Broker not found", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ == "409")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            var result_ = default(ErrorResponseModel);
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(responseData_, _settings.Value);
                            }
                            catch (System.Exception exception_)
                            {
                                throw new PremiumFundingException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                            }
                            throw new PremiumFundingException<ErrorResponseModel>("Couldn\'t delete the Broker. <br /> The response should indicate the reason.", (int)response_.StatusCode, responseData_, headers_, result_, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new PremiumFundingException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }

                        return default(ResponseModel);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return System.Convert.ToString(value, cultureInfo);
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Credentials
    {
        [Newtonsoft.Json.JsonProperty("Username", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Username { get; set; }

        [Newtonsoft.Json.JsonProperty("Password", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Password { get; set; }

        /// <summary> Eg. 1.2.4 - this helps with request routing, statistics and debugging.</summary>
        [Newtonsoft.Json.JsonProperty("ApiVersion", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ApiVersion { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Credentials FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Credentials>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AccessTokenResponse
    {
        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links Links { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data Data { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static AccessTokenResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AccessTokenResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractSummaryResponse
    {
        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links2 Links { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data2 Data { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContractSummaryResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractSummaryResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractSummaryListResponse
    {
        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links3 Links { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<ContractSummary> Data { get; set; }

        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Meta Meta { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContractSummaryListResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractSummaryListResponse>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ResponseModel
    {
        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links4 Links { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data3 Data { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ResponseModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResponseModel>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ErrorResponseModel
    {
        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links5 Links { get; set; }

        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous> Errors { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ErrorResponseModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorResponseModel>(data);
        }

    }

    /// <summary>Contract Summary</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractSummary
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Attributes Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links6 Links { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContractSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractSummary>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractResponse
    {
        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links7 Links { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data4 Data { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContractResponse FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractResponse>(data);
        }

    }

    /// <summary>The schema of a Contract</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Contract
    {
        /// <summary>Contract ID</summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ID { get; set; }

        /// <summary>Client / Contract name</summary>
        [Newtonsoft.Json.JsonProperty("ClientName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ClientName { get; set; }

        /// <summary>Total premium amount to be funded</summary>
        [Newtonsoft.Json.JsonProperty("TotalPremiumAmount", Required = Newtonsoft.Json.Required.Always)]
        public double TotalPremiumAmount { get; set; }

        /// <summary>Type of contract</summary>
        [Newtonsoft.Json.JsonProperty("TypeOfContract", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractTypeOfContract TypeOfContract { get; set; }

        /// <summary>To pay weekly or monthly instalments</summary>
        [Newtonsoft.Json.JsonProperty("PaymentFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractPaymentFrequency PaymentFrequency { get; set; }

        /// <summary>Inception date of the Contract 
        /// Format: Unix Timestamp</summary>
        [Newtonsoft.Json.JsonProperty("InceptionDate", Required = Newtonsoft.Json.Required.Always)]
        public int InceptionDate { get; set; }

        /// <summary> When you wish the contract to be settled. <br /> Options: <br /> 1: 1-7 Days <br /> 15: 15 Days <br /> 30: 30 Days <br /> 45: 45 Days <br /> 60: 60 Days</summary>
        [Newtonsoft.Json.JsonProperty("SettlementDays", Required = Newtonsoft.Json.Required.Always)]
        public ContractSettlementDays SettlementDays { get; set; } = UBind.Application.Funding.PremiumFunding.ContractSettlementDays._1;

        /// <summary>You can opt to delay the first draw from the client's account to this date. Format: Unix Timestamp</summary>
        [Newtonsoft.Json.JsonProperty("DelayedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DelayedDate { get; set; }

        /// <summary> Broker Commission <br /> Certain limits apply, discuss with Premium Funding. <br /> If not provided, negotiated default will apply.</summary>
        [Newtonsoft.Json.JsonProperty("Commission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Commission { get; set; }

        /// <summary> Number of months over which the contract is paid back - this determines the number of instalments. <br /> Range: 3 to 12, however the range may be limited by several factors.</summary>
        [Newtonsoft.Json.JsonProperty("NumberOfMonths", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(3, 12)]
        public int NumberOfMonths { get; set; }

        /// <summary>A non-refundable amount</summary>
        [Newtonsoft.Json.JsonProperty("NonRefundableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NonRefundableAmount { get; set; }

        /// <summary>Address</summary>
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Address { get; set; }

        /// <summary>Suburb / City</summary>
        [Newtonsoft.Json.JsonProperty("Suburb", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Suburb { get; set; }

        /// <summary>Post code</summary>
        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Always)]
        public int PostCode { get; set; }

        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractState State { get; set; }

        /// <summary>Landline</summary>
        [Newtonsoft.Json.JsonProperty("PhoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 6)]
        public string PhoneNumber { get; set; }

        /// <summary>Mobile number</summary>
        [Newtonsoft.Json.JsonProperty("MobileNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/^0?(4|5)[0-9]{8}$/")]
        public string MobileNumber { get; set; }

        /// <summary>Fax number</summary>
        [Newtonsoft.Json.JsonProperty("FaxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(^0?(2|3|7|8)[0-9]{8}$)|(^13\d{4,8}$)|(^18\d{5,8}$)/")]
        public string FaxNumber { get; set; }

        /// <summary> ABN <br /> No spaces, just numbers <br /> Certain contracts may require an ABN</summary>
        [Newtonsoft.Json.JsonProperty("ABN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength = 11)]
        public string ABN { get; set; }

        /// <summary>Bank BSB</summary>
        [Newtonsoft.Json.JsonProperty("BSB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 6)]
        public string BSB { get; set; }

        /// <summary>Bank account number</summary>
        [Newtonsoft.Json.JsonProperty("AccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength = 4)]
        public string AccountNumber { get; set; }

        /// <summary>Bank account name</summary>
        [Newtonsoft.Json.JsonProperty("AccountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountName { get; set; }

        /// <summary>Name on the credit card</summary>
        [Newtonsoft.Json.JsonProperty("CreditCardHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditCardHolder { get; set; }

        /// <summary>Credit card number only numbers, no spaces</summary>
        [Newtonsoft.Json.JsonProperty("CreditCardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditCardNumber { get; set; }

        /// <summary>Date in format: MMYYYY, example: 052018</summary>
        [Newtonsoft.Json.JsonProperty("CreditCardExpiry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 6)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/^((0[1-9])|(1[0-2]))(\d{4})$/")]
        public string CreditCardExpiry { get; set; }

        /// <summary>CVN / CVC etc., that 3 digit code on the back of the card.</summary>
        [Newtonsoft.Json.JsonProperty("CVN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CVN { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditCardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractCreditCardType? CreditCardType { get; set; }

        /// <summary>This choice determines which set of payment details will be validated.</summary>
        [Newtonsoft.Json.JsonProperty("PaymentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ContractPaymentType PaymentType { get; set; }

        /// <summary> Client's email address <br /> The client will receive a copy of the contract and any notifications in relation to the contract.</summary>
        [Newtonsoft.Json.JsonProperty("ClientEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientEmailAddress { get; set; }

        /// <summary>Whoever is submitting the contract must provide their name (and position in the next field) as a form of digital signature.  Mandatory field for certain types of contract.</summary>
        [Newtonsoft.Json.JsonProperty("SignedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignedBy { get; set; }

        /// <summary>The signing person's position within their organisation. Eg. Director.  Mandatory field for certain types of contract.</summary>
        [Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        [Newtonsoft.Json.JsonProperty("iCloseContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICloseContract ICloseContract { get; set; }

        /// <summary> List of insurers / policies <br /> The total amount of all insurers MUST match the total premium amount</summary>
        [Newtonsoft.Json.JsonProperty("Insurers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Insurer> Insurers { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Insurer>();

        /// <summary> At least one settlement to is required, maximum of 3 SettlementTo's. <br /> The total SettlementTo amounts MUST match the total premium amount.</summary>
        [Newtonsoft.Json.JsonProperty("SettlementTo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<SettlementTo> SettlementTo { get; set; } = new System.Collections.ObjectModel.ObservableCollection<SettlementTo>();

        [Newtonsoft.Json.JsonProperty("Extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Extensions Extensions { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Contract FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Contract>(data);
        }

    }

    /// <summary>Insurer / Policy</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Insurer
    {
        /// <summary>Policy amount</summary>
        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        /// <summary> Policy inception date
        ///  Unix timestamp</summary>
        [Newtonsoft.Json.JsonProperty("InceptionDate", Required = Newtonsoft.Json.Required.Always)]
        // Changed from int to string to match data returned from API.
        public string InceptionDate { get; set; }

        /// <summary>Insurer / Policy name</summary>
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        /// <summary>Policy number / identification string</summary>
        [Newtonsoft.Json.JsonProperty("PolicyNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyNumber { get; set; }

        /// <summary> (Months)
        ///  Range: 1 to 12</summary>
        [Newtonsoft.Json.JsonProperty("Term", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, 12)]
        public int Term { get; set; }

        /// <summary>Policy code / type 
        /// Ie: Motor, Home, WorkersComp</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>Your invoice identifier</summary>
        [Newtonsoft.Json.JsonProperty("InvoiceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InvoiceNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("iCloseInsurer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICloseInsurer ICloseInsurer { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Insurer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Insurer>(data);
        }

    }

    /// <summary>Who the contract is settled to</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class SettlementTo
    {
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("Amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static SettlementTo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SettlementTo>(data);
        }

    }

    /// <summary>Quote based on the values of the contract</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Quote
    {
        [Newtonsoft.Json.JsonProperty("TotalPremiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPremiumAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("AmountFinanced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountFinanced { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalInterest { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalRepayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalRepayable { get; set; }

        [Newtonsoft.Json.JsonProperty("GrossRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossRate { get; set; }

        [Newtonsoft.Json.JsonProperty("CommissionPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionPercent { get; set; }

        [Newtonsoft.Json.JsonProperty("Commission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Commission { get; set; }

        [Newtonsoft.Json.JsonProperty("AdminFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AdminFee { get; set; }

        [Newtonsoft.Json.JsonProperty("MonthlyPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MonthlyPaymentAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("NumberMonthlyPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberMonthlyPayments { get; set; }

        [Newtonsoft.Json.JsonProperty("WeeklyPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WeeklyPaymentAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("NumberWeeklyPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberWeeklyPayments { get; set; }

        [Newtonsoft.Json.JsonProperty("FirstInstalmentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FirstInstalmentAmount { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Quote FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Quote>(data);
        }

    }

    /// <summary>iClose contract extension</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ICloseContract
    {
        /// <summary>FundML->LogOn->LedgerID</summary>
        [Newtonsoft.Json.JsonProperty("LedgerID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string LedgerID { get; set; }

        /// <summary>FundML->Client->BrokerID</summary>
        [Newtonsoft.Json.JsonProperty("ClientBrokerID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ClientBrokerID { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ICloseContract FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ICloseContract>(data);
        }

    }

    /// <summary>iClose Insurer extension</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ICloseInsurer
    {
        /// <summary>FundML->Policies->Policy->BrokerID</summary>
        [Newtonsoft.Json.JsonProperty("BrokerID", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BrokerID { get; set; }

        /// <summary>FundML->Policies->Policy->BrokerPolicyID</summary>
        [Newtonsoft.Json.JsonProperty("BrokerPolicyID", Required = Newtonsoft.Json.Required.Always)]
        public int BrokerPolicyID { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ICloseInsurer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ICloseInsurer>(data);
        }

    }

    /// <summary>A broker record in our system, to be created, queried or modified. On broker creation the default rate card will be assigned.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Broker
    {
        /// <summary>Premium Funding BrokerID</summary>
        [Newtonsoft.Json.JsonProperty("BrokerID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BrokerID { get; set; }

        /// <summary>Firm name</summary>
        [Newtonsoft.Json.JsonProperty("Firm", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Firm { get; set; }

        /// <summary>Business Address (No PO Box)</summary>
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Address { get; set; }

        [Newtonsoft.Json.JsonProperty("City", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BrokerState State { get; set; }

        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Always)]
        public int PostCode { get; set; }

        /// <summary>Landline</summary>
        [Newtonsoft.Json.JsonProperty("PhoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 8)]
        public string PhoneNumber { get; set; }

        /// <summary>Fax number</summary>
        [Newtonsoft.Json.JsonProperty("FaxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(^0?(2|3|7|8)[0-9]{8}$)|(^13\d{4,8}$)|(^18\d{5,8}$)/")]
        public string FaxNumber { get; set; }

        /// <summary>First name of the primary contact</summary>
        [Newtonsoft.Json.JsonProperty("ContactFirstName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContactFirstName { get; set; }

        /// <summary>Surname of the primary contact</summary>
        [Newtonsoft.Json.JsonProperty("ContactSurname", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContactSurname { get; set; }

        /// <summary>Email address of the primary contact</summary>
        [Newtonsoft.Json.JsonProperty("ContactEmailAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ContactEmailAddress { get; set; }

        /// <summary>ABN  No spaces, just numbers </summary>
        [Newtonsoft.Json.JsonProperty("ABN", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength = 11)]
        public string ABN { get; set; }

        /// <summary>Bank BSB</summary>
        [Newtonsoft.Json.JsonProperty("BSB", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 6)]
        public string BSB { get; set; }

        /// <summary>Bank account number</summary>
        [Newtonsoft.Json.JsonProperty("AccountNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength = 4)]
        public string AccountNumber { get; set; }

        /// <summary>Bank account name</summary>
        [Newtonsoft.Json.JsonProperty("AccountName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string AccountName { get; set; }

        [Newtonsoft.Json.JsonProperty("RateCard", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RateCard RateCard { get; set; }

        /// <summary>Total credit limit, updated daily. If 0, no further funding is allowed.</summary>
        [Newtonsoft.Json.JsonProperty("CreditLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditLimit { get; set; }

        /// <summary>Credit balance</summary>
        [Newtonsoft.Json.JsonProperty("CreditUsed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditUsed { get; set; }

        /// <summary>Maximum contract TotalPremiumAmount</summary>
        [Newtonsoft.Json.JsonProperty("CreditContractMax", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CreditContractMax { get; set; }

        /// <summary>On broker creation (POST) this is required, it will adjust some of the defaults applied to the account. <br /> Any other time, once we have sufficient data, this number is based on our own records and read-only.</summary>
        [Newtonsoft.Json.JsonProperty("AverageInvoiceSize", Required = Newtonsoft.Json.Required.Always)]
        public double AverageInvoiceSize { get; set; }

        [Newtonsoft.Json.JsonProperty("Documentation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous2> Documentation { get; set; }

        [Newtonsoft.Json.JsonProperty("Extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Extensions2 Extensions { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Broker FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Broker>(data);
        }

    }

    /// <summary>Rate card which is or can be assigned to a Broker.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class RateCard
    {
        /// <summary>Rate card name</summary>
        [Newtonsoft.Json.JsonProperty("Card", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RateCardCard Card { get; set; }

        [Newtonsoft.Json.JsonProperty("Bands", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous3> Bands { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static RateCard FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<RateCard>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BrokerResponseModel
    {
        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links8 Links { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data5 Data { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BrokerResponseModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrokerResponseModel>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BrokerSummary
    {
        /// <summary>Premium Funding BrokerID</summary>
        [Newtonsoft.Json.JsonProperty("BrokerID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? BrokerID { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BrokerSummary FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrokerSummary>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BrokerSummaryListResponseModel
    {
        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Links9 Links { get; set; }

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data6 Data { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static BrokerSummaryListResponseModel FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BrokerSummaryListResponseModel>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Data
    {
        /// <summary>Model Name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type { get; set; }

        /// <summary>The payload of the response</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Attributes2 Attributes { get; set; } = new Attributes2();

        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Links10 Links { get; set; } = new Links10();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Data FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links2
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Data2
    {
        /// <summary>Model Name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        public Attributes3 Attributes { get; set; }

        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Links11 Links { get; set; } = new Links11();

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Data2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links3
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Meta
    {
        /// <summary>Total number of items in the list.</summary>
        [Newtonsoft.Json.JsonProperty("TotalCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TotalCount { get; set; }

        /// <summary>Pagination limit of items per response.</summary>
        [Newtonsoft.Json.JsonProperty("Limit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Limit { get; set; }

        /// <summary>Current pagination offset.</summary>
        [Newtonsoft.Json.JsonProperty("Offset", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Offset { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Meta FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Meta>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links4
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links4>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Data3
    {
        /// <summary>Model Name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type { get; set; }

        /// <summary>The payload of the response</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Attributes { get; set; } = new object();

        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        public Links12 Links { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Data3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links5
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links5>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous
    {
        /// <summary>HTTP Status Code</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        /// <summary>Description of the error and any instructions for remedy</summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken> Links { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Attributes
    {
        /// <summary>Contract ID</summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.Always)]
        public int ID { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ClientName { get; set; }

        /// <summary>Total premium amount</summary>
        [Newtonsoft.Json.JsonProperty("TotalPremiumAmount", Required = Newtonsoft.Json.Required.Always)]
        public double TotalPremiumAmount { get; set; }

        /// <summary>Months</summary>
        [Newtonsoft.Json.JsonProperty("NumberOfMonths", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfMonths { get; set; }

        /// <summary>PDFKey to request a PDF document of this contract</summary>
        [Newtonsoft.Json.JsonProperty("PdfKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PdfKey { get; set; }

        /// <summary> EPFKey to submit the contract. <br /> Also used as password to allow the client to finalize the contract on our EPF page: https://pbtm.com.au</summary>
        [Newtonsoft.Json.JsonProperty("EpfKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EpfKey { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Attributes FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Attributes>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links6
    {
        /// <summary>URL to the contract</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        /// <summary> URL you can forward to your client, to allow them to finalize & submit the contract. <br /> Condition to contract completeness & passing validation, except for Client Details (Address, Phone etc) and Payment Details (Credit Card / Bank Account details).</summary>
        [Newtonsoft.Json.JsonProperty("EpfURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EpfURL { get; set; }

        /// <summary>URL to the contract PDF</summary>
        [Newtonsoft.Json.JsonProperty("PdfURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PdfURL { get; set; }

        /// <summary> URL to submit the contract. <br /> Condition to contract completeness & passing validation.</summary>
        [Newtonsoft.Json.JsonProperty("SubmitURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmitURL { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links6>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links7
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links7 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links7>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Data4
    {
        /// <summary>Model Name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        public Attributes4 Attributes { get; set; }

        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        public Links13 Links { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Data4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data4>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ContractTypeOfContract
    {
        [System.Runtime.Serialization.EnumMember(Value = "Commercial")]
        Commercial = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Domestic")]
        Domestic = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Strata")]
        Strata = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ContractPaymentFrequency
    {
        [System.Runtime.Serialization.EnumMember(Value = "Monthly")]
        Monthly = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Weekly")]
        Weekly = 1,
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ContractSettlementDays
    {
        _1 = 1,

        _15 = 15,

        _30 = 30,

        _45 = 45,

        _60 = 60,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ContractState
    {
        [System.Runtime.Serialization.EnumMember(Value = "QLD")]
        QLD = 0,

        [System.Runtime.Serialization.EnumMember(Value = "NSW")]
        NSW = 1,

        [System.Runtime.Serialization.EnumMember(Value = "SA")]
        SA = 2,

        [System.Runtime.Serialization.EnumMember(Value = "VIC")]
        VIC = 3,

        [System.Runtime.Serialization.EnumMember(Value = "WA")]
        WA = 4,

        [System.Runtime.Serialization.EnumMember(Value = "NT")]
        NT = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ACT")]
        ACT = 6,

        [System.Runtime.Serialization.EnumMember(Value = "TAS")]
        TAS = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ContractCreditCardType
    {
        [System.Runtime.Serialization.EnumMember(Value = "MasterCard")]
        MasterCard = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Visa")]
        Visa = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum ContractPaymentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "DirectDebit")]
        DirectDebit = 0,

        [System.Runtime.Serialization.EnumMember(Value = "CreditCard")]
        CreditCard = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Extensions
    {
        /// <summary>LEAP Contract ID</summary>
        [Newtonsoft.Json.JsonProperty("LeapContractID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeapContractID { get; set; }

        /// <summary>LEAP Firm ID</summary>
        [Newtonsoft.Json.JsonProperty("LeapFirmID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeapFirmID { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Extensions FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Extensions>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum BrokerState
    {
        [System.Runtime.Serialization.EnumMember(Value = "QLD")]
        QLD = 0,

        [System.Runtime.Serialization.EnumMember(Value = "NSW")]
        NSW = 1,

        [System.Runtime.Serialization.EnumMember(Value = "SA")]
        SA = 2,

        [System.Runtime.Serialization.EnumMember(Value = "VIC")]
        VIC = 3,

        [System.Runtime.Serialization.EnumMember(Value = "WA")]
        WA = 4,

        [System.Runtime.Serialization.EnumMember(Value = "NT")]
        NT = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ACT")]
        ACT = 6,

        [System.Runtime.Serialization.EnumMember(Value = "TAS")]
        TAS = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous2
    {
        /// <summary>If provided on POST, we will attempt to download from this resource. <br /> On GET, we will provide a URL to our stored document.</summary>
        [Newtonsoft.Json.JsonProperty("CallbackURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CallbackURL { get; set; }

        [Newtonsoft.Json.JsonProperty("File", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public File File { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Extensions2
    {
        /// <summary>LEAP Firm ID</summary>
        [Newtonsoft.Json.JsonProperty("LeapFirmID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeapFirmID { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Extensions2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Extensions2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum RateCardCard
    {
        [System.Runtime.Serialization.EnumMember(Value = "LeapA")]
        LeapA = 0,

        [System.Runtime.Serialization.EnumMember(Value = "LeapB")]
        LeapB = 1,

        [System.Runtime.Serialization.EnumMember(Value = "LeapC")]
        LeapC = 2,

    }

    /// <summary>RateBand = amount >= Min AND amount <= Max, round amount half up to full integer</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous3
    {
        [Newtonsoft.Json.JsonProperty("Min", Required = Newtonsoft.Json.Required.Always)]
        public int Min { get; set; }

        [Newtonsoft.Json.JsonProperty("Max", Required = Newtonsoft.Json.Required.Always)]
        public int Max { get; set; }

        [Newtonsoft.Json.JsonProperty("Rate", Required = Newtonsoft.Json.Required.Always)]
        public double Rate { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links8
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links8 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links8>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Data5
    {
        /// <summary>Model Name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type { get; set; }

        /// <summary>The payload of the response</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Attributes5 Attributes { get; set; } = new Attributes5();

        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        public Links14 Links { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Data5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data5>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links9
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links9 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links9>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Data6
    {
        /// <summary>Model Name</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Type { get; set; }

        /// <summary>The payload of the response</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<BrokerSummary> Attributes { get; set; } = new System.Collections.ObjectModel.ObservableCollection<BrokerSummary>();

        /// <summary>Object containing links relevant to the resource and context</summary>
        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.Always)]
        public Links15 Links { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Data6 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data6>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Attributes2
    {
        /// <summary>Your token for the current session.</summary>
        [Newtonsoft.Json.JsonProperty("AccessToken", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccessToken { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Attributes2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Attributes2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links10
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links10 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links10>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Attributes3
    {
        /// <summary>Contract Summary</summary>
        [Newtonsoft.Json.JsonProperty("ContractSummary", Required = Newtonsoft.Json.Required.Always)]
        public ContractSummary2 ContractSummary { get; set; }

        [Newtonsoft.Json.JsonProperty("Quote", Required = Newtonsoft.Json.Required.Always)]
        public Quote Quote { get; set; }

        /// <summary>A list of issues that need to be addressed before the contract can be submitted.</summary>
        [Newtonsoft.Json.JsonProperty("Validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous4> Validation { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Attributes3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Attributes3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links11
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        /// <summary> URL to the contract PDF <br /> It may or may not be provided at this stage, condition to data validation outcome</summary>
        [Newtonsoft.Json.JsonProperty("PdfURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PdfURL { get; set; }

        /// <summary> URL to submit the contract. <br /> It may or may not be provided at this stage, condition to data validation outcome</summary>
        [Newtonsoft.Json.JsonProperty("SubmitURL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubmitURL { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links11 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links11>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links12
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links12 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links12>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Attributes4
    {
        /// <summary>The schema of a Contract</summary>
        [Newtonsoft.Json.JsonProperty("Contract", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Contract2 Contract { get; set; } = new Contract2();

        /// <summary>Quote based on the values of the contract</summary>
        [Newtonsoft.Json.JsonProperty("Quote", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Quote2 Quote { get; set; } = new Quote2();

        [Newtonsoft.Json.JsonProperty("Validation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Anonymous5> Validation { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Attributes4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Attributes4>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links13
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links13 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links13>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class File
    {
        [Newtonsoft.Json.JsonProperty("FileName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public byte[] Data { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static File FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<File>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Attributes5
    {
        [Newtonsoft.Json.JsonProperty("Broker", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Broker Broker { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Attributes5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Attributes5>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links14
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links14 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links14>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Links15
    {
        /// <summary>link to this resource</summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> _additionalProperties = new System.Collections.Generic.Dictionary<string, Newtonsoft.Json.Linq.JToken>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, Newtonsoft.Json.Linq.JToken> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Links15 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Links15>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ContractSummary2
    {
        /// <summary>Contract ID</summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.Always)]
        public int ID { get; set; }

        [Newtonsoft.Json.JsonProperty("ClientName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ClientName { get; set; }

        /// <summary>Total premium amount</summary>
        [Newtonsoft.Json.JsonProperty("TotalPremiumAmount", Required = Newtonsoft.Json.Required.Always)]
        public double TotalPremiumAmount { get; set; }

        /// <summary>Months</summary>
        [Newtonsoft.Json.JsonProperty("NumberOfMonths", Required = Newtonsoft.Json.Required.Always)]
        public int NumberOfMonths { get; set; }

        /// <summary>PDFKey to request a PDF document of this contract</summary>
        [Newtonsoft.Json.JsonProperty("PdfKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PdfKey { get; set; }

        /// <summary> EPFKey to submit the contract. <br /> Also used as password to allow the client to finalize the contract on our EPF page: https://pbtm.com.au</summary>
        [Newtonsoft.Json.JsonProperty("EpfKey", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EpfKey { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static ContractSummary2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContractSummary2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous4
    {
        /// <summary>Requirements must be resolved, notices are information for the end-user.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type Type { get; set; }

        /// <summary>The 'code' of the error - this is a reference for software.</summary>
        [Newtonsoft.Json.JsonProperty("Rule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Rule { get; set; }

        /// <summary>The human readable message.</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous4>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Contract2
    {
        /// <summary>Contract ID</summary>
        [Newtonsoft.Json.JsonProperty("ID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ID { get; set; }

        /// <summary>Client / Contract name</summary>
        [Newtonsoft.Json.JsonProperty("ClientName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string ClientName { get; set; }

        /// <summary>Total premium amount to be funded</summary>
        [Newtonsoft.Json.JsonProperty("TotalPremiumAmount", Required = Newtonsoft.Json.Required.Always)]
        public double TotalPremiumAmount { get; set; }

        /// <summary>Type of contract</summary>
        [Newtonsoft.Json.JsonProperty("TypeOfContract", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Contract2TypeOfContract TypeOfContract { get; set; }

        /// <summary>To pay weekly or monthly instalments</summary>
        [Newtonsoft.Json.JsonProperty("PaymentFrequency", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Contract2PaymentFrequency PaymentFrequency { get; set; }

        /// <summary>Inception date of the Contract 
        /// Format: Unix Timestamp</summary>
        [Newtonsoft.Json.JsonProperty("InceptionDate", Required = Newtonsoft.Json.Required.Always)]
        public int InceptionDate { get; set; }

        /// <summary> When you wish the contract to be settled. <br /> Options: <br /> 1: 1-7 Days <br /> 15: 15 Days <br /> 30: 30 Days <br /> 45: 45 Days <br /> 60: 60 Days</summary>
        [Newtonsoft.Json.JsonProperty("SettlementDays", Required = Newtonsoft.Json.Required.Always)]
        public Contract2SettlementDays SettlementDays { get; set; } = UBind.Application.Funding.PremiumFunding.Contract2SettlementDays._1;

        /// <summary>You can opt to delay the first draw from the client's account to this date. Format: Unix Timestamp</summary>
        [Newtonsoft.Json.JsonProperty("DelayedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DelayedDate { get; set; }

        /// <summary> Broker Commission <br /> Certain limits apply, discuss with Premium Funding. <br /> If not provided, negotiated default will apply.</summary>
        [Newtonsoft.Json.JsonProperty("Commission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Commission { get; set; }

        /// <summary> Number of months over which the contract is paid back - this determines the number of instalments. <br /> Range: 3 to 12, however the range may be limited by several factors.</summary>
        [Newtonsoft.Json.JsonProperty("NumberOfMonths", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(3, 12)]
        public int NumberOfMonths { get; set; }

        /// <summary>A non-refundable amount</summary>
        [Newtonsoft.Json.JsonProperty("NonRefundableAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? NonRefundableAmount { get; set; }

        /// <summary>Address</summary>
        [Newtonsoft.Json.JsonProperty("Address", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Address { get; set; }

        /// <summary>Suburb / City</summary>
        [Newtonsoft.Json.JsonProperty("Suburb", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Suburb { get; set; }

        /// <summary>Post code</summary>
        [Newtonsoft.Json.JsonProperty("PostCode", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 4)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/^(0[289][0-9]{2})|([1345689][0-9]{3})|(2[0-8][0-9]{2})|(290[0-9])|(291[0-4])|(7[0-4][0-9]{2})|(7[8-9][0-9]{2})$/")]
        public string PostCode { get; set; }

        [Newtonsoft.Json.JsonProperty("State", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Contract2State? State { get; set; }

        /// <summary>Landline</summary>
        [Newtonsoft.Json.JsonProperty("PhoneNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 6)]
        public string PhoneNumber { get; set; }

        /// <summary>Mobile number</summary>
        [Newtonsoft.Json.JsonProperty("MobileNumber", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 10)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/^0?(4|5)[0-9]{8}$/")]
        public string MobileNumber { get; set; }

        /// <summary>Fax number</summary>
        [Newtonsoft.Json.JsonProperty("FaxNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 6)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/(^0?(2|3|7|8)[0-9]{8}$)|(^13\d{4,8}$)|(^18\d{5,8}$)/")]
        public string FaxNumber { get; set; }

        /// <summary> ABN <br /> No spaces, just numbers <br /> Certain contracts may require an ABN</summary>
        [Newtonsoft.Json.JsonProperty("ABN", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(11, MinimumLength = 11)]
        public string ABN { get; set; }

        /// <summary>Bank BSB</summary>
        [Newtonsoft.Json.JsonProperty("BSB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 6)]
        public string BSB { get; set; }

        /// <summary>Bank account number</summary>
        [Newtonsoft.Json.JsonProperty("AccountNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(9, MinimumLength = 4)]
        public string AccountNumber { get; set; }

        /// <summary>Bank account name</summary>
        [Newtonsoft.Json.JsonProperty("AccountName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountName { get; set; }

        /// <summary>Name on the credit card</summary>
        [Newtonsoft.Json.JsonProperty("CreditCardHolder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditCardHolder { get; set; }

        /// <summary>Credit card number only numbers, no spaces</summary>
        [Newtonsoft.Json.JsonProperty("CreditCardNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreditCardNumber { get; set; }

        /// <summary>Date in format: MMYYYY, example: 052018</summary>
        [Newtonsoft.Json.JsonProperty("CreditCardExpiry", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(6, MinimumLength = 6)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"/^((0[1-9])|(1[0-2]))(\d{4})$/")]
        public string CreditCardExpiry { get; set; }

        [Newtonsoft.Json.JsonProperty("CreditCardType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Contract2CreditCardType? CreditCardType { get; set; }

        /// <summary>This choice determines which set of payment details will be validated.</summary>
        [Newtonsoft.Json.JsonProperty("PaymentType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Contract2PaymentType PaymentType { get; set; }

        /// <summary> Client's email address <br /> The client will receive a copy of the contract and any notifications in relation to the contract.</summary>
        [Newtonsoft.Json.JsonProperty("ClientEmailAddress", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ClientEmailAddress { get; set; }

        /// <summary>Whoever is submitting the contract must provide their name (and position in the next field) as a form of digital signature.  Mandatory field for certain types of contract.</summary>
        [Newtonsoft.Json.JsonProperty("SignedBy", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignedBy { get; set; }

        /// <summary>The signing person's position within their organisation. Eg. Director.  Mandatory field for certain types of contract.</summary>
        [Newtonsoft.Json.JsonProperty("Position", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        [Newtonsoft.Json.JsonProperty("iCloseContract", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ICloseContract ICloseContract { get; set; }

        /// <summary> List of insurers / policies <br /> The total amount of all insurers MUST match the total premium amount</summary>
        [Newtonsoft.Json.JsonProperty("Insurers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<Insurer> Insurers { get; set; } = new System.Collections.ObjectModel.ObservableCollection<Insurer>();

        /// <summary> At least one settlement to is required, maximum of 3 SettlementTo's. <br /> The total SettlementTo amounts MUST match the total premium amount.</summary>
        [Newtonsoft.Json.JsonProperty("SettlementTo", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.ObjectModel.ObservableCollection<SettlementTo> SettlementTo { get; set; } = new System.Collections.ObjectModel.ObservableCollection<SettlementTo>();

        [Newtonsoft.Json.JsonProperty("Extensions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Extensions3 Extensions { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Contract2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Contract2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Quote2
    {
        [Newtonsoft.Json.JsonProperty("TotalPremiumAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalPremiumAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("AmountFinanced", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AmountFinanced { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalInterest", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalInterest { get; set; }

        [Newtonsoft.Json.JsonProperty("TotalRepayable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalRepayable { get; set; }

        [Newtonsoft.Json.JsonProperty("GrossRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossRate { get; set; }

        [Newtonsoft.Json.JsonProperty("CommissionPercent", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CommissionPercent { get; set; }

        [Newtonsoft.Json.JsonProperty("Commission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Commission { get; set; }

        [Newtonsoft.Json.JsonProperty("AdminFee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AdminFee { get; set; }

        [Newtonsoft.Json.JsonProperty("MonthlyPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MonthlyPaymentAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("NumberMonthlyPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberMonthlyPayments { get; set; }

        [Newtonsoft.Json.JsonProperty("WeeklyPaymentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WeeklyPaymentAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("NumberWeeklyPayments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NumberWeeklyPayments { get; set; }

        [Newtonsoft.Json.JsonProperty("FirstInstalmentAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FirstInstalmentAmount { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Quote2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Quote2>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Anonymous5
    {
        /// <summary>Requirements must be resolved, notices are information for the end-user.</summary>
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Type2 Type { get; set; }

        /// <summary>The 'code' of the error - this is a reference for software.</summary>
        [Newtonsoft.Json.JsonProperty("Rule", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Rule { get; set; }

        /// <summary>The human readable message.</summary>
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string Message { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous5 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous5>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Type
    {
        [System.Runtime.Serialization.EnumMember(Value = "requirement")]
        Requirement = 0,

        [System.Runtime.Serialization.EnumMember(Value = "notice")]
        Notice = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Contract2TypeOfContract
    {
        [System.Runtime.Serialization.EnumMember(Value = "Commercial")]
        Commercial = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Domestic")]
        Domestic = 1,

        [System.Runtime.Serialization.EnumMember(Value = "Strata")]
        Strata = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Contract2PaymentFrequency
    {
        [System.Runtime.Serialization.EnumMember(Value = "Monthly")]
        Monthly = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Weekly")]
        Weekly = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Contract2SettlementDays
    {
        _1 = 1,

        _15 = 15,

        _30 = 30,

        _45 = 45,

        _60 = 60,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Contract2State
    {
        [System.Runtime.Serialization.EnumMember(Value = "QLD")]
        QLD = 0,

        [System.Runtime.Serialization.EnumMember(Value = "NSW")]
        NSW = 1,

        [System.Runtime.Serialization.EnumMember(Value = "SA")]
        SA = 2,

        [System.Runtime.Serialization.EnumMember(Value = "VIC")]
        VIC = 3,

        [System.Runtime.Serialization.EnumMember(Value = "WA")]
        WA = 4,

        [System.Runtime.Serialization.EnumMember(Value = "NT")]
        NT = 5,

        [System.Runtime.Serialization.EnumMember(Value = "ACT")]
        ACT = 6,

        [System.Runtime.Serialization.EnumMember(Value = "TAS")]
        TAS = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Contract2CreditCardType
    {
        [System.Runtime.Serialization.EnumMember(Value = "MasterCard")]
        MasterCard = 0,

        [System.Runtime.Serialization.EnumMember(Value = "Visa")]
        Visa = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Contract2PaymentType
    {
        [System.Runtime.Serialization.EnumMember(Value = "DirectDebit")]
        DirectDebit = 0,

        [System.Runtime.Serialization.EnumMember(Value = "CreditCard")]
        CreditCard = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Extensions3
    {
        /// <summary>LEAP Contract ID</summary>
        [Newtonsoft.Json.JsonProperty("LeapContractID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeapContractID { get; set; }

        /// <summary>LEAP Firm ID</summary>
        [Newtonsoft.Json.JsonProperty("LeapFirmID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeapFirmID { get; set; }

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Extensions3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Extensions3>(data);
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.42.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum Type2
    {
        [System.Runtime.Serialization.EnumMember(Value = "requirement")]
        Requirement = 0,

        [System.Runtime.Serialization.EnumMember(Value = "notice")]
        Notice = 1,

    }

    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable _client;
        private System.IDisposable _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable client, System.IDisposable response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            if (Stream != null)
                Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PremiumFundingException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public PremiumFundingException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.17.0.0 (NJsonSchema v9.10.42.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class PremiumFundingException<TResult> : PremiumFundingException
    {
        public TResult Result { get; private set; }

        public PremiumFundingException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}