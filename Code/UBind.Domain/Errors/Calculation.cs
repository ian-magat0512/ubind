// <copyright file="Calculation.cs" company="uBind">
// Copyright (c) uBind. All rights reserved.
// </copyright>

// If you edit this file, you must remove this line and then do proper null checking
#pragma warning disable CS8600, CS8625, CS8629, CS8618, CS8605, CS8604, CS8601, CS8602, CS8603, CS8622, CS8619, CS8767, CS8620, CS8765

#pragma warning disable SA1600
#pragma warning disable SA1118 // Parameter should not span multiple lines

namespace UBind.Domain
{
    using System;
    using System.Collections.Generic;
    using System.Net;
    using Humanizer;
    using Newtonsoft.Json.Linq;
    using NodaTime;
    using UBind.Domain.Extensions;
    using UBind.Domain.Product;
    using UBind.Domain.ReadWriteModel;

    /// <summary>
    /// Allows enumeration of all application errors as outlined here: https://enterprisecraftsmanship.com/posts/advanced-error-handling-techniques/.
    /// </summary>
    public static partial class Errors
    {
        /// <summary>
        /// Quote errors.
        /// </summary>
        public static class Calculation
        {
            public static Error UnableToParseCurrencyString(string currencyString) =>
                new Error(
                    "calculation.unable.to.parse.currency.string",
                    "Currency in an unknown format",
                    $"The currency generated by the ratings engine \"{currencyString}\" was output in a format that we couldn't readily understand. "
                    + "If the ratings engine includes a currency symbol in currency value, then please ensure you are using the correct currency symbol."
                    + "It may fix the problem to have the currency symbol not included. If you beleive this currency value should be recognised, please get in touch with support.",
                    HttpStatusCode.UnprocessableEntity,
                    null,
                    new JObject()
                    {
                        { "currencyString", currencyString },
                    });

            public static Error UnableToCalculateDifferentialPriceWhenCurrenciesDontMatch(IPriceBreakdown originalPriceBreakdown, IPriceBreakdown newPriceBreakdown) =>
                new Error(
                    "calculation.unable.to.calculate.differential.price.when.currencies.dont.match",
                    "Currencies don't match",
                    $"We're trying to calculate a pro-rated or differential price, however the original price was in "
                    + $"{originalPriceBreakdown.CurrencyCode} and the new price is in {newPriceBreakdown.CurrencyCode}. The two price calculations need to be in the same currency.",
                    HttpStatusCode.Conflict,
                    null,
                    new JObject()
                    {
                        { "originalPriceCurrencyCode", originalPriceBreakdown.CurrencyCode },
                        { "newPriceBreakdown", newPriceBreakdown.CurrencyCode },
                        { "originalPriceTotal", originalPriceBreakdown.TotalPayable.ToString() },
                        { "newPriceTotal", newPriceBreakdown.TotalPayable.ToString() },
                    });

            public static Error UnableToAddTwoPriceBreakdownsWhenCurrenciesDontMatch(IPriceBreakdown firstPriceBreakdown, IPriceBreakdown secondPriceBreakdown) =>
                new Error(
                    "calculation.unable.to.add.two.price.breakdowns.when.currencies.dont.match",
                    "Currencies don't match",
                    $"We're trying to add two price breakdowns together, however the first price is in "
                    + $"{firstPriceBreakdown.CurrencyCode} and the second price is in {secondPriceBreakdown.CurrencyCode}. The two price calculations need to be in the same currency.",
                    HttpStatusCode.Conflict,
                    null,
                    new JObject()
                    {
                        { "firstPriceCurrencyCode", firstPriceBreakdown.CurrencyCode },
                        { "secondPriceCurrencyCode", secondPriceBreakdown.CurrencyCode },
                        { "firstPriceTotal", firstPriceBreakdown.TotalPayable.ToString() },
                        { "secondPriceTotal", secondPriceBreakdown.TotalPayable.ToString() },
                    });

            public static Error UnableToSubtractTwoPriceBreakdownsWhenCurrenciesDontMatch(IPriceBreakdown firstPriceBreakdown, IPriceBreakdown secondPriceBreakdown) =>
                new Error(
                    "calculation.unable.to.subtract.two.price.breakdowns.when.currencies.dont.match",
                    "Currencies don't match",
                    $"We're trying to subtract a price breakdown from another price breakdown, however the first price is in "
                    + $"{firstPriceBreakdown.CurrencyCode} and the second price is in {secondPriceBreakdown.CurrencyCode}. The two price calculations need to be in the same currency.",
                    HttpStatusCode.Conflict,
                    null,
                    new JObject()
                    {
                        { "firstPriceCurrencyCode", firstPriceBreakdown.CurrencyCode },
                        { "secondPriceCurrencyCode", secondPriceBreakdown.CurrencyCode },
                        { "firstPriceTotal", firstPriceBreakdown.TotalPayable.ToString() },
                        { "secondPriceTotal", secondPriceBreakdown.TotalPayable.ToString() },
                    });

            public static Error CurrencyCodeMissingFromQuoteDataLocatorConfiguration() =>
                new Error(
                    "currency.code.missing.from.quote.data.locator.configuration",
                    "Currency code locator not configured",
                    "When trying to get the path to the location of the currency code within the calculation result, we could not determine the path. "
                    + "The path is provided by way of configuration, typically in funding.json and product.json. Please check that you have added a locator for \"currencyCode\".",
                    HttpStatusCode.PreconditionFailed,
                    new string[] { "An example configuration is: \"currencyCode\": { \"object\": \"CalculationResult\", \"path\": \"payment.currencyCode\" }" });

            public static Error UnableToCalculateAPriceOrRefundBecauseCancellationDateIsEmpty() =>
                new Error(
                    "unable.to.calculate.a.price.or.refund.because.cancellation.date.is.empty",
                    "Unable to calculate a price or refund",
                    "When trying to calculate a price or refund amount, we hit a road block because no cancellation "
                    + "date was provided. This is a product mis-configuration that a product developer needs to fix. "
                    + "To fix this, please ensure the cancellation date field is mapped through to the calculation "
                    + "request payload by specifying a mapping in the product.json file using a quote data locator. "
                    + "If you need help or would like to report this issue, please do not hesitate to contact "
                    + "customer support.",
                    HttpStatusCode.PreconditionFailed,
                    new string[]
                    {
                        "An example product.json configuration is to add : \"cancellationDate\": { \"object\": "
                        + "\"CalculationResult\", \"path\": \"questions.dates.policyCancellationDate\" }",
                    });

            public static Error UnableToAnnualisePremiumFromAZeroDayPeriod(LocalDate startDate, LocalDate endDate) =>
                new Error(
                    "unable.to.annualise.premium.from.a.zero.day.period",
                    "We can't calculate an annual price from price for a zero day period",
                    $"When trying to annualise the premium, we were given a period from {startDate} to {endDate}. "
                    + "We therefore are not able to calculate an annual premium from a premium for a period of zero days. This is a product misconfiguration. "
                    + "We apologise for the inconvenience. If you are the product developer please ensure you set the correct start and end dates.",
                    HttpStatusCode.NotAcceptable,
                    new string[] { $"Start date: {startDate}", $"End date: {endDate}" },
                    new JObject()
                    {
                        { "startDate", startDate.ToString() },
                        { "endDate", endDate.ToString() },
                    });

            public static Error InputDataMissing() =>
                new Error(
                    "perform.calculation.input.data.missing",
                    "The required input data was missing",
                    $"When trying to to perform a calculation, the required input data was missing. "
                    + "Please ensure input data is passed in.",
                    HttpStatusCode.NotAcceptable);

            public static Error MisingQuoteOrPolicy(QuoteType quoteType, IProductContext productContext) =>
                new Error(
                    "cannot.perform.calculation.without.quote.or.policy",
                    "We can't calculate a premium without a quote or policy",
                    $"When trying to calculate a premium for a policy transaction of type {quoteType.Humanize()}, "
                    + "no quote or policy was provided. Please ensure a quote or policy is specified when calculating "
                    + "a premium for policy transactions of this type.",
                    HttpStatusCode.BadRequest,
                    null,
                    new JObject
                    {
                        { "tenantId", productContext.TenantId },
                        { "productId", productContext.ProductId },
                        { "environment", productContext.Environment.Humanize() },
                    });

            public static Error MissingPolicyTransactionType(ProductContext productContext, string policyNumber = null) =>
                new Error(
                    "policy.calculation.missing.transaction.type",
                    "We need to know the policy transaction type",
                    $"When trying to calculate a premium "
                    + (policyNumber != null ? "for a transaction on policy {policyNumber}, " : string.Empty)
                    + "the policy transaction "
                    + "type was not provided. Please ensure you include the policy transaction type with your request, "
                    + "or alternatively you can create a quote and perform the calculation against that quote.",
                    HttpStatusCode.BadRequest,
                    null,
                    new JObject
                    {
                        { "tenantId", productContext.TenantId },
                        { "productId", productContext.ProductId },
                        { "environment", productContext.Environment.Humanize() },
                    });

            public static Error QuoteTypeMismatch(QuoteType requestedQuoteType, QuoteType actualQuoteType, ProductContext productContext) =>
                new Error(
                    "quote.calculation.transaction.type.mismatch",
                    "You've specified a conflicting transaction type",
                    $"When trying to calculate a premium, the requested policy transaction type was \"{requestedQuoteType}\", "
                    + $"however a quote was passed of type \"{actualQuoteType}\". Because of the mismatch, we cannot proceed. "
                    + "Please ensure the transaction type you specify matches the quote type, or simply leave out the "
                    + "policyTransactionType to automatically use that of the quote passed.",
                    HttpStatusCode.Conflict,
                    null,
                    new JObject
                    {
                        { "tenantId", productContext.TenantId },
                        { "productId", productContext.ProductId },
                        { "environment", productContext.Environment.Humanize() },
                    });

            public static Error QuoteDiscarded(Guid quoteId, IProductContext productContext) =>
                new Error(
                    "quote.calculation.on.discarded.quote",
                    "That quote has been discarded",
                    $"When trying to calculate a premium, the requested quote with ID \"{quoteId}\" was found to have "
                    + "been discarded. You cannot perform a quote calculation on a discarded quote. "
                    + "You may create a new quote, or perform a quote calculation not in relation to an existing quote.",
                    HttpStatusCode.BadRequest,
                    null,
                    new JObject
                    {
                        { "quoteId", quoteId },
                        { "tenantId", productContext.TenantId },
                        { "productId", productContext.ProductId },
                        { "environment", productContext.Environment.Humanize() },
                    });

            public static Error QuoteCompleted(Guid quoteId, IProductContext productContext) =>
                new Error(
                    "quote.calculation.on.completed.quote",
                    "That quote has been completed",
                    $"When trying to calculate a premium, the requested quote with ID \"{quoteId}\" was found to have "
                    + "been completed. You cannot perform a quote calculation on a completed quote. "
                    + "You may create a new quote, or perform a quote calculation not in relation to an existing quote.",
                    HttpStatusCode.BadRequest,
                    null,
                    new JObject
                    {
                        { "quoteId", quoteId },
                        { "tenantId", productContext.TenantId },
                        { "productId", productContext.ProductId },
                        { "environment", productContext.Environment.Humanize() },
                    });

            public static Error QuoteDeclined(Guid quoteId, IProductContext productContext) =>
                new Error(
                    "quote.calculation.on.declined.quote",
                    "That quote is declined",
                    $"When trying to calculate a premium, the requested quote with ID \"{quoteId}\" was found to have "
                    + "been declined. You cannot perform a quote calculation on a declined quote. "
                    + "You may create a new quote, or perform a quote calculation not in relation to an existing quote.",
                    HttpStatusCode.BadRequest,
                    null,
                    new JObject
                    {
                        { "quoteId", quoteId },
                        { "tenantId", productContext.TenantId },
                        { "productId", productContext.ProductId },
                        { "environment", productContext.Environment.Humanize() },
                    });

            public static Error QuoteExpired(Guid quoteId, IProductContext productContext) =>
                new Error(
                    "quote.calculation.on.expired.quote",
                    "That quote has expired",
                    $"When trying to calculate a premium, the requested quote with ID \"{quoteId}\" was found to have "
                    + "expired. You cannot perform a quote calculation on an expired quote. "
                    + "You may create a new quote, or perform a quote calculation not in relation to an existing quote.",
                    HttpStatusCode.BadRequest,
                    null,
                    new JObject
                    {
                        { "quoteId", quoteId },
                        { "tenantId", productContext.TenantId },
                        { "productId", productContext.ProductId },
                        { "environment", productContext.Environment.Humanize() },
                    });

            public static Error CannotPersistResultsWithoutQuote(IProductContext productContext) =>
                new Error(
                    "quote.calculation.cannot.persist.results.without.quote",
                    "We can't save a calculation without a quote",
                    "When trying to calculate a premium, a parameter was passed requesting that the result is "
                    + "persisted, however no quote reference was passed. A calculation result needs a quote to "
                    + "be persisted.",
                    HttpStatusCode.BadRequest,
                    new List<string>
                    {
                        $"Tenant ID: {productContext.TenantId}",
                        $"Product ID: {productContext.ProductId}",
                        $"Environment: {productContext.Environment.Humanize()}",
                    },
                    new JObject
                    {
                        { "tenantId", productContext.TenantId },
                        { "productId", productContext.ProductId },
                        { "environment", productContext.Environment.ToString().ToCamelCase() },
                    });

            public static Error AdjustmentDateOutsidePolicyPeriod() =>
                new Error(
                    "quote.calculation.adjustment.date.outside.policy.period",
                    "The adjustment date is outside the policy period",
                    $"When trying to calculate a premium, the requested adjustment date falls "
                    + "outside the policy period. Please ensure you select an adjustment effective date within the "
                    + "policy period.",
                    HttpStatusCode.BadRequest);

            public static Error AdjustmentExpiryDateCannotBeBeforePolicyPeriodStartDate() =>
                new Error(
                    "quote.calculation.adjustment.expiry.date.before.policy.start.date",
                    "The new expiry date is before the policy start date",
                    $"When trying to calculate a premium for an adjustment, the requested expiry date is "
                    + "before the start date of the policy. If you want to change the expiry date, please make"
                    + "sure it's after the policy start date.",
                    HttpStatusCode.BadRequest);

            public static Error RenewalExpiryDateCannotBeBeforePolicyPeriodStartDate() =>
                new Error(
                    "quote.calculation.renewal.expiry.date.before.policy.start.date",
                    "The new expiry date is before the policy start date",
                    $"When trying to calculate a premium for a renewal quote, the requested expiry date is "
                    + "before the start date of the policy. When choosing an expiry date, please make"
                    + "sure it's after the policy start date.",
                    HttpStatusCode.BadRequest);

            public static Error CancellationDateOutsidePolicyPeriod() =>
                new Error(
                    "quote.calculation.cancellation.date.outside.poliy.period",
                    "The cancellation date is outside the policy period",
                    $"When trying to calculate a premium, the requested cancellation date falls "
                    + "outside the policy period. Please ensure you select a cancellation effective date within the "
                    + "policy period.",
                    HttpStatusCode.BadRequest);

            public static Error PolicyPeriodStartDateMustNotBeAfterEndDate() =>
                new Error(
                    "quote.calculation.policy.period.start.date.must.not.be.after.end.date",
                    "The policy period start date is after the end date",
                    $"When trying to calculate a premium, the requested policy period start date is "
                    + "after the policy end date. Please ensure the policy starts before it ends.",
                    HttpStatusCode.BadRequest);

            public static Error PolicyRenewalDateMustMatchExpiryDate() =>
                new Error(
                    "quote.calculation.policy.renewal.date.must.match.expiry.date",
                    "The policy renewal date must match the expiry date",
                    $"When trying to calculate a renewal premium, the requested policy period start date doesn't "
                    + "match the expiry date of the policy. Please ensure the correct renewal date is used.",
                    HttpStatusCode.BadRequest);

            public static Error RequiredDataMissing(string path, string message, JObject errorData) =>
                new Error(
                    "quote.calculation.required.data.missing",
                    "Required data is missing",
                    $"When trying to perform an operation with a calculation result, the required data at path \"{path}\" "
                    + $"was missing. {message}",
                    HttpStatusCode.BadRequest,
                    new List<string> { path });

            public static class Claim
            {
                public static Error ShouldNotHaveActiveTriggersForAutoApproval(JObject errorData, List<string> additionalInformation)
                {
                    return new Error(
                    "claim.calculation.result.has.active.triggers",
                    "Review has active triggers",
                    "When the operation tried to change state and perform auto approval, the operation " +
                    "encountered a validation error, the claim must not contain any active calculation triggers. " +
                    "This is a product configuration issue. " +
                    "Please contact our support team for further assistance. We apologise for any inconvenience " +
                    "that this may have caused.",
                    HttpStatusCode.BadRequest,
                    additionalInformation,
                    errorData);
                }

                public static Error ShouldHaveReviewCalculationTriggers(JObject errorData, List<string> additionalInformation)
                {
                    return new Error(
                    "claim.calculation.result.should.have.review.calculation.triggers",
                    "Review calculation triggers not found",
                    "When the operation tried to change the state to review, the operation " +
                    "encountered a validation error, the claim must contain review calculation triggers " +
                    "in order for the operation to proceed.This is a product configuration issue. " +
                    "Please contact our support team for further assistance. We apologise for any inconvenience " +
                    "that this may have caused.",
                    HttpStatusCode.BadRequest,
                    additionalInformation,
                    errorData);
                }

                public static Error ShouldNotHaveAssessmentCalculationTriggers(JObject errorData, List<string> additionalInformation)
                {
                    return new Error(
                    "claim.calculation.result.should.not.have.assessment.triggers",
                    "Cannot review a claim that has assessment triggers",
                    "When the operation tried to change the state to review approval, the operation " +
                    "encountered a validation error, the claim must not have assessment calculation triggers " +
                    "in order for the operation to proceed. This is a product configuration issue. " +
                    "Please contact our support team for further assistance. We apologise for any inconvenience " +
                    "that this may have caused.",
                    HttpStatusCode.BadRequest,
                    additionalInformation,
                    errorData);
                }

                public static Error ShouldNotHaveDeclinedCalculationTriggers(JObject errorData, List<string> additionalInformation)
                {
                    return new Error(
                    "claim.calculation.result.should.not.have.declined.triggers",
                    "Cannot review a claim that has decline triggers",
                    "When the operation tried to change the state to review approval, the operation " +
                    "encountered a validation error, the claim must not have declined calculation triggers " +
                    "in order for the operation to proceed. This is a product configuration issue. " +
                    "Please contact our support team for further assistance. We apologise for any inconvenience " +
                    "that this may have caused.",
                    HttpStatusCode.BadRequest,
                    additionalInformation,
                    errorData);
                }

                public static Error DoesNotHaveAssessmentCalculationTriggers(JObject errorData, List<string> additionalInformation)
                {
                    return new Error(
                    "claim.calculation.result.does.not.have.assessment.triggers",
                    "Cannot review a claim that has no assessment triggers",
                    "When the operation tried to change the state to assessment referal, the operation " +
                    "encountered a validation error, the claim must contain assessment calculation triggers " +
                    "in order for the operation to proceed. This is a product configuration issue. " +
                    "Please contact our support team for further assistance. We apologise for any inconvenience " +
                    "that this may have caused.",
                    HttpStatusCode.BadRequest,
                    additionalInformation,
                    errorData);
                }
            }

            public static class Spreadsheet
            {
                public static Error FormulaError(
                    string errorDescription,
                    string worksheetName,
                    string tableName,
                    int sheetIndex,
                    int row,
                    int column,
                    IEnumerable<string> additionalDetails) =>
                    new Error(
                        "calculation.spreadsheet.formula.error",
                        "Spreadsheet formula error",
                        "After writing the latest values to the Excel workbook, when trying to recalculate the "
                        + $"outputs for the table \"{tableName}\" in worksheet \"{worksheetName}\", an error was "
                        + $"returned: {errorDescription}"
                        + "To debug the error, paste the question answers and repeating question answers into the "
                        + "spreadsheet directly. If this doesn't show the error, it may be caused by injected rating "
                        + "factors which are missing or invalid.",
                        HttpStatusCode.BadRequest,
                        additionalDetails,
                        new JObject()
                        {
                            { "worksheetName", worksheetName },
                            { "tableName", tableName },
                            { "sheetIndex", sheetIndex.ToString() },
                            { "row", row.ToString() },
                            { "column", column.ToString() },
                        });

                public static Error CalculationOutputJsonInvalidMissingPropertyValue(
                    string jsonPath,
                    string sourceJson,
                    string questionAnswersForPastingIntoWorkbook,
                    string repeatingQuestionAnswersForPastingIntoWorkbook) =>
                    new Error(
                        "calculation.output.json.invalid.missing.property.value",
                        "A value was missing from the calculation output",
                        $"The calculation output from the spreadsheet does not contain valid JSON. "
                        + $"There was no value defined for the property at path \"{jsonPath}\". "
                        + "To debug the error, you can try copying the question answers and repeating question answers from the console "
                        + "and pasting them into the spreadsheet. "
                        + "If you would like to report this error, please get in touch with customer support.",
                        HttpStatusCode.BadRequest,
                        null,
                        new JObject()
                        {
                            { "jsonPath", jsonPath },
                            { "sourceJson", sourceJson?.LimitLengthWithEllipsis(100000) },
                            { "questionAnswersForPastingIntoWorkbook", questionAnswersForPastingIntoWorkbook },
                            { "repeatingQuestionAnswersForPastingIntoWorkbook", repeatingQuestionAnswersForPastingIntoWorkbook },
                        });
            }
        }
    }
}
