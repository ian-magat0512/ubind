// <auto-generated />
#pragma warning disable 1591

// <copyright file="UserPasswordExpiryIntegrationTests.cs" company="uBind">
// Copyright (c) uBind. All rights reserved.
// </copyright>

// If you edit this file, you must remove this line and then do proper null checking
#pragma warning disable CS8600, CS8625, CS8629, CS8618, CS8605, CS8604, CS8601, CS8602, CS8603, CS8622, CS8619, CS8767, CS8620, CS8765


namespace UBind.Persistence.Tests.IntegrationTests.Users
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using FluentAssertions;
    using Moq;
    using NodaTime;
    using UBind.Application.Commands.User;
    using UBind.Application.Queries.User;
    using UBind.Application.Tests;
    using UBind.Domain;
    using UBind.Domain.Aggregates;
    using UBind.Domain.Aggregates.Organisation;
    using UBind.Domain.Aggregates.Person;
    using UBind.Domain.Aggregates.User;
    using UBind.Domain.Authentication;
    using UBind.Domain.Entities;
    using UBind.Domain.Events;
    using UBind.Domain.Extensions;
    using UBind.Domain.ReadModel;
    using UBind.Domain.ReadModel.User;
    using UBind.Domain.Repositories;
    using UBind.Domain.Services;
    using UBind.Domain.Tests.Fakes;
    using UBind.Persistence.Tests.Fakes;
    using Xunit;

    [Collection(DatabaseCollection.Name)]
    public class UserPasswordExpiryIntegrationTests
    {
        private ApplicationStack stack;
        private readonly Guid? performingUserId = Guid.NewGuid();

        public static IClock Clock { get; set; } = SystemClock.Instance;

        public UserPasswordExpiryIntegrationTests()
        {
            this.stack = new ApplicationStack(DatabaseFixture.TestConnectionStringName);
        }

        [Fact]
        public async Task DetermineUserPasswordIsExpiredWhenPasswordIsSet_ShouldConfigurePasswordExpiry_ExpiredPasswordIsTrue()
        {
            // Arrange
            var tenant = TenantFactory.Create(Guid.NewGuid());
            var product = ProductFactory.Create(tenant.Id, null);
            this.stack.CreateTenant(tenant);
            this.stack.CreateProduct(product);
            var organisation = Organisation.CreateNewOrganisation(tenant.Id, "alias", "name", null, default, this.stack.Clock.Now());
            tenant.SetDefaultOrganisation(organisation.Id, this.stack.Clock.Now().Plus(Duration.FromMinutes(2)));
            await this.stack.OrganisationAggregateRepository.Save(organisation);

            // set it to 1 day
            var details = new TenantDetails(tenant.Details, this.stack.Clock.Now().Plus(Duration.FromMinutes(5)));
            details.UpdatePasswordExpiry(true, 1);
            tenant.Update(details);
            this.stack.TenantRepository.SaveChanges();
            this.stack.MockMediator.GetTenantByIdOrAliasQuery(tenant);

            var role = UserType.Client;
            var password = "ubindTest123*";

            var fakeLoginAttemptResultRepository = new FakeLoginAttemptResultRepository();
            var fakeEmailBlockingEventRepository = new FakeEmailBlockingEventRepository();
            var passwordHashingService = new PasswordHashingService();
            var userAggregateRepository = new Mock<IUserAggregateRepository>();
            var userReadModelRepository = new Mock<IUserReadModelRepository>();
            var organisationService = new Mock<IOrganisationService>();
            var userSystemEventEmitter = new Mock<IUserSystemEventEmitter>();
            var userLoginEmailRepository = new Mock<IUserLoginEmailRepository>();

            var loginTrackingService = new LoginAttemptTrackingService(
                fakeLoginAttemptResultRepository,
                fakeEmailBlockingEventRepository,
                this.stack.OrganisationAggregateRepository,
                userSystemEventEmitter.Object,
                userLoginEmailRepository.Object,
                SystemClock.Instance);

            var environment = DeploymentEnvironment.Staging;

            // Act
            // create user
            var email = new Random().Next(1, 5000) + "elvien@ubind.io";
            var userAggregate = await this.CreateUser(tenant.Id, environment, role, email);

            // actvate the user.
            userAggregate = this.stack.UserAggregateRepository.GetById(tenant.Id, userAggregate.Id);
            var invitationId = userAggregate.CreateActivationInvitation(this.performingUserId, this.stack.Clock.GetCurrentInstant());
            var saltedHashedPassword = this.stack.PasswordHashingService.SaltAndHash(password);
            userAggregate.Activate(invitationId, saltedHashedPassword, this.performingUserId, this.stack.Clock.GetCurrentInstant());
            await this.stack.UserAggregateRepository.Save(userAggregate);
            this.stack.Clock.Increment(Duration.FromDays(2));

            // Assert
            var isPasswordExpired = await this.stack.Mediator.Send(new IsUserPasswordExpiredQuery(userAggregate.TenantId, userAggregate.Id));
            isPasswordExpired.Should().BeTrue();
        }

        [Fact]
        public async Task DetermineUserPasswordIsExpiredWhenPasswordIsSet_ShouldConfigurePasswordExpiry_ExpiredPasswordIsFalse()
        {
            // Arrange
            var tenant = TenantFactory.Create(Guid.NewGuid());
            var product = ProductFactory.Create(tenant.Id, null);
            this.stack.CreateTenant(tenant);
            this.stack.CreateProduct(product);
            var organisation = Organisation.CreateNewOrganisation(tenant.Id, "alias", "name", null, default, this.stack.Clock.Now());
            tenant.SetDefaultOrganisation(organisation.Id, this.stack.Clock.Now().Plus(Duration.FromMinutes(2)));
            await this.stack.OrganisationAggregateRepository.Save(organisation);

            // set it to 1 day
            var details = new TenantDetails(tenant.Details, this.stack.Clock.Now().Plus(Duration.FromMinutes(5)));
            details.UpdatePasswordExpiry(true, 1);
            tenant.Update(details);
            this.stack.TenantRepository.SaveChanges();
            this.stack.MockMediator.GetTenantByIdOrAliasQuery(tenant);

            var role = UserType.Client;
            var password = "ubindTest123*";

            var fakeLoginAttemptResultRepository = new FakeLoginAttemptResultRepository();
            var fakeEmailBlockingEventRepository = new FakeEmailBlockingEventRepository();
            var passwordHashingService = new PasswordHashingService();
            var organisationService = new Mock<IOrganisationService>();
            var userSystemEventEmitter = new Mock<IUserSystemEventEmitter>();
            var userLoginEmailRepository =  new Mock<IUserLoginEmailRepository>();

            var loginTrackingService = new LoginAttemptTrackingService(
                fakeLoginAttemptResultRepository,
                fakeEmailBlockingEventRepository,
                this.stack.OrganisationAggregateRepository,
                userSystemEventEmitter.Object,
                userLoginEmailRepository.Object,
                SystemClock.Instance);

            var environment = DeploymentEnvironment.Staging;

            // Act
            // create user
            var email = new Random().Next(1, 5000) + "elvien@ubind.io";
            var userAggregate = await this.CreateUser(tenant.Id, environment, role, email);

            // actvate the user.
            userAggregate = this.stack.UserAggregateRepository.GetById(tenant.Id, userAggregate.Id);
            var invitationId = userAggregate.CreateActivationInvitation(this.performingUserId, this.stack.Clock.GetCurrentInstant());
            var saltedHashedPassword = this.stack.PasswordHashingService.SaltAndHash(password);
            userAggregate.Activate(invitationId, saltedHashedPassword, this.performingUserId, this.stack.Clock.GetCurrentInstant());
            await this.stack.UserAggregateRepository.Save(userAggregate);

            // Assert
            var isPasswordExpired = await this.stack.Mediator.Send(new IsUserPasswordExpiredQuery(userAggregate.TenantId, userAggregate.Id));
            isPasswordExpired.Should().BeFalse();
        }

        [Fact]
        public async Task DetermineUserPasswordIsExpiredWhenPasswordIsReset_ShouldConfigurePasswordExpiry_ExpiredPasswordIsTrue()
        {
            // Arrange
            var productId = Guid.NewGuid();
            var tenantAndProduct = await TestData.CreateProductAndTenant(productId, this.stack);
            var tenant = tenantAndProduct.Tenant;
            var product = tenantAndProduct.Product;
            var organisation = Organisation.CreateNewOrganisation(tenant.Id, "alias", "name", null, default, this.stack.Clock.Now());
            tenant.SetDefaultOrganisation(organisation.Id, this.stack.Clock.Now().Plus(Duration.FromMinutes(2)));
            await this.stack.OrganisationAggregateRepository.Save(organisation);

            // set it to 1 day
            var details = new TenantDetails(tenant.Details, this.stack.Clock.Now().Plus(Duration.FromMinutes(5)));
            details.UpdatePasswordExpiry(true, 1);
            tenant.Update(details);
            this.stack.TenantRepository.SaveChanges();
            this.stack.MockMediator.GetTenantByIdOrAliasQuery(tenant);
            this.stack.MockMediator.GetProductByIdOrAliasQuery(product);

            var role = UserType.Client;
            var password = "ubindTest123*";
            var newPassword = "ubindTest1234*";

            var fakeLoginAttemptResultRepository = new FakeLoginAttemptResultRepository();
            var fakeEmailBlockingEventRepository = new FakeEmailBlockingEventRepository();
            var passwordHashingService = new PasswordHashingService();
            var organisationService = new Mock<IOrganisationService>();
            var userSystemEventEmitter = new FakeUserSystemEventEmitter();
            var userLoginEmailRepository = new Mock<IUserLoginEmailRepository>();

            var loginTrackingService = new LoginAttemptTrackingService(
                fakeLoginAttemptResultRepository,
                fakeEmailBlockingEventRepository,
                this.stack.OrganisationAggregateRepository,
                userSystemEventEmitter,
                userLoginEmailRepository.Object,
                SystemClock.Instance);

            var environment = DeploymentEnvironment.Staging;

            // Act
            // create user
            var email = new Random().Next(1, 5000) + "elvien@ubind.io";
            var userAggregate = await this.CreateUser(tenant.Id, environment, role, email);

            // actvate the user.
            userAggregate = this.stack.UserAggregateRepository.GetById(tenant.Id, userAggregate.Id);
            var invitationId = userAggregate.CreateActivationInvitation(this.performingUserId, this.stack.Clock.GetCurrentInstant());
            var saltedHashedPassword = this.stack.PasswordHashingService.SaltAndHash(password);
            userAggregate.Activate(invitationId, saltedHashedPassword, this.performingUserId, this.stack.Clock.GetCurrentInstant());
            await this.stack.UserAggregateRepository.Save(userAggregate);

            // reset password
            var resetInvitationResult = await this.stack.UserPasswordResetInvitationService.CreateAndSendPasswordResetInvitation(
                tenant.Id,
                tenant.Details.DefaultOrganisationId,
                email,
                environment,
                isPasswordExpired: true);
            resetInvitationResult.Should().Succeed();

            await this.stack.UserPasswordResetInvitationService.SetPasswordFromPasswordReset(
                tenant.Id,
                userAggregate.Id,
                resetInvitationResult.Value,
                newPassword);

            this.stack.Clock.Increment(Duration.FromDays(2));

            // Assert
            var isPasswordExpired = await this.stack.Mediator.Send(new IsUserPasswordExpiredQuery(userAggregate.TenantId, userAggregate.Id));
            isPasswordExpired.Should().BeTrue();
        }

        public async Task<UserAggregate> CreateUser(
            Guid tenantId, DeploymentEnvironment environment, UserType userType, string email)
        {
            var clock = this.stack.Clock;
            var tenant = this.stack.TenantRepository.GetTenantById(tenantId);
            var personCommonProperties = new PersonCommonProperties
            {
                Email = email
            };
            var person = PersonAggregate.CreatePersonFromPersonalDetails(
                tenant.Id,
                tenant.Details.DefaultOrganisationId,
                new PersonalDetails(tenant.Id, personCommonProperties),
                this.performingUserId,
                clock.Now());

            await this.stack.PersonAggregateRepository.Save(person);
            var userId = Guid.NewGuid();
            var persistedUserAggregate = UserAggregate.CreateUser(
                tenantId, userId, userType, person, this.performingUserId, null, clock.Now());
            await this.stack.UserAggregateRepository.Save(persistedUserAggregate);

            return persistedUserAggregate;
        }

        private class FakeLoginAttemptResultRepository : IEmailRequestRecordRepository<LoginAttemptResult>
        {
            private readonly List<LoginAttemptResult> loginAttemptResults = new List<LoginAttemptResult>();

            public IEnumerable<LoginAttemptResult> GetLatestRecords(
                Guid tenantId, Guid organisationId, string emailAddress, int max = 5)
            {
                return this.loginAttemptResults
                    .Where(r => r.TenantId == tenantId)
                    .Where(r => r.OrganisationId == organisationId)
                    .Where(r => r.EmailAddress == emailAddress)
                    .OrderByDescending(r => r.CreatedTicksSinceEpoch)
                    .Take(max)
                    .ToList();
            }

            public void Insert(LoginAttemptResult loginAttempt)
            {
                this.loginAttemptResults.Add(loginAttempt);
            }

            public void SaveChanges()
            {
                // No op;
            }
        }

        private class FakeUserSystemEventEmitter : IUserSystemEventEmitter
        {
            public Task CreateAndEmitLoginSystemEvents(Guid tenantId, Guid userId, List<SystemEventType> eventTypes, Instant? timestamp = null)
            {
                return Task.CompletedTask;
            }

            public Task CreateAndEmitLoginSystemEvents(UserReadModel user, List<SystemEventType> eventTypes, Instant? timestamp = null)
            {
                return Task.CompletedTask;
            }

            public Task CreateAndEmitSystemEvents(UserReadModel user, List<SystemEventType> eventTypes, Guid? performingUserId = null, Instant? timestamp = null)
            {
                return Task.CompletedTask;
            }

            public Task CreateAndEmitSystemEvents(Guid tenantId, Guid userId, List<SystemEventType> eventTypes, Guid? performingUserId = null, Instant? timestamp = null)
            {
                return Task.CompletedTask;
            }

            public void Dispatch(UserAggregate aggregate, IEvent<UserAggregate, Guid> @event, int sequenceNumber, IEnumerable<Type> observerTypes = null)
            {
            }
        }

        private class FakeEmailBlockingEventRepository : IEmailAddressBlockingEventRepository
        {
            private readonly List<EmailAddressBlockingEvent> emailBlockingEvents = new List<EmailAddressBlockingEvent>();

            public EmailAddressBlockingEvent GetLatestBlockingEvent(
                Guid tenantId, Guid organisationId, string emailAddress)
            {
                return this.emailBlockingEvents
                    .Where(e => e.TenantId == tenantId)
                    .Where(e => e.OrganisationId == organisationId)
                    .Where(e => e.EmailAddress == emailAddress)
                    .OrderByDescending(e => e.CreatedTicksSinceEpoch)
                    .FirstOrDefault();
            }

            public void Insert(EmailAddressBlockingEvent lockingEvent)
            {
                this.emailBlockingEvents.Add(lockingEvent);
            }

            public void SaveChanges()
            {
                // No op;
            }
        }
    }
}
