// <auto-generated />
#pragma warning disable 1591

namespace UBind.Persistence.Migrations
{
    using System.Data.Entity.Migrations;
    
    public partial class CombinedChangesForRelease2 : DbMigration
    {
        public override void Up()
        {
            this.DeleteExistingUsers();

            DropForeignKey("dbo.Deployments", "Release_Id", "dbo.Releases");
            DropForeignKey("dbo.Deployments", "Product_Id", "dbo.Products");
            DropForeignKey("dbo.ProductDetails", "Product_Id", "dbo.Products");
            DropForeignKey("dbo.ProductEvents", "Product_Id", "dbo.Products");
            DropIndex("dbo.Deployments", new[] { "Release_Id" });
            DropIndex("dbo.Releases", "AK_ReleaseProductAndNumber");
            DropIndex("dbo.InvoiceNumbers", "AK_InvoiceNumberProductEnvironmentAndNumberIndex");
            DropIndex("dbo.PolicyNumbers", "AK_PolicyNumberProductEnvironmentAndNumberIndex");
            DropIndex("dbo.ProductDetails", new[] { "Product_Id" });
            DropIndex("dbo.ProductEvents", new[] { "Product_Id" });
            DropPrimaryKey("dbo.Products");
            CreateTable(
                "dbo.QuoteNumbers",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        ProductId = c.String(),
                        Environment = c.Int(nullable: false),
                        Method = c.Int(nullable: false),
                        Number = c.String(),
                        Seed = c.Int(),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Applications", t => t.Id)
                .Index(t => t.Id);
            
            CreateTable(
                "dbo.ClaimNumbers",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        TenantId = c.String(maxLength: 255, unicode: false),
                        ProductId = c.String(maxLength: 255, unicode: false),
                        Environment = c.Int(nullable: false),
                        Number = c.String(maxLength: 255, unicode: false),
                        IsAssigned = c.Boolean(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => new { t.TenantId, t.ProductId, t.Environment, t.Number }, unique: true, name: "AK_ClaimNumberTenantProductEnvironmentAndNumberIndex");
            
            CreateTable(
                "dbo.ClaimReadModels",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        TenantId = c.String(),
                        ProductId = c.String(),
                        Environment = c.Int(nullable: false),
                        QuoteId = c.Guid(nullable: false),
                        PolicyNumber = c.String(),
                        CustomerId = c.Guid(nullable: false),
                        PersonId = c.Guid(nullable: false),
                        CustomerFullName = c.String(),
                        CustomerPreferredName = c.String(),
                        OwnerUserId = c.Guid(nullable: false),
                        ReferenceNumber = c.String(),
                        Description = c.String(),
                        Status = c.Int(nullable: false),
                        CreationTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        IncidentDateAsDateTime = c.DateTime(nullable: false, precision: 7, storeType: "datetime2"),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.CustomerReadModels",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        PersonId = c.Guid(nullable: false),
                        TenantId = c.String(),
                        Environment = c.Int(nullable: false),
                        UserId = c.Guid(nullable: false),
                        FullName = c.String(),
                        PreferredName = c.String(),
                        Email = c.String(),
                        AlternativeEmail = c.String(),
                        MobilePhoneNumber = c.String(),
                        HomePhoneNumber = c.String(),
                        WorkPhoneNumber = c.String(),
                        OwnerUserId = c.Guid(nullable: false),
                        OwnerPersonId = c.Guid(nullable: false),
                        OwnerFullName = c.String(),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        UserIsBlocked = c.Boolean(nullable: false),
                        UserHasBeenInvitedToActivate = c.Boolean(nullable: false),
                        UserHasBeenActivated = c.Boolean(nullable: false),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.ReleaseDescriptions",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Description = c.String(),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        Release_Id = c.Guid(),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Releases", t => t.Release_Id)
                .Index(t => t.Release_Id);
            
            CreateTable(
                "dbo.EventRecordWithGuidIds",
                c => new
                    {
                        AggregateId = c.Guid(nullable: false),
                        Sequence = c.Int(nullable: false),
                        EventJson = c.String(),
                        TicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => new { t.AggregateId, t.Sequence });
            
            CreateTable(
                "dbo.EventRecordWithStringIds",
                c => new
                    {
                        AggregateId = c.String(nullable: false, maxLength: 128),
                        Sequence = c.Int(nullable: false),
                        EventJson = c.String(),
                        TicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => new { t.AggregateId, t.Sequence });
            
            CreateTable(
                "dbo.Portals",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        Tenant_Id = c.String(maxLength: 128),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Tenants", t => t.Tenant_Id)
                .Index(t => t.Tenant_Id);
            
            CreateTable(
                "dbo.PortalDetails",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Name = c.String(),
                        Abbreviation = c.String(),
                        Title = c.String(),
                        Disabled = c.Boolean(nullable: false),
                        Deleted = c.Boolean(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        Portal_Id = c.Guid(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Portals", t => t.Portal_Id, cascadeDelete: true)
                .Index(t => t.Portal_Id);
            
            CreateTable(
                "dbo.ReferrerUrls",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        IsDeleted = c.Boolean(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        Portal_Id = c.Guid(),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Portals", t => t.Portal_Id)
                .Index(t => t.Portal_Id);
            
            CreateTable(
                "dbo.ReferrerUrlDetails",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        URL = c.String(),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        ReferrerUrl_Id = c.Guid(),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.ReferrerUrls", t => t.ReferrerUrl_Id)
                .Index(t => t.ReferrerUrl_Id);
            
            CreateTable(
                "dbo.Tenants",
                c => new
                    {
                        Id = c.String(nullable: false, maxLength: 128),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.TenantDetails",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Name = c.String(),
                        Abbreviation = c.String(),
                        Disabled = c.Boolean(nullable: false),
                        Deleted = c.Boolean(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        Tenant_Id = c.String(nullable: false, maxLength: 128),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Tenants", t => t.Tenant_Id, cascadeDelete: true)
                .Index(t => t.Tenant_Id);
            
            CreateTable(
                "dbo.PortalSettings",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Name = c.String(),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        Setting_Id = c.String(maxLength: 128),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Settings", t => t.Setting_Id)
                .Index(t => t.Setting_Id);
            
            CreateTable(
                "dbo.PortalSettingDetails",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Active = c.Boolean(nullable: false),
                        PortalId = c.Guid(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        PortalSettings_Id = c.Guid(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.PortalSettings", t => t.PortalSettings_Id, cascadeDelete: true)
                .Index(t => t.PortalSettings_Id);
            
            CreateTable(
                "dbo.Settings",
                c => new
                    {
                        Id = c.String(nullable: false, maxLength: 128),
                        Name = c.String(),
                        Icon = c.String(),
                        SortOrder = c.Int(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.SettingDetails",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Disabled = c.Boolean(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        Tenant_Id = c.String(maxLength: 128),
                        Setting_Id = c.String(nullable: false, maxLength: 128),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.Tenants", t => t.Tenant_Id)
                .ForeignKey("dbo.Settings", t => t.Setting_Id, cascadeDelete: true)
                .Index(t => t.Tenant_Id)
                .Index(t => t.Setting_Id);
            
            CreateTable(
                "dbo.QuoteDocumentReadModels",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        QuoteId = c.Guid(nullable: false),
                        OwnerType = c.Int(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        Name = c.String(),
                        Type = c.String(),
                        Content = c.Binary(),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.QuoteNumberSequences",
                c => new
                    {
                        TenantId = c.String(nullable: false, maxLength: 128),
                        ProductId = c.String(nullable: false, maxLength: 128),
                        Environment = c.Int(nullable: false),
                        Method = c.Int(nullable: false),
                        Number = c.Int(nullable: false),
                    })
                .PrimaryKey(t => new { t.TenantId, t.ProductId, t.Environment, t.Method, t.Number });
            
            CreateTable(
                "dbo.QuoteReadModels",
                c => new
                    {
                        QuoteId = c.Guid(nullable: false),
                        TenantId = c.String(),
                        ProductId = c.String(),
                        Environment = c.Int(nullable: false),
                        LatestFormData = c.String(),
                        CustomerId = c.Guid(nullable: false),
                        CustomerPersonId = c.Guid(nullable: false),
                        CustomerFullName = c.String(),
                        CustomerPreferredName = c.String(),
                        CustomerEmail = c.String(),
                        CustomerAlternativeEmail = c.String(),
                        CustomerMobilePhone = c.String(),
                        CustomerHomePhone = c.String(),
                        CustomerWorkPhone = c.String(),
                        QuoteNumber = c.String(),
                        PolicyNumber = c.String(),
                        PolicyIsCancelled = c.Boolean(nullable: false),
                        PolicyFormDataId = c.Guid(nullable: false),
                        PolicyCalculationFormDataId = c.Guid(nullable: false),
                        PolicyCalculationResultId = c.Guid(nullable: false),
                        PolicyCalculationResultJson = c.String(),
                        IsSubmitted = c.Boolean(nullable: false),
                        IsInvoiced = c.Boolean(nullable: false),
                        IsPaidFor = c.Boolean(nullable: false),
                        PaymentReference = c.String(),
                        OwnerUserId = c.Guid(nullable: false),
                        OwnerPersonId = c.Guid(nullable: false),
                        OwnerFullName = c.String(),
                        LatestCalculationResultId = c.Guid(nullable: false),
                        LatestCalculationResultFormDataId = c.Guid(nullable: false),
                        LatestCalculationResultJson = c.String(),
                        TotalPayable = c.Decimal(nullable: false, precision: 18, scale: 2),
                        LastUpdatedTicksSinceEpoch = c.Long(nullable: false),
                        CreationTimeTicksSinceEpoch = c.Long(nullable: false),
                        PolicyIssueTimeTicksSinceEpoch = c.Long(nullable: false),
                        PolicyInceptionDateAsDateTime = c.DateTime(nullable: false, precision: 7, storeType: "datetime2"),
                        PolicyExpiryDateAsDateTime = c.DateTime(nullable: false, precision: 7, storeType: "datetime2"),
                        PolicyInceptionTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        PolicyExpiryTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        InvoiceTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        PolicyCancellationTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        SubmissionTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        PaymentTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.QuoteId);
            
            CreateTable(
                "dbo.UniqueIdentifiers",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Type = c.Int(nullable: false),
                        TenantId = c.String(maxLength: 255, unicode: false),
                        ProductId = c.String(maxLength: 255, unicode: false),
                        Environment = c.Int(nullable: false),
                        Identifier = c.String(maxLength: 255, unicode: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => new { t.Type, t.TenantId, t.ProductId, t.Environment, t.Identifier }, unique: true, name: "AK_UniqueIdentifierTypeTenantProductEnvironmentAndIdentifierIndex");
            
            CreateTable(
                "dbo.UniqueIdentifierConsumptions",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.UniqueIdentifiers", t => t.Id)
                .Index(t => t.Id);
            
            CreateTable(
                "dbo.UserLoginEmails",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        TenantId = c.String(maxLength: 255, unicode: false),
                        LoginEmail = c.String(maxLength: 255, unicode: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .Index(t => new { t.TenantId, t.LoginEmail }, unique: true, name: "AK_UserTenantAndEmailIndex");
            
            CreateTable(
                "dbo.UserProfilePictures",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        PictureData = c.Binary(),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.UserReadModels",
                c => new
                    {
                        UserId = c.Guid(nullable: false),
                        TenantId = c.String(),
                        Environment = c.Int(nullable: false),
                        PersonId = c.Guid(nullable: false),
                        LoginEmail = c.String(),
                        CustomerId = c.Guid(nullable: false),
                        Role = c.String(),
                        FullName = c.String(),
                        PreferredName = c.String(),
                        Email = c.String(),
                        AlternativeEmail = c.String(),
                        MobilePhoneNumber = c.String(),
                        HomePhoneNumber = c.String(),
                        WorkPhoneNumber = c.String(),
                        IsBlocked = c.Boolean(nullable: false),
                        HasBeenInvitedToActivate = c.Boolean(nullable: false),
                        HasBeenActivated = c.Boolean(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.UserId);
            
            AddColumn("dbo.Policies", "SubmittedCustomerDetailsId", c => c.Guid(nullable: false));
            AddColumn("dbo.Deployments", "TenantId", c => c.String());
            AddColumn("dbo.Deployments", "Product_Id", c => c.String(maxLength: 255, unicode: false));
            AddColumn("dbo.Releases", "TenantId", c => c.String(maxLength: 255, unicode: false));
            AddColumn("dbo.Releases", "Type", c => c.Int(nullable: false));
            AddColumn("dbo.InvoiceNumbers", "TenantId", c => c.String(maxLength: 255, unicode: false));
            AddColumn("dbo.PolicyNumbers", "TenantId", c => c.String(maxLength: 255, unicode: false));
            AddColumn("dbo.Products", "TenantId", c => c.String(nullable: false, maxLength: 128));
            AddColumn("dbo.ProductDetails", "Disabled", c => c.Boolean(nullable: false));
            AddColumn("dbo.ProductDetails", "Deleted", c => c.Boolean(nullable: false));
            AddColumn("dbo.ProductDetails", "Product_TenantId", c => c.String(nullable: false, maxLength: 128));
            AddColumn("dbo.ProductEvents", "Product_TenantId", c => c.String(maxLength: 128));
            AlterColumn("dbo.Deployments", "Release_Id", c => c.Guid());

            // Removed on 2021-10-14 by John Gamble so that we don't unnecessarily create tenants.
            /*this.RetrofitTenantData();*/

            AddPrimaryKey("dbo.Products", new[] { "TenantId", "Id" });
            CreateIndex("dbo.Deployments", "Release_Id");
            CreateIndex("dbo.Releases", new[] { "TenantId", "ProductId", "Number" }, unique: true, name: "AK_ReleaseProductAndNumber");
            CreateIndex("dbo.InvoiceNumbers", new[] { "TenantId", "ProductId", "Environment", "Number" }, unique: true, name: "AK_InvoiceNumberTenantProductEnvironmentAndNumberIndex");
            CreateIndex("dbo.PolicyNumbers", new[] { "TenantId", "ProductId", "Environment", "Number" }, unique: true, name: "AK_PolicyNumberTenantProductEnvironmentAndNumberIndex");
            CreateIndex("dbo.ProductDetails", new[] { "Product_TenantId", "Product_Id" });
            CreateIndex("dbo.ProductEvents", new[] { "Product_TenantId", "Product_Id" });
            AddForeignKey("dbo.Deployments", "Release_Id", "dbo.Releases", "Id");
            AddForeignKey("dbo.ProductDetails", new[] { "Product_TenantId", "Product_Id" }, "dbo.Products", new[] { "TenantId", "Id" }, cascadeDelete: true);
            AddForeignKey("dbo.ProductEvents", new[] { "Product_TenantId", "Product_Id" }, "dbo.Products", new[] { "TenantId", "Id" });
            DropColumn("dbo.Releases", "Label");
            DropColumn("dbo.ProductDetails", "IsActive");
            DropTable("dbo.Users");
        }
        
        public override void Down()
        {
            CreateTable(
                "dbo.Users",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        Email = c.String(),
                        FirstName = c.String(),
                        LastName = c.String(),
                        FullName = c.String(),
                        PhoneNumber = c.String(),
                        Picture = c.String(),
                        UserID = c.String(),
                        Role = c.String(),
                        Location = c.String(),
                        Blocked = c.Boolean(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id);
            
            AddColumn("dbo.ProductDetails", "IsActive", c => c.Boolean(nullable: false));
            AddColumn("dbo.Releases", "Label", c => c.String());
            DropForeignKey("dbo.ProductEvents", new[] { "Product_TenantId", "Product_Id" }, "dbo.Products");
            DropForeignKey("dbo.ProductDetails", new[] { "Product_TenantId", "Product_Id" }, "dbo.Products");
            DropForeignKey("dbo.Deployments", "Release_Id", "dbo.Releases");
            DropForeignKey("dbo.UniqueIdentifierConsumptions", "Id", "dbo.UniqueIdentifiers");
            DropForeignKey("dbo.PortalSettings", "Setting_Id", "dbo.Settings");
            DropForeignKey("dbo.SettingDetails", "Setting_Id", "dbo.Settings");
            DropForeignKey("dbo.SettingDetails", "Tenant_Id", "dbo.Tenants");
            DropForeignKey("dbo.PortalSettingDetails", "PortalSettings_Id", "dbo.PortalSettings");
            DropForeignKey("dbo.Portals", "Tenant_Id", "dbo.Tenants");
            DropForeignKey("dbo.TenantDetails", "Tenant_Id", "dbo.Tenants");
            DropForeignKey("dbo.ReferrerUrls", "Portal_Id", "dbo.Portals");
            DropForeignKey("dbo.ReferrerUrlDetails", "ReferrerUrl_Id", "dbo.ReferrerUrls");
            DropForeignKey("dbo.PortalDetails", "Portal_Id", "dbo.Portals");
            DropForeignKey("dbo.ReleaseDescriptions", "Release_Id", "dbo.Releases");
            DropForeignKey("dbo.QuoteNumbers", "Id", "dbo.Applications");
            DropIndex("dbo.UserLoginEmails", "AK_UserTenantAndEmailIndex");
            DropIndex("dbo.UniqueIdentifierConsumptions", new[] { "Id" });
            DropIndex("dbo.UniqueIdentifiers", "AK_UniqueIdentifierTypeTenantProductEnvironmentAndIdentifierIndex");
            DropIndex("dbo.ProductEvents", new[] { "Product_TenantId", "Product_Id" });
            DropIndex("dbo.ProductDetails", new[] { "Product_TenantId", "Product_Id" });
            DropIndex("dbo.SettingDetails", new[] { "Setting_Id" });
            DropIndex("dbo.SettingDetails", new[] { "Tenant_Id" });
            DropIndex("dbo.PortalSettingDetails", new[] { "PortalSettings_Id" });
            DropIndex("dbo.PortalSettings", new[] { "Setting_Id" });
            DropIndex("dbo.TenantDetails", new[] { "Tenant_Id" });
            DropIndex("dbo.ReferrerUrlDetails", new[] { "ReferrerUrl_Id" });
            DropIndex("dbo.ReferrerUrls", new[] { "Portal_Id" });
            DropIndex("dbo.PortalDetails", new[] { "Portal_Id" });
            DropIndex("dbo.Portals", new[] { "Tenant_Id" });
            DropIndex("dbo.PolicyNumbers", "AK_PolicyNumberTenantProductEnvironmentAndNumberIndex");
            DropIndex("dbo.InvoiceNumbers", "AK_InvoiceNumberTenantProductEnvironmentAndNumberIndex");
            DropIndex("dbo.ReleaseDescriptions", new[] { "Release_Id" });
            DropIndex("dbo.Releases", "AK_ReleaseProductAndNumber");
            DropIndex("dbo.Deployments", new[] { "Release_Id" });
            DropIndex("dbo.ClaimNumbers", "AK_ClaimNumberTenantProductEnvironmentAndNumberIndex");
            DropIndex("dbo.QuoteNumbers", new[] { "Id" });
            DropPrimaryKey("dbo.Products");
            AlterColumn("dbo.Deployments", "Release_Id", c => c.Guid(nullable: false));
            DropColumn("dbo.ProductEvents", "Product_TenantId");
            DropColumn("dbo.ProductDetails", "Product_TenantId");
            DropColumn("dbo.ProductDetails", "Deleted");
            DropColumn("dbo.ProductDetails", "Disabled");
            DropColumn("dbo.Products", "TenantId");
            DropColumn("dbo.PolicyNumbers", "TenantId");
            DropColumn("dbo.InvoiceNumbers", "TenantId");
            DropColumn("dbo.Releases", "Type");
            DropColumn("dbo.Releases", "TenantId");
            DropColumn("dbo.Deployments", "Product_Id");
            DropColumn("dbo.Deployments", "TenantId");
            DropColumn("dbo.Policies", "SubmittedCustomerDetailsId");
            DropTable("dbo.UserReadModels");
            DropTable("dbo.UserProfilePictures");
            DropTable("dbo.UserLoginEmails");
            DropTable("dbo.UniqueIdentifierConsumptions");
            DropTable("dbo.UniqueIdentifiers");
            DropTable("dbo.QuoteReadModels");
            DropTable("dbo.QuoteNumberSequences");
            DropTable("dbo.QuoteDocumentReadModels");
            DropTable("dbo.SettingDetails");
            DropTable("dbo.Settings");
            DropTable("dbo.PortalSettingDetails");
            DropTable("dbo.PortalSettings");
            DropTable("dbo.TenantDetails");
            DropTable("dbo.Tenants");
            DropTable("dbo.ReferrerUrlDetails");
            DropTable("dbo.ReferrerUrls");
            DropTable("dbo.PortalDetails");
            DropTable("dbo.Portals");
            DropTable("dbo.EventRecordWithStringIds");
            DropTable("dbo.EventRecordWithGuidIds");
            DropTable("dbo.ReleaseDescriptions");
            DropTable("dbo.CustomerReadModels");
            DropTable("dbo.ClaimReadModels");
            DropTable("dbo.ClaimNumbers");
            DropTable("dbo.QuoteNumbers");
            AddPrimaryKey("dbo.Products", "Id");
            CreateIndex("dbo.ProductEvents", "Product_Id");
            CreateIndex("dbo.ProductDetails", "Product_Id");
            CreateIndex("dbo.PolicyNumbers", new[] { "ProductId", "Environment", "Number" }, unique: true, name: "AK_PolicyNumberProductEnvironmentAndNumberIndex");
            CreateIndex("dbo.InvoiceNumbers", new[] { "ProductId", "Environment", "Number" }, unique: true, name: "AK_InvoiceNumberProductEnvironmentAndNumberIndex");
            CreateIndex("dbo.Releases", new[] { "ProductId", "Number" }, unique: true, name: "AK_ReleaseProductAndNumber");
            CreateIndex("dbo.Deployments", "Release_Id");
            AddForeignKey("dbo.ProductEvents", "Product_Id", "dbo.Products", "Id");
            AddForeignKey("dbo.ProductDetails", "Product_Id", "dbo.Products", "Id", cascadeDelete: true);
            AddForeignKey("dbo.Deployments", "Release_Id", "dbo.Releases", "Id", cascadeDelete: true);
        }
    }
}
