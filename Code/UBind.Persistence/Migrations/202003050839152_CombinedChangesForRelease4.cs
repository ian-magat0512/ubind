// <auto-generated />
#pragma warning disable 1591

namespace UBind.Persistence.Migrations
{
    using System;
    using System.Data.Entity.Migrations;
    
    public partial class CombinedChangesForRelease4 : DbMigration
    {
        public override void Up()
        {
            DropForeignKey("dbo.QuoteEmailSendingReadModels", "QuoteEmailReadModel_Id", "dbo.QuoteEmailReadModels");
            DropIndex("dbo.QuoteEmailSendingReadModels", new[] { "QuoteEmailReadModel_Id" });
            RenameColumn(table: "dbo.QuoteEmailSendingReadModels", name: "QuoteEmailReadModel_Id", newName: "QuoteEmailReadModelId");
            RenameColumn(table: "dbo.EmailAttachments", name: "QuoteEmailModelId", newName: "EmailId");
            RenameIndex(table: "dbo.EmailAttachments", name: "IX_QuoteEmailModelId", newName: "IX_EmailId");
            CreateTable(
                "dbo.PolicyReadModels",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        TenantId = c.String(),
                        ProductId = c.String(),
                        Environment = c.Int(nullable: false),
                        IsTestData = c.Boolean(nullable: false),
                        QuoteId = c.Guid(nullable: false),
                        OwnerUserId = c.Guid(nullable: false),
                        OwnerPersonId = c.Guid(nullable: false),
                        OwnerFullName = c.String(),
                        CustomerId = c.Guid(nullable: false),
                        CustomerPersonId = c.Guid(nullable: false),
                        CustomerFullName = c.String(),
                        CustomerPreferredName = c.String(),
                        CustomerEmail = c.String(),
                        CustomerAlternativeEmail = c.String(),
                        CustomerMobilePhone = c.String(),
                        CustomerHomePhone = c.String(),
                        CustomerWorkPhone = c.String(),
                        PolicyIssueTimeInTicksSinceEpoch = c.Long(nullable: false),
                        PolicyNumber = c.String(),
                        InceptionDateAsDateTime = c.DateTime(),
                        ExpiryDateAsDateTime = c.DateTime(),
                        InceptionTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        ExpiryTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        CancellationEffectiveTimeInTicksSinceEpoch = c.Long(nullable: false),
                        IsDiscarded = c.Boolean(nullable: false),
                        SerializedCalculationResult = c.String(),
                        LastUpdatedTicksSinceEpoch = c.Long(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.PolicyTransactions",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        PolicyId = c.Guid(nullable: false),
                        EffectiveTimeInTicksSinceEpoch = c.Long(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                        QuoteId = c.Guid(),
                        QuoteNumber = c.String(),
                        PolicyData_FormData = c.String(),
                        PolicyData_SerializedCalculationResult = c.String(),
                        PolicyData_InceptionTimeInTicksSinceEpoch = c.Long(),
                        PolicyData_ExpiryTimeInTicksSinceEpoch = c.Long(),
                        PolicyData_InceptionDateAsDateTime = c.DateTime(precision: 7, storeType: "datetime2"),
                        PolicyData_ExpiryDateAsDateTime = c.DateTime(precision: 7, storeType: "datetime2"),
                        Discriminator = c.String(nullable: false, maxLength: 128),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.Quotes",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        PolicyId = c.Guid(nullable: false),
                        EventSequenceNumber = c.Int(nullable: false),
                        Type = c.Int(nullable: false),
                        QuoteNumber = c.String(),
                        IsSubmitted = c.Boolean(nullable: false),
                        IsInvoiced = c.Boolean(nullable: false),
                        InvoiceNumber = c.String(),
                        IsPaidFor = c.Boolean(nullable: false),
                        PaymentReference = c.String(),
                        IsFunded = c.Boolean(nullable: false),
                        FundingId = c.String(),
                        AmountFunded = c.Decimal(nullable: false, precision: 18, scale: 2),
                        FundingPaymentFrequency = c.Int(nullable: false),
                        FundingNumberOfInstallments = c.Int(nullable: false),
                        FundingInitialInstalmentAmount = c.Decimal(nullable: false, precision: 18, scale: 2),
                        FundingRegularInstalmentAmount = c.Decimal(nullable: false, precision: 18, scale: 2),
                        LatestFormData = c.String(),
                        LatestCalculationResultId = c.Guid(nullable: false),
                        LatestCalculationResultFormDataId = c.Guid(nullable: false),
                        LatestCalculationResultJson = c.String(),
                        SerializedLatestCalculationResult = c.String(),
                        QuoteState = c.String(),
                        TotalPayable = c.Decimal(nullable: false, precision: 18, scale: 2),
                        PolicyIssued = c.Boolean(nullable: false),
                        LastUpdatedTicksSinceEpoch = c.Long(nullable: false),
                        InvoiceTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        SubmissionTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        PaymentTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        FundingTimeAsTicksSinceEpoch = c.Long(nullable: false),
                        WorkflowStep = c.String(),
                        IsDiscarded = c.Boolean(nullable: false),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.Roles",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        IsAdmin = c.Boolean(nullable: false),
                        TenantId = c.String(),
                        Type = c.Int(nullable: false),
                        Name = c.String(),
                        Description = c.String(),
                        SerializedPermissions = c.String(),
                        CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.UserEmailReadModels",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        UserId = c.Guid(nullable: false),
                        EmailType = c.Int(nullable: false),
                        EmailSourceType = c.Int(nullable: false),
                        EmailId = c.Guid(nullable: false),
                        Recipient = c.String(),
                        Subject = c.String(),
                        HasAttachment = c.Boolean(nullable: false),
                        CreationTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id);
            
            CreateTable(
                "dbo.UserEmailSentReadModels",
                c => new
                    {
                        Id = c.Guid(nullable: false),
                        UserEmailReadModelId = c.Guid(nullable: false),
                        CreationTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    })
                .PrimaryKey(t => t.Id)
                .ForeignKey("dbo.UserEmailReadModels", t => t.UserEmailReadModelId, cascadeDelete: true)
                .Index(t => t.UserEmailReadModelId);
            
            CreateTable(
                "dbo.UserReadModelRoles",
                c => new
                    {
                        UserReadModel_UserId = c.Guid(nullable: false),
                        Role_Id = c.Guid(nullable: false),
                    })
                .PrimaryKey(t => new { t.UserReadModel_UserId, t.Role_Id })
                .ForeignKey("dbo.UserReadModels", t => t.UserReadModel_UserId, cascadeDelete: true)
                .ForeignKey("dbo.Roles", t => t.Role_Id, cascadeDelete: true)
                .Index(t => t.UserReadModel_UserId)
                .Index(t => t.Role_Id);
            
            AddColumn("dbo.ClaimReadModels", "Amount", c => c.Decimal(nullable: false, precision: 18, scale: 2));
            AddColumn("dbo.ClaimReadModels", "LatestFormData", c => c.String());
            AddColumn("dbo.ClaimReadModels", "LatestCalculationResultId", c => c.Guid(nullable: false));
            AddColumn("dbo.ClaimReadModels", "LatestCalculationResultFormDataId", c => c.Guid(nullable: false));
            AddColumn("dbo.ClaimReadModels", "LatestCalculationResultJson", c => c.String());
            AddColumn("dbo.ReleaseDetails", "ProductJson", c => c.String());
            AddColumn("dbo.QuoteDocumentReadModels", "QuoteOrPolicyTransactionId", c => c.Guid(nullable: false));
            AddColumn("dbo.QuoteEmailReadModels", "EmailType", c => c.Int(nullable: false));
            AddColumn("dbo.QuoteEmailReadModels", "EmailSourceType", c => c.Int(nullable: false));
            AddColumn("dbo.QuoteEmailReadModels", "PolicyId", c => c.Guid(nullable: false));
            AddColumn("dbo.QuoteEmailReadModels", "QuoteId", c => c.Guid(nullable: false));
            AddColumn("dbo.QuoteEmailReadModels", "PolicyTransactionId", c => c.Guid(nullable: false));
            AddColumn("dbo.QuoteReadModels", "AggregateId", c => c.Guid(nullable: false));
            AddColumn("dbo.QuoteReadModels", "Type", c => c.Int(nullable: false));
            AddColumn("dbo.QuoteReadModels", "IsDiscarded", c => c.Boolean(nullable: false));
            AddColumn("dbo.QuoteReadModels", "QuoteState", c => c.String());
            AddColumn("dbo.QuoteReadModels", "PolicyEffectiveStartDateAsDateTime", c => c.DateTime(nullable: false, precision: 7, storeType: "datetime2"));
            AddColumn("dbo.QuoteReadModels", "PolicyEffectiveEndDateAsDateTime", c => c.DateTime(nullable: false, precision: 7, storeType: "datetime2"));
            AddColumn("dbo.QuoteReadModels", "PolicyEffectiveStartTimeAsTicksSinceEpoch", c => c.Long(nullable: false));
            AddColumn("dbo.QuoteReadModels", "PolicyEffectiveEndTimeAsTicksSinceEpoch", c => c.Long(nullable: false));
            AddColumn("dbo.QuoteReadModels", "SerializedLatestCalculationResult", c => c.String());
            AddColumn("dbo.QuoteReadModels", "SerializedPolicyCalculationResult", c => c.String());
            AddColumn("dbo.QuoteVersionReadModels", "QuoteVersionId", c => c.Guid(nullable: false));
            AddColumn("dbo.QuoteVersionReadModels", "AggregateId", c => c.Guid(nullable: false));
            AddColumn("dbo.QuoteVersionReadModels", "SerializedCalculationResult", c => c.String());
            AlterColumn("dbo.QuoteEmailSendingReadModels", "QuoteEmailReadModelId", c => c.Guid(nullable: false));
            CreateIndex("dbo.QuoteEmailSendingReadModels", "QuoteEmailReadModelId");
            AddForeignKey("dbo.QuoteEmailSendingReadModels", "QuoteEmailReadModelId", "dbo.QuoteEmailReadModels", "Id", cascadeDelete: true);
            DropColumn("dbo.ProductDetails", "TenantDisabled");
            DropColumn("dbo.QuoteVersionReadModels", "ProductId");
            DropColumn("dbo.QuoteVersionReadModels", "Environment");
        }
        
        public override void Down()
        {
            AddColumn("dbo.QuoteVersionReadModels", "Environment", c => c.Int(nullable: false));
            AddColumn("dbo.QuoteVersionReadModels", "ProductId", c => c.String());
            AddColumn("dbo.ProductDetails", "TenantDisabled", c => c.Boolean(nullable: false));
            DropForeignKey("dbo.QuoteEmailSendingReadModels", "QuoteEmailReadModelId", "dbo.QuoteEmailReadModels");
            DropForeignKey("dbo.UserEmailSentReadModels", "UserEmailReadModelId", "dbo.UserEmailReadModels");
            DropForeignKey("dbo.UserReadModelRoles", "Role_Id", "dbo.Roles");
            DropForeignKey("dbo.UserReadModelRoles", "UserReadModel_UserId", "dbo.UserReadModels");
            DropIndex("dbo.UserReadModelRoles", new[] { "Role_Id" });
            DropIndex("dbo.UserReadModelRoles", new[] { "UserReadModel_UserId" });
            DropIndex("dbo.UserEmailSentReadModels", new[] { "UserEmailReadModelId" });
            DropIndex("dbo.QuoteEmailSendingReadModels", new[] { "QuoteEmailReadModelId" });
            AlterColumn("dbo.QuoteEmailSendingReadModels", "QuoteEmailReadModelId", c => c.Guid());
            DropColumn("dbo.QuoteVersionReadModels", "SerializedCalculationResult");
            DropColumn("dbo.QuoteVersionReadModels", "AggregateId");
            DropColumn("dbo.QuoteVersionReadModels", "QuoteVersionId");
            DropColumn("dbo.QuoteReadModels", "SerializedPolicyCalculationResult");
            DropColumn("dbo.QuoteReadModels", "SerializedLatestCalculationResult");
            DropColumn("dbo.QuoteReadModels", "PolicyEffectiveEndTimeAsTicksSinceEpoch");
            DropColumn("dbo.QuoteReadModels", "PolicyEffectiveStartTimeAsTicksSinceEpoch");
            DropColumn("dbo.QuoteReadModels", "PolicyEffectiveEndDateAsDateTime");
            DropColumn("dbo.QuoteReadModels", "PolicyEffectiveStartDateAsDateTime");
            DropColumn("dbo.QuoteReadModels", "QuoteState");
            DropColumn("dbo.QuoteReadModels", "IsDiscarded");
            DropColumn("dbo.QuoteReadModels", "Type");
            DropColumn("dbo.QuoteReadModels", "AggregateId");
            DropColumn("dbo.QuoteEmailReadModels", "PolicyTransactionId");
            DropColumn("dbo.QuoteEmailReadModels", "QuoteId");
            DropColumn("dbo.QuoteEmailReadModels", "PolicyId");
            DropColumn("dbo.QuoteEmailReadModels", "EmailSourceType");
            DropColumn("dbo.QuoteEmailReadModels", "EmailType");
            DropColumn("dbo.QuoteDocumentReadModels", "QuoteOrPolicyTransactionId");
            DropColumn("dbo.ReleaseDetails", "ProductJson");
            DropColumn("dbo.ClaimReadModels", "LatestCalculationResultJson");
            DropColumn("dbo.ClaimReadModels", "LatestCalculationResultFormDataId");
            DropColumn("dbo.ClaimReadModels", "LatestCalculationResultId");
            DropColumn("dbo.ClaimReadModels", "LatestFormData");
            DropColumn("dbo.ClaimReadModels", "Amount");
            DropTable("dbo.UserReadModelRoles");
            DropTable("dbo.UserEmailSentReadModels");
            DropTable("dbo.UserEmailReadModels");
            DropTable("dbo.Roles");
            DropTable("dbo.Quotes");
            DropTable("dbo.PolicyTransactions");
            DropTable("dbo.PolicyReadModels");
            RenameIndex(table: "dbo.EmailAttachments", name: "IX_EmailId", newName: "IX_QuoteEmailModelId");
            RenameColumn(table: "dbo.EmailAttachments", name: "EmailId", newName: "QuoteEmailModelId");
            RenameColumn(table: "dbo.QuoteEmailSendingReadModels", name: "QuoteEmailReadModelId", newName: "QuoteEmailReadModel_Id");
            CreateIndex("dbo.QuoteEmailSendingReadModels", "QuoteEmailReadModel_Id");
            AddForeignKey("dbo.QuoteEmailSendingReadModels", "QuoteEmailReadModel_Id", "dbo.QuoteEmailReadModels", "Id");
        }
    }
}
