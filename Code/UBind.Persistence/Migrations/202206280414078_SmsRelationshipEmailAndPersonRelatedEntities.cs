// <auto-generated />
#pragma warning disable 1591

namespace UBind.Persistence.Migrations
{
    using System;
    using System.Data.Entity.Migrations;
    using System.IO;
    using UBind.Persistence.Helpers;
    using UBind.Persistence.Migrations.Extensions;

    public partial class SmsRelationshipEmailAndPersonRelatedEntities : DbMigration
    {
        public override void Up()
        {
            // DELETE TRIGGER FOR SETTING FIELD ID
            var sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"DeleteTriggersForSettingIdFromFieldId.sql");
            this.Sql(File.ReadAllText(sqlFile));

            //AddSmsEntityAndUpdateMessageManagementSettingsAndUpdateSerializedPermission
            CreateTable(
                "dbo.Sms",
                c => new
                {
                    Id = c.Guid(nullable: false),
                    To = c.String(),
                    From = c.String(),
                    Message = c.String(),
                    TenantId = c.Guid(nullable: false),
                    ProductId = c.Guid(nullable: false),
                    OrganisationId = c.Guid(nullable: false),
                    CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                })
                .PrimaryKey(t => t.Id);

            var addOrganisationsToExistingQuotesQuery = StartupJobRunnerQueryHelper
                .GenerateInsertQueryForStartupJobV1("UpdateMessageManagementSettings_20220628");
            this.Sql(addOrganisationsToExistingQuotesQuery);
            var updateSerializedPermissionsForMessages = StartupJobRunnerQueryHelper
                .GenerateInsertQueryForStartupJobV1("UpdateSerializedPermissionsForMessages_20220628", runManuallyIfInMultiNode: true);
            this.Sql(updateSerializedPermissionsForMessages);

            //AddReplyToPropertyToEmailEntity
            this.AddColumnIfNotExists("dbo.Emails", "ReplyTo", c => c.String());

            //MoveUserCustomerCommonDefinitionToPerson
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "PrimaryPersonId", c => c.Guid(nullable: false));
            this.AddColumnIfNotExists("dbo.PersonReadModels", "CustomerReadModel_Id", c => c.Guid(nullable: true));

            this.AlterColumn("dbo.CustomerReadModels", "UserId", c => c.Guid(nullable: true));
            this.AlterColumn("dbo.PersonReadModels", "UserId", c => c.Guid(nullable: true));

            this.CreateIndexDropFirstIfExists(
                "dbo.PersonReadModels",
                new[] { "CustomerReadModel_Id" },
                name: "AK_PersonReadModelCustomerReadModelIdIndex");
            this.AddForeignKey("dbo.PersonReadModels", "CustomerReadModel_Id", "dbo.CustomerReadModels", "Id");

            // Make all CustomerReadModel's PrimaryPersonId equivalent to PersonId
            this.Sql("UPDATE dbo.CustomerReadModels SET PrimaryPersonId = PersonId WHERE PersonId IS NOT NULL");

            // Execute the trigger
            var triggerSyncPrimaryPersonIdToPersonIdSqlPath = Path.Combine(
                AppDomain.CurrentDomain.BaseDirectory,
                "Migrations",
                "202204250329158_MoveUserCustomerCommonDefinitionToPerson.sql");
            this.Sql(File.ReadAllText(triggerSyncPrimaryPersonIdToPersonIdSqlPath));

            // Startup Job Runner
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJobV1(
                "CorrectUserIdAndCustomerIdFromReadModels_20220707", runManuallyIfInMultiNode: true));
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJobV1(
                "MigrateCustomerCommonPropertiesToPersonCommand_20220330"));

            // AddRelationshiJsonToSystemEventsAndTenantIdRelationships
            AddColumn("dbo.Relationships", "TenantId", c => c.Guid(nullable: false));
            AddColumn("dbo.SystemEvents", "PayloadJson", c => c.String());
            AddColumn("dbo.SystemEvents", "RelationshipJson", c => c.String());

            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJobV1("CreateIndexForRelationships_05042022", runManuallyIfInMultiNode: true));
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJobV1("SetTenantIdOfRelationship_05042022", runManuallyIfInMultiNode: true));

            // create trigger for renaming payload json.
            sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"CreateTriggersForRenamingColumnSerializedPayloadToPayloadJson.sql");
            this.Sql(File.ReadAllText(sqlFile));
        }
        
        public override void Down()
        {
            // CREATE TRIGGER FOR SETTING FIELD ID
            var sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"CreateTriggersForSettingIdFromFieldId.sql");
            this.Sql(File.ReadAllText(sqlFile));

            //AddSmsEntityAndUpdateMessageManagementSettingsAndUpdateSerializedPermission
            DropTable("dbo.Sms");

            var addOrganisationsToExistingQuotesQuery = StartupJobRunnerQueryHelper
              .GenerateInsertQueryForStartupJobV1("RollbackMessageManagementSettings_20220628");
            this.Sql(addOrganisationsToExistingQuotesQuery);

            var updateSerializedPermissionsForMessages = StartupJobRunnerQueryHelper
               .GenerateInsertQueryForStartupJobV1("UpdateSerializedPermissionsForMessages_20220628");
            this.Sql(updateSerializedPermissionsForMessages);

            //AddReplyToPropertyToEmailEntity
            DropColumn("dbo.Emails", "ReplyTo");

            //MoveUserCustomerCommonDefinitionToPerson
            this.Sql("DROP TRIGGER IF EXISTS dbo.SyncCustomerPrimaryPersonIdAndPersonIdColumnsOnUpsert");

            this.DropForeignKey("dbo.PersonReadModels", "CustomerReadModel_Id", "dbo.CustomerReadModels");
            this.DropIndex("dbo.PersonReadModels", "AK_PersonReadModelCustomerReadModelIdIndex");

            this.AlterColumn("dbo.PersonReadModels", "UserId", c => c.Guid(nullable: false));
            this.AlterColumn("dbo.CustomerReadModels", "UserId", c => c.Guid(nullable: false));

            this.DropColumn("dbo.PersonReadModels", "CustomerReadModel_Id");
            this.DropColumn("dbo.CustomerReadModels", "PrimaryPersonId");

            // AddRelationshiJsonToSystemEventsAndTenantIdRelationships
            // delete trigger for renaming payload json.
            var deleteTrigger = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"DeleteTriggersForRenamingColumnSerializedPayloadToPayloadJson.sql");
            this.Sql(File.ReadAllText(deleteTrigger));

            sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"DeleteIndexesForRelationships.sql");
            this.Sql(File.ReadAllText(sqlFile));

            DropColumn("dbo.SystemEvents", "RelationshipJson");
            DropColumn("dbo.SystemEvents", "PayloadJson");
            DropColumn("dbo.Relationships", "TenantId");

            this.Sql(StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob("SetTenantIdOfRelationship_05042022"));
        }
    }
}
