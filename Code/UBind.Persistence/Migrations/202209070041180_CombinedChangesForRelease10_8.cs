// <auto-generated />
#pragma warning disable 1591

namespace UBind.Persistence.Migrations
{
    using NodaTime;
    using System;
    using System.Data.Entity.Migrations;
    using System.IO;
    using UBind.Persistence.Helpers;
    using UBind.Persistence.Migrations.Extensions;

    public partial class CombinedChangesForRelease10_8 : DbMigration
    {
        private readonly string dropColumnsMethodName = "DropColumnsForSystemEventsAndCustomers_20220826";
        private readonly IClock clock = SystemClock.Instance;
        public override void Up()
        {
            // FOR UB-7460
            CreateTable(
                "dbo.DkimSettings",
                c => new
                {
                    Id = c.Guid(nullable: false),
                    TenantId = c.Guid(nullable: false),
                    OrganisationId = c.Guid(nullable: false),
                    DomainName = c.String(),
                    PrivateKey = c.String(),
                    DnsSelector = c.String(),
                    AgentOrUserIdentifier = c.String(),
                    ApplicableDomainNameListJSON = c.String(),
                    CreationTimeInTicksSinceEpoch = c.Long(nullable: false),
                })
                .PrimaryKey(t => t.Id);

            // FOR UB-7328/UB-7329
            this.AddColumnIfNotExists("dbo.PolicyReadModels", "PolicyState", c => c.String());
            this.AddColumnIfNotExists("dbo.PolicyReadModels", "LastModifiedByUserTicksSinceEpoch", c => c.Long());

            var updateNonclustedForPolicyReadModelSqlFile =
                Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"UpdateNonclusteredDBIndexForPolicyReadModels.sql");

            this.Sql(File.ReadAllText(updateNonclustedForPolicyReadModelSqlFile));
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJobV1("UpdateStateOnPolicyReadModels_20220729"));

            // FOR UB-7811
            this.AddColumnIfNotExists("dbo.StartupJobs", "Started", c => c.Boolean(nullable: false));
            this.AddColumnIfNotExists("dbo.StartupJobs", "HangfireJobId", c => c.String());

            // Set older startup jobs Started flag to true
            Instant hoursAgo = this.clock.GetCurrentInstant();
            hoursAgo = hoursAgo.Minus(Duration.FromHours(2));
            Sql($"UPDATE dbo.StartupJobs SET Started = 'TRUE' WHERE CreationTimeInTicksSinceEpoch < {hoursAgo.ToUnixTimeTicks()}");

            AlterColumn("dbo.CustomerReadModels", "UserHasBeenActivated", c => c.Boolean(nullable: true));
            AlterColumn("dbo.CustomerReadModels", "UserHasBeenInvitedToActivate", c => c.Boolean(nullable: true));
            AlterColumn("dbo.CustomerReadModels", "UserIsBlocked", c => c.Boolean(nullable: true));
            AlterColumn("dbo.CustomerReadModels", "PersonId", c => c.Guid(nullable: true));

            // FOR UB-7650
            // Delete trigger for renaming payload json.
            var deleteTriggerForPayloadJsonSqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"DeleteTriggersForRenamingColumnSerializedPayloadToPayloadJson.sql");
            this.Sql(File.ReadAllText(deleteTriggerForPayloadJsonSqlFile));

            // FOR UB-7371
            this.Sql("DROP TRIGGER IF EXISTS dbo.SyncCustomerPrimaryPersonIdAndPersonIdColumnsOnUpsert");

            var dropColumnsStartupJob = StartupJobRunnerQueryHelper
                .GenerateInsertQueryForStartupJobV1(this.dropColumnsMethodName, runManuallyIfInMultiNode: true);
            this.Sql(dropColumnsStartupJob);

            var RemoveEmptyTextAdditionalPropertyValueReadModels = StartupJobRunnerQueryHelper
                .GenerateInsertQueryForStartupJobV1("RemoveEmptyTextAdditionalPropertyValueReadModels_20220823");
            this.Sql(RemoveEmptyTextAdditionalPropertyValueReadModels);

            var UpdateAdditionalPropertyEntityTypeColumnValue = StartupJobRunnerQueryHelper
               .GenerateInsertQueryForStartupJobV1("UpdateAdditionalPropertyEntityTypeColumnValue_20220823");
            this.Sql(UpdateAdditionalPropertyEntityTypeColumnValue);
        }

        public override void Down()
        {
            // FOR UB-7371
            // Execute the trigger
            var triggerSyncPrimaryPersonIdToPersonIdSqlPath = Path.Combine(
                AppDomain.CurrentDomain.BaseDirectory,
                "Migrations",
                "202204250329158_MoveUserCustomerCommonDefinitionToPerson.sql");
            this.Sql(File.ReadAllText(triggerSyncPrimaryPersonIdToPersonIdSqlPath));

            this.AddColumnIfNotExists("dbo.CustomerReadModels", "NameSuffix", c => c.String());
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "LastName", c => c.String());
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "MiddleNames", c => c.String());
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "FirstName", c => c.String());
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "NamePrefix", c => c.String());
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "FullName", c => c.String());
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "UserHasBeenActivated", c => c.Boolean(nullable: false));
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "UserHasBeenInvitedToActivate", c => c.Boolean(nullable: false));
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "UserIsBlocked", c => c.Boolean(nullable: false));
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "UserId", c => c.Guid());
            this.AddColumnIfNotExists("dbo.CustomerReadModels", "PersonId", c => c.Guid(nullable: false));

            AlterColumn("dbo.CustomerReadModels", "UserHasBeenActivated", c => c.Boolean(nullable: false));
            AlterColumn("dbo.CustomerReadModels", "UserHasBeenInvitedToActivate", c => c.Boolean(nullable: false));
            AlterColumn("dbo.CustomerReadModels", "UserIsBlocked", c => c.Boolean(nullable: false));
            AlterColumn("dbo.CustomerReadModels", "PersonId", c => c.Guid(nullable: false));

            // FOR UB-7650
            this.AddColumnIfNotExists("dbo.SystemEvents", "SerializedPayload", c => c.String());
            // Create trigger
            var sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"CreateTriggersForRenamingColumnSerializedPayloadToPayloadJson.sql");
            this.Sql(File.ReadAllText(sqlFile));

            // FOR UB-7811
            DropColumn("dbo.StartupJobs", "HangfireJobId");
            DropColumn("dbo.StartupJobs", "Started");

            // FOR UB-7328/UB-7329 Recreate index on old version if the down migration is being run.
            var updateNonclustedForPolicyReadModelSqlFile =
                Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", "Sql", @"20220927_UpdateNonclusteredDBIndexForPolicyReadModelsOldVersion.sql");
            this.Sql(File.ReadAllText(updateNonclustedForPolicyReadModelSqlFile));
            DropColumn("dbo.PolicyReadModels", "LastModifiedByUserTicksSinceEpoch");
            DropColumn("dbo.PolicyReadModels", "PolicyState");

            // FOR UB-7460
            DropTable("dbo.DkimSettings");

            var dropColumnStartupJob = StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob(this.dropColumnsMethodName);
            this.Sql(dropColumnStartupJob);

            var RevertUpdateAdditionalPropertyEntityTypeColumnValue = StartupJobRunnerQueryHelper
                .GenerateInsertQueryForStartupJobV1("RevertUpdateAdditionalPropertyEntityTypeColumnValue_20220823");
            this.Sql(RevertUpdateAdditionalPropertyEntityTypeColumnValue);

            var RemoveEmptyTextAdditionalPropertyValueReadModels = StartupJobRunnerQueryHelper
                .GenerateDeleteQueryForStartupJob("RemoveEmptyTextAdditionalPropertyValueReadModels_20220823");
            this.Sql(RemoveEmptyTextAdditionalPropertyValueReadModels);

            var UpdateAdditionalPropertyEntityTypeColumnValue = StartupJobRunnerQueryHelper
               .GenerateDeleteQueryForStartupJob("UpdateAdditionalPropertyEntityTypeColumnValue_20220823");
            this.Sql(UpdateAdditionalPropertyEntityTypeColumnValue);            
        }
    }
}
