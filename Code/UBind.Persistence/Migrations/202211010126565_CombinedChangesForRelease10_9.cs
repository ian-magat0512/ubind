// <auto-generated />
#pragma warning disable 1591
namespace UBind.Persistence.Migrations
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity.Migrations;
    using System.IO;
    using UBind.Domain.Helpers;
    using UBind.Persistence.Helpers;
    using UBind.Persistence.Migrations.Extensions;

    public partial class CombinedChangesForRelease10_9 : DbMigration
    {
        /*--------------- START: RecreateReadModelsOfEvents ------------------*/
        private string createIndex = "CreateTenantIdIndexForEventGuidTable_20220516";
        private string recreateReadModel = "RecreateReadModelsOfEvents_20220524";
        private string pascalizeStatus = "PascalizeStatus_20220524";
        /*--------------- END: RecreateReadModelsOfEvents --------------------*/

        /*--------------- START: UpdateAssetFileContents ------------------*/
        private readonly string alias = "PopulateAssetFileContents";
        /*--------------- END: UpdateAssetFileContents --------------------*/

        public override void Up()
        {
            this.Up_AddPrecedingStartupJobAliases();
            this.Up_RecreateReadModelsOfEvents();
            this.Up_RenameDateFields();
            this.Up_AddLatestRenewalEffectiveAndRetroactiveColumnOnPolicyReadModels();
            this.Up_UpdateAssetFileContents();
            this.Up_AddEntityJsonSetting();
        }
        
        public override void Down()
        {
            this.Down_AddEntityJsonSetting();
            this.Down_UpdateAssetFileContents();
            this.Down_AddLatestRenewalEffectiveAndRetroactiveColumnOnPolicyReadModels();
            this.Down_RenameDateFields();
            this.Down_RecreateReadModelsOfEvents();
            this.Down_AddPrecedingStartupJobAliases();
        }

        private void Up_AddPrecedingStartupJobAliases()
        {
            AddColumn("dbo.StartupJobs", "PrecedingStartupJobAliases", c => c.String(nullable: true));
        }

        private void Down_AddPrecedingStartupJobAliases()
        {
            DropColumn("dbo.StartupJobs", "PrecedingStartupJobAliases");
        }

        private void Up_RecreateReadModelsOfEvents()
        {
            // UB-7110
            AlterColumn("dbo.EventRecordWithGuidIds", "TenantId", c => c.Guid(nullable: false));
            AlterColumn("dbo.EventRecordWithStringIds", "TenantId", c => c.Guid(nullable: false));

            // create the job.
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJobV1(
             this.createIndex, runManuallyIfInMultiNode: true));

            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJobV1(
               this.recreateReadModel, false, false));

            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJobV1(
              this.pascalizeStatus, false, false));

            // This is now offsetted to a startup job.
            // this.Pascalize("Quotes", "QuoteState");
            // this.Pascalize("ClaimReadModels", "Status");
            // this.Pascalize("PolicyReadModels", "PolicyState");
            // this.Pascalize("QuoteVersionReadModels", "State");
        }

        private void Down_RecreateReadModelsOfEvents()
        {
            // UB-7110
            AlterColumn("dbo.EventRecordWithStringIds", "TenantId", c => c.Guid());
            AlterColumn("dbo.EventRecordWithGuidIds", "TenantId", c => c.Guid());

            var sql = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"DeleteTenantIdIndexForGuidTable.sql");
            this.Sql(File.ReadAllText(sql));

            this.Sql(StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob(this.recreateReadModel));
        }

        private void Up_RenameDateFields()
        {
            // Create an SQL function that converts a datetime2 column to ticks
            var sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", "Sql", @"CreateFunctionDateTimeToTicks.sql");
            this.Sql(File.ReadAllText(sqlFile));

            // Create an SQL function that converts a ticks to datetime2 (in case we need this for the Down() migration)
            sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", "Sql", @"CreateFunctionTicksToDateTime.sql");
            this.Sql(File.ReadAllText(sqlFile));

            // Move the incident date to a timestamp column as it's something that happened in the past
            AddColumn("dbo.ClaimReadModels", "IncidentTicksSinceEpoch", c => c.Long());

            // Removed this query and place it into a startup job.
            // Copy the date time to the ticks column
            // this.Sql("UPDATE dbo.ClaimReadModels SET IncidentTicksSinceEpoch = dbo.ToTicks(IncidentDateAsDateTime);");

            // Removed this query and place it into a startup job.
            // For Cancellation transactions, copy the cancellation timestamp to the effective timestamp
            // this.Sql("UPDATE dbo.PolicyTransactions SET EffectiveTimeInTicksSinceEpoch = CancellationTimeAsTicksSinceEpoch "
            //     + "WHERE Discriminator = 'CancellationTransaction' "
            //     + "AND CancellationTimeAsTicksSinceEpoch > 0");

            // We're now storing the time zone against quotes, policies and claims
            AddColumn("dbo.ClaimReadModels", "TimeZoneId", c => c.String());
            AddColumn("dbo.PolicyReadModels", "TimeZoneId", c => c.String());
            AddColumn("dbo.Quotes", "TimeZoneId", c => c.String());

            // add PolicyReadModels.LatestPolicyPeriodStartTicks to representing the current policy period start date
            // We'll set this in the startup job.
            AddColumn("dbo.PolicyReadModels", "LatestPolicyPeriodStartTicksSinceEpoch", c => c.Long(nullable: false));
            AddColumn("dbo.PolicyReadModels", "LatestPolicyPeriodStartDateTime", c => c.DateTime(nullable: false, precision: 7, storeType: "datetime2"));

            // Add a new column to policy read models that lets us know the date of the latest adjustment
            AddColumn("dbo.PolicyReadModels", "AdjustmentEffectiveTicksSinceEpoch", c => c.Long());
            AddColumn("dbo.PolicyReadModels", "AdjustmentEffectiveDateTime", c => c.DateTime(precision: 7, storeType: "datetime2"));

            // Add a column to the policy that lets us know whether to rely on timestamps vs datetime
            AddColumn("dbo.PolicyReadModels", "AreTimestampsAuthoritative", c => c.Boolean(nullable: false));

            // Add the date time column to policy transactions (we already have a timestamp)
            AddColumn("dbo.PolicyTransactions", "EffectiveDateTime", c => c.DateTime(nullable: false, precision: 7, storeType: "datetime2"));

            // Removed this query and place it into a startup job.
            // Copy the Ticks to the datetime column
            // this.Sql("UPDATE dbo.PolicyTransactions SET EffectiveDateTime = dbo.ToDateTime2(EffectiveTimeInTicksSinceEpoch);");

            // Add last modified timestamp to these entities so we can track when they were last changed
            AddColumn("dbo.Files", "LastModifiedTicksSinceEpoch", c => c.Long(nullable: false));
            AddColumn("dbo.ProductOrganisationSettings", "LastModifiedTicksSinceEpoch", c => c.Long(nullable: false));
            AddColumn("dbo.ProductPortalSettings", "LastModifiedTicksSinceEpoch", c => c.Long(nullable: false));

            // We replaced this table long ago with dbo.Quotes
            DropTable("dbo.QuoteReadModels");

            // Drop the 'IX_Quotes_PolicyReadModels_LastUpdated' index, we'll recreate it below
            DropIndex("dbo.Quotes", "IX_Quotes_PolicyReadModels_LastUpdated");

            // Drop the IX_PolicyReadModels_CreationDate index, it was replaced by
            // IX_PolicyReadModels_LastModifiedDate_CreatedDate but might not have been dropped.
            DropIndex("dbo.PolicyReadModels", "IX_PolicyReadModels_CreationDate");

            // Drop the 'IX_PolicyReadModels_LastModifiedDate_CreatedDate' index, we'll recreate it below
            DropIndex("dbo.PolicyReadModels", "IX_PolicyReadModels_LastModifiedDate_CreatedDate");

            // Drop the 'IX_Quotes_PolicyReadModels_LastUpdated' index, we'll recreate it below
            DropIndex("dbo.PolicyReadModels", "IX_Quotes_PolicyReadModels_LastUpdated");

            // Drop the 'IX_LoginAttemptResults_TenantId_EmailAddress_OrganisationId' index, we'll recreate it below
            DropIndex("dbo.LoginAttemptResults", "IX_LoginAttemptResults_TenantId_EmailAddress_OrganisationId");

            // Rename the timestamp columns
            RenameDateFieldsData.GetTimestampColumnRenames().ForEach(cr =>
            {
                var tableName = SqlHelper.WithSchema(cr.TableName);
                if (cr.NewNullable)
                {
                    AlterColumn(tableName, cr.OldColumnName, c => c.Long(nullable: cr.NewNullable));
                }
                else
                {
                    AlterColumn(tableName, cr.OldColumnName, c => c.Long(nullable: cr.NewNullable, defaultValue: 0));
                }

                RenameColumn(tableName, cr.OldColumnName, cr.NewColumnName);
            });

            // Add the new DateTime columns as part of the rename process
            RenameDateFieldsData.GetDateTimeColumnRenames().ForEach(cr =>
            {
                var tableName = SqlHelper.WithSchema(cr.TableName);
                AlterColumn(tableName, cr.OldColumnName, c => c.DateTime(nullable: cr.NewNullable, precision: 7, storeType: "datetime2"));
                RenameColumn(tableName, cr.OldColumnName, cr.NewColumnName);
            });

            // Recreate the Last Updated index on the Quotes table
            sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", "Sql", @"20220813_RecreateQuotesLastModifiedIndex.sql");
            this.Sql(File.ReadAllText(sqlFile));

            // Recreate the Created date index on the Policy table
            sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", "Sql", @"20220813_RecreatePolicyCreatedIndex.sql");
            this.Sql(File.ReadAllText(sqlFile));

            // Recreate the Last Modified date index IX_PolicyReadModels_LastModifiedDate_CreatedDate on the Policy table
            // Note this used to be called IX_PolicyReadModels_CreationDate but was recreated with the new name in a prior migration.
            sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", "Sql", @"20220813_RecreatePolicyLastModifiedIndex.sql");
            this.Sql(File.ReadAllText(sqlFile));

            // Recreate the index on the login attempts table
            sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", "Sql", @"CreateLoginAttemptEmailAddressAndOrganisationIdIndexV2.sql");
            this.Sql(File.ReadAllText(sqlFile));

            // These will be removed after data migrations:
            // DropColumn("dbo.ClaimReadModels", "IncidentDateAsDateTime");
            // DropColumn("dbo.PolicyTransactions", "CancellationTimeAsTicksSinceEpoch");

            DropColumn("dbo.Quotes", "EventSequenceNumber");
            DropColumn("dbo.PolicyTransactions", "PolicyData_InceptionDateAsDateTime");
            DropColumn("dbo.PolicyTransactions", "PolicyData_InceptionTimeInTicksSinceEpoch");
            DropColumn("dbo.PolicyTransactions", "PolicyData_CancellationDateAsDateTime");
            DropColumn("dbo.PolicyTransactions", "PolicyData_CancellationTimeInTicksSinceEpoch");
            DropColumn("dbo.PolicyTransactions", "CancellationDateAsDateTime");
            DropColumn("dbo.ClaimVersionReadModels", "ClaimVersionId");

            var createStartupJobRecord = StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJob(
              "UpdateRecordsAndCreateIndexesForDateAndTimestampRenameCommand_20220818",
              true,
              false);
            Sql(createStartupJobRecord);

            createStartupJobRecord = StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJob(
              "RenameDateFieldsCleanup_20220818",
              false,
              true,
              new List<string> { "UpdateRecordsAndCreateIndexesForDateAndTimestampRenameCommand_20220818" });
            Sql(createStartupJobRecord);
        }

        private void Down_RenameDateFields()
        {
            // Delete the startup job we created
            Sql(StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob("RenameDateFields_20220818"));

            CreateTable(
                "dbo.QuoteReadModels",
                c => new
                {
                    QuoteId = c.Guid(nullable: false),
                    AggregateId = c.Guid(nullable: false),
                    TenantId = c.Guid(nullable: false),
                    ProductId = c.Guid(nullable: false),
                    IsTestData = c.Boolean(nullable: false),
                    Environment = c.Int(nullable: false),
                    Type = c.Int(nullable: false),
                    LatestFormData = c.String(),
                    CustomerId = c.Guid(nullable: false),
                    CustomerPersonId = c.Guid(nullable: false),
                    CustomerFullName = c.String(),
                    CustomerPreferredName = c.String(),
                    CustomerEmail = c.String(),
                    CustomerAlternativeEmail = c.String(),
                    CustomerMobilePhone = c.String(),
                    CustomerHomePhone = c.String(),
                    CustomerWorkPhone = c.String(),
                    IsDiscarded = c.Boolean(nullable: false),
                    QuoteNumber = c.String(),
                    PolicyNumber = c.String(),
                    PolicyIsCancelled = c.Boolean(nullable: false),
                    PolicyFormDataId = c.Guid(nullable: false),
                    PolicyCalculationFormDataId = c.Guid(nullable: false),
                    PolicyCalculationResultId = c.Guid(nullable: false),
                    PolicyCalculationResultJson = c.String(),
                    IsSubmitted = c.Boolean(nullable: false),
                    IsInvoiced = c.Boolean(nullable: false),
                    InvoiceNumber = c.String(),
                    IsPaidFor = c.Boolean(nullable: false),
                    PaymentReference = c.String(),
                    IsFunded = c.Boolean(nullable: false),
                    FundingId = c.String(),
                    AmountFunded = c.Decimal(nullable: false, precision: 18, scale: 2),
                    FundingPaymentFrequency = c.Int(nullable: false),
                    FundingNumberOfInstallments = c.Int(nullable: false),
                    FundingInitialInstalmentAmount = c.Decimal(nullable: false, precision: 18, scale: 2),
                    FundingRegularInstalmentAmount = c.Decimal(nullable: false, precision: 18, scale: 2),
                    OwnerUserId = c.Guid(nullable: false),
                    OwnerPersonId = c.Guid(nullable: false),
                    OwnerFullName = c.String(),
                    LatestCalculationResultId = c.Guid(nullable: false),
                    LatestCalculationResultFormDataId = c.Guid(nullable: false),
                    LatestCalculationResultJson = c.String(),
                    QuoteState = c.String(),
                    TotalPayable = c.Decimal(nullable: false, precision: 18, scale: 2),
                    LastUpdatedTicksSinceEpoch = c.Long(nullable: false),
                    CreationTimeTicksSinceEpoch = c.Long(nullable: false),
                    PolicyIssueTimeTicksSinceEpoch = c.Long(nullable: false),
                    PolicyInceptionDateAsDateTime = c.DateTime(nullable: false, precision: 7, storeType: "datetime2"),
                    PolicyExpiryDateAsDateTime = c.DateTime(nullable: false, precision: 7, storeType: "datetime2"),
                    PolicyEffectiveStartDateAsDateTime = c.DateTime(nullable: false, precision: 7, storeType: "datetime2"),
                    PolicyEffectiveEndDateAsDateTime = c.DateTime(nullable: false, precision: 7, storeType: "datetime2"),
                    PolicyInceptionTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    PolicyExpiryTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    PolicyEffectiveStartTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    PolicyEffectiveEndTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    InvoiceTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    PolicyCancellationTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    SubmissionTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    PaymentTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    FundingTimeAsTicksSinceEpoch = c.Long(nullable: false),
                    WorkflowStep = c.String(),
                    SerializedLatestCalculationResult = c.String(),
                    SerializedPolicyCalculationResult = c.String(),
                })
                .PrimaryKey(t => t.QuoteId);

            // Reverse the dropping of the datetime version of the incident timestamp column
            this.AddColumnIfNotExists("dbo.ClaimReadModels", "IncidentDateAsDateTime", c => c.DateTime());

            // Removed this query and place it into a startup job.
            // Copy the ticks back into the new date time column
            // this.Sql("UPDATE dbo.ClaimReadModels SET IncidentDateAsDateTime = dbo.ToDateTime2(IncidentTicksSinceEpoch);");

            // Delete the ticks column as we're back to useing the DateTime column
            DropColumn("dbo.ClaimReadModels", "IncidentTicksSinceEpoch");

            // Reverse the dropping these columns
            this.AddColumnIfNotExists("dbo.Quotes", "EventSequenceNumber", c => c.Int(nullable: false));
            this.AddColumnIfNotExists("dbo.ClaimReadModels", "IncidentDateAsDateTime", c => c.DateTime());
            this.AddColumnIfNotExists("dbo.PolicyTransactions", "PolicyData_InceptionDateAsDateTime", c => c.DateTime());
            this.AddColumnIfNotExists("dbo.PolicyTransactions", "PolicyData_InceptionTimeInTicksSinceEpoch", c => c.Long());
            this.AddColumnIfNotExists("dbo.PolicyTransactions", "PolicyData_CancellationDateAsDateTime", c => c.DateTime(nullable: false, precision: 7, storeType: "datetime2"));
            this.AddColumnIfNotExists("dbo.PolicyTransactions", "PolicyData_CancellationTimeInTicksSinceEpoch", c => c.Long());
            this.AddColumnIfNotExists("dbo.PolicyTransactions", "CancellationDateAsDateTime", c => c.DateTime());
            this.AddColumnIfNotExists("dbo.PolicyTransactions", "CancellationTimeAsTicksSinceEpoch", c => c.Long());
            this.AddColumnIfNotExists("dbo.ClaimVersionReadModels", "ClaimVersionId", c => c.Guid(nullable: false));

            // Drop the timeZone columns
            DropColumn("dbo.ClaimReadModels", "TimeZoneId");
            DropColumn("dbo.PolicyReadModels", "TimeZoneId");
            DropColumn("dbo.Quotes", "TimeZoneId");

            // Reverse adding last modified timestamp to these entities so we can track when they were last changed
            DropColumn("dbo.Files", "LastModifiedTicksSinceEpoch");
            DropColumn("dbo.ProductOrganisationSettings", "LastModifiedTicksSinceEpoch");
            DropColumn("dbo.ProductPortalSettings", "LastModifiedTicksSinceEpoch");

            // drop the effective columns from policy read models
            DropColumn("dbo.PolicyReadModels", "LatestPolicyPeriodStartTicksSinceEpoch");
            DropColumn("dbo.PolicyReadModels", "LatestPolicyPeriodStartDateTime");

            // Drop adjustmnet effective columns from policy read model
            DropColumn("dbo.PolicyReadModels", "AdjustmentEffectiveTicksSinceEpoch");
            DropColumn("dbo.PolicyReadModels", "AdjustmentEffectiveDateTime");

            // Drop the timestamps authoritative flag
            DropColumn("dbo.PolicyReadModels", "AreTimestampsAuthoritative");

            // Drop the 'IX_Quotes_PolicyReadModels_LastUpdated' index, we'll recreate it below
            DropIndex("dbo.Quotes", "IX_Quotes_PolicyReadModels_LastUpdated");

            // Drop the 'IX_PolicyReadModels_LastModifiedDate_CreatedDate' index, we'll recreate it below            
            DropIndex("dbo.PolicyReadModels", "IX_PolicyReadModels_LastModifiedDate_CreatedDate");

            // Drop the 'IX_LoginAttemptResults_TenantId_EmailAddress_OrganisationId' index, we'll recreate it below
            DropIndex("dbo.LoginAttemptResults", "IX_LoginAttemptResults_TenantId_EmailAddress_OrganisationId");

            RenameDateFieldsData.GetTimestampColumnRenames().ForEach(cr =>
            {
                this.RenameColumnReverse(cr);
            });

            RenameDateFieldsData.GetDateTimeColumnRenames().ForEach(cr =>
            {
                this.RenameColumnReverse(cr);
            });

            // Removed this query and place it into a startup job.
            // Copy the dateTime column to the Ticks column
            // this.Sql("UPDATE dbo.PolicyTransactions SET EffectiveTimeInTicksSinceEpoch = dbo.ToTicks(EffectiveDateTime)");

            // Drop the effective date column we added to policy transactions
            DropColumn("dbo.PolicyTransactions", "EffectiveDateTime");

            // Recreate the Last Updated index on the Quotes table
            var sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"IncludeIsTestDataFromQuotesPolicyReadModelIndex.sql");
            this.Sql(File.ReadAllText(sqlFile));

            // Recreate the Created date index on the PolicyReadModels table
            sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"UpdateNonclusteredDBIndexForPolicyReadModels.sql");
            this.Sql(File.ReadAllText(sqlFile));

            // Recreate the index on the login attempts table
            sqlFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Migrations", @"CreateLoginAttemptEmailAddressAndOrganisationIdIndex.sql");
            this.Sql(File.ReadAllText(sqlFile));
        }

        private void Up_AddLatestRenewalEffectiveAndRetroactiveColumnOnPolicyReadModels()
        {
            this.AddColumnIfNotExists("dbo.PolicyReadModels", "LatestRenewalEffectiveTicksSinceEpoch", c => c.Long(nullable: true));
            this.AddColumnIfNotExists("dbo.PolicyReadModels", "RetroactiveTicksSinceEpoch", c => c.Long());
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJob("SetLatestRenewalEffectiveOfPolicyReadModels_20220919"));
        }

        private void Down_AddLatestRenewalEffectiveAndRetroactiveColumnOnPolicyReadModels()
        {
            this.DropColumn("dbo.PolicyReadModels", "RetroactiveTicksSinceEpoch");
            this.DropColumn("dbo.PolicyReadModels", "LatestRenewalEffectiveTicksSinceEpoch");
            StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob("SetLatestRenewalEffectiveOfPolicyReadModels_20220919");
        }

        private void Up_UpdateAssetFileContents()
        {
            // Insert empty FileContents.Id to enable insert of empty Assets.FileContentId (FK)
            this.Sql(@"INSERT FileContents (Id, Content, HashCode)
SELECT CAST(0x0 AS UNIQUEIDENTIFIER), NULL, NULL
WHERE NOT EXISTS (SELECT 1 FROM FileContents WHERE Id = CAST(0x0 AS UNIQUEIDENTIFIER))");

            this.AddColumnIfNotExists("dbo.Assets", "FileContentId", c => c.Guid(nullable: false, defaultValue: Guid.Empty));
            this.AddColumnIfNotExists("dbo.FileContents", "TenantId", c => c.Guid(nullable: false, defaultValue: Guid.Empty));

            this.CreateIndex("dbo.Assets", "FileContentId");
            this.AddForeignKey("dbo.Assets", "FileContentId", "dbo.FileContents", "Id", cascadeDelete: true);

            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJob(this.alias));
        }

        private void Down_UpdateAssetFileContents()
        {
            this.DropIndex("dbo.Assets", new[] { "FileContentId" });
            this.DropForeignKey("dbo.Assets", "FileContentId", "dbo.FileContents");

            this.DropColumn("dbo.FileContents", "TenantId");
            this.DropColumn("dbo.Assets", "FileContentId");

            this.Sql(StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob(this.alias));
        }

        private void Up_AddEntityJsonSetting()
        {
            CreateTable(
                "dbo.EntityJsonSettings",
                c => new
                {
                    Id = c.Guid(nullable: false),
                    TenantId = c.Guid(nullable: false),
                    EntityType = c.Int(nullable: false),
                    EntityId = c.Guid(nullable: false),
                    SerializedSettings = c.String(),
                    CreatedTicksSinceEpoch = c.Long(nullable: false),
                })
                .PrimaryKey(t => t.Id);

        }

        private void Down_AddEntityJsonSetting()
        {
            DropTable("dbo.EntityJsonSettings");
        }
    }
}
