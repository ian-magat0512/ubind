// <auto-generated />
#pragma warning disable 1591

namespace UBind.Persistence.Migrations
{
    using System;
    using System.Data.Entity.Migrations;
    using UBind.Domain.Events;
    using UBind.Persistence.Helpers;
    using UBind.Persistence.Migrations.Extensions;

    public partial class CombinedMigrationFor12_1 : DbMigration
    {
        public const string CreateNonClusteredIndexForSystemEventsJob = "CreateNonClusteredIndexForSystemEvents_20231109";
        public const string UpdateSystemEventsExpiryTimeStampJob = "UpdateSystemEventsExpiryTimeStamp_20230901";
        private const string StartupJobAliasForQuotes = "SetTotalPayableOnExistingQuotes_20230608";
        private const string StartupJobAliasForPolicyTransactions = "SetTotalPayableOnExistingPolicyTransaction_20230630";
        private const string StartupJobAliasForClaims = "SetClaimReadModelDates_20230711";

        public override void Up()
        {
            this.AlterColumn("dbo.SystemEvents", "ExpiryTicksSinceEpoch", c => c.Long(nullable: true, defaultValue: null));
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJob(
                CreateNonClusteredIndexForSystemEventsJob));

            this.AddColumnIfNotExists("dbo.ClaimReadModels", "LodgedTicksSinceEpoch", c => c.Long());
            this.AddColumnIfNotExists("dbo.ClaimReadModels", "SettledTicksSinceEpoch", c => c.Long());
            this.AddColumnIfNotExists("dbo.ClaimReadModels", "DeclinedTicksSinceEpoch", c => c.Long());
            this.AddColumnIfNotExists("dbo.PolicyTransactions", "TotalPayable", c => c.Decimal(precision: 18, scale: 2));
            this.AlterColumn("dbo.Quotes", "TotalPayable", c => c.Decimal(precision: 18, scale: 2));

            // We'll do this in a Startup Job so it can happen after deployment to all nodes
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJob(
                StartupJobAliasForClaims,
                blocking: false,
                runManuallyIfInMultiNode: true));
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJob(
                StartupJobAliasForPolicyTransactions,
                blocking: false,
                runManuallyIfInMultiNode: true,
                precedingStartupJobAliases: new List<string> { StartupJobAliasForClaims }));
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJob(
                StartupJobAliasForQuotes,
                blocking: false,
                runManuallyIfInMultiNode: true,
                precedingStartupJobAliases: new List<string> { StartupJobAliasForPolicyTransactions }));
            this.Sql(StartupJobRunnerQueryHelper.GenerateInsertQueryForStartupJob(
                UpdateSystemEventsExpiryTimeStampJob,
                runManuallyIfInMultiNode: true,
                precedingStartupJobAliases: new List<string> { CreateNonClusteredIndexForSystemEventsJob, StartupJobAliasForQuotes }));
        }


        public override void Down()
        {
            foreach (var systemEventType in SystemEventTypeExtensions.GetSystemEventTypeValuesToPersistIndefinitely())
            {
                this.Sql($"UPDATE dbo.SystemEvents SET ExpiryTicksSinceEpoch = 0 WHERE ExpiryTicksSinceEpoch IS NULL AND EventType = {systemEventType}");
            }

            this.AlterColumn("dbo.SystemEvents", "ExpiryTicksSinceEpoch", c => c.Long(nullable: false, defaultValue: 0));

            string dropIndexSql = "IF EXISTS (SELECT 1 FROM sys.indexes " +
                " WHERE object_id = OBJECT_ID('dbo.SystemEvents') AND name = 'IX_SystemEvents_ExpiryTicksSinceEpoch_EventType')" +
                " DROP INDEX IX_SystemEvents_ExpiryTicksSinceEpoch_EventType ON dbo.SystemEvents";
            this.Sql(dropIndexSql);
            this.Sql(StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob(CreateNonClusteredIndexForSystemEventsJob));
            this.Sql(StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob(UpdateSystemEventsExpiryTimeStampJob));

            this.Sql("UPDATE dbo.Quotes set TotalPayable=0 where TotalPayable is NULL");
            this.AlterColumn("dbo.Quotes", "TotalPayable", c => c.Decimal(nullable: false, precision: 18, scale: 2));
            this.DropColumnIfExists("dbo.PolicyTransactions", "TotalPayable");
            this.DropColumnIfExists("dbo.ClaimReadModels", "DeclinedTicksSinceEpoch");
            this.DropColumnIfExists("dbo.ClaimReadModels", "SettledTicksSinceEpoch");
            this.DropColumnIfExists("dbo.ClaimReadModels", "LodgedTicksSinceEpoch");

            this.Sql(StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob(StartupJobAliasForQuotes));
            this.Sql(StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob(StartupJobAliasForPolicyTransactions));
            this.Sql(StartupJobRunnerQueryHelper.GenerateDeleteQueryForStartupJob(StartupJobAliasForClaims));
        }
    }
}