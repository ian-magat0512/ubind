// <copyright file="CombinedChangesForRelease2.cs" company="uBind">
// Copyright (c) uBind. All rights reserved.
// </copyright>

// If you edit this file, you must remove this line and then do proper null checking
#pragma warning disable CS8600, CS8625, CS8629, CS8618, CS8605, CS8604, CS8601, CS8602, CS8603, CS8622, CS8619, CS8767, CS8620, CS8765

namespace UBind.Persistence.Migrations
{
    using System;
    using System.Data.Entity.Migrations;
    using MoreLinq;
    using NodaTime;
    using UBind.Domain.Extensions;
    using UBind.Domain.Upgrade;

    /// <summary>
    /// For storing custom migration code outside generated migrations for ease of re-generation etc.
    /// </summary>
    public partial class CombinedChangesForRelease2 : DbMigration
    {
        /// <summary>
        /// Add tenant data for retrofitted tenants.
        /// </summary>
        /// <remarks>
        /// This needs to be added to autogenerated migration after table and column creation,
        /// but before key and index constraints.
        /// .</remarks>
        public void RetrofitTenantData()
        {
            var timestamp = SystemClock.Instance.Now().ToUnixTimeTicks();
            this.CreateTentants(timestamp);
            this.AddTenantIdToProducts();
            this.AddTenantToReleases();
            this.AddTenantIdsToProductDetails();
            this.AddTenantIdsToProductEvents();
            this.AddProductAndTenantIdsToDeployments();
            this.AddTenantIdsToPolicyNumbers();
            this.AddTenantIdsToInvoiceNumbers();
        }

        /// <summary>
        /// Delete existing users which should not have been created.
        /// </summary>
        public void DeleteExistingUsers()
        {
            var deleteUsersCommand = @"DELETE FROM dbo.Users;";
            this.Sql(deleteUsersCommand);
        }

        private void CreateTentants(long ticksSinceEpoch)
        {
            var mappingsByUniqueTenant = Release2ProductMappings.ProductMappings.DistinctBy(mapping => mapping.NewTenantAbbreviation);
            foreach (var mapping in mappingsByUniqueTenant)
            {
                var tenantInsertionCommand = $@"INSERT INTO dbo.Tenants (Id, CreationTimeInTicksSinceEpoch) VALUES ('{mapping.NewTenantAbbreviation}', {ticksSinceEpoch});";
                this.Sql(tenantInsertionCommand);
                var detailsInsertionCommand = $@"INSERT INTO dbo.TenantDetails (Id, Name, Abbreviation, Disabled, Deleted, Tenant_Id, CreationTimeInTicksSinceEpoch) VALUES ('{Guid.NewGuid()}', '{mapping.NewTenantName}', '{mapping.NewTenantAbbreviation}', 0, 0, '{mapping.NewTenantAbbreviation}', {ticksSinceEpoch});";
                this.Sql(detailsInsertionCommand);
            }
        }

        private void AddTenantIdToProducts()
        {
            foreach (var mapping in Release2ProductMappings.ProductMappings)
            {
                var productUpdateCommand = $@"UPDATE dbo.Products SET TenantId = '{mapping.NewTenantAbbreviation}', Id = '{mapping.NewProductAbbreviation}' WHERE Id = '{mapping.ExistingProductId}';";
                this.Sql(productUpdateCommand);
            }
        }

        private void AddTenantToReleases()
        {
            foreach (var mapping in Release2ProductMappings.ProductMappings)
            {
                var productUpdateCommand = $@"UPDATE dbo.Releases SET TenantId = '{mapping.NewTenantAbbreviation}', ProductId = '{mapping.NewProductAbbreviation}' WHERE ProductId = '{mapping.ExistingProductId}';";
                this.Sql(productUpdateCommand);
            }
        }

        private void AddTenantIdsToProductDetails()
        {
            foreach (var mapping in Release2ProductMappings.ProductMappings)
            {
                var productDetailsUpdateTenantIdCommand = $@"UPDATE dbo.ProductDetails SET Product_TenantId = '{mapping.NewTenantAbbreviation}', Product_Id = '{mapping.NewProductAbbreviation}', Name = '{mapping.NewProductName}' WHERE Product_Id = '{mapping.ExistingProductId}'";
                this.Sql(productDetailsUpdateTenantIdCommand);
            }
        }

        private void AddTenantIdsToProductEvents()
        {
            foreach (var mapping in Release2ProductMappings.ProductMappings)
            {
                var productEventsUpdateTenantIdCommand = $@"UPDATE dbo.ProductEvents SET Product_TenantId = '{mapping.NewTenantAbbreviation}', Product_Id = '{mapping.NewProductAbbreviation}' WHERE Product_Id = '{mapping.ExistingProductId}'";
                this.Sql(productEventsUpdateTenantIdCommand);
            }
        }

        private void AddProductAndTenantIdsToDeployments()
        {
            var deploymentUpdateProductIdCommand = @"UPDATE dbo.Deployments SET dbo.Deployments.Product_Id = dbo.Releases.ProductId FROM dbo.Deployments INNER JOIN dbo.Releases ON dbo.Deployments.Release_Id = dbo.Releases.Id";
            this.Sql(deploymentUpdateProductIdCommand);
            var deploymentUpdateTenantIdCommand = @"UPDATE dbo.Deployments SET dbo.Deployments.TenantId = dbo.Releases.TenantId FROM dbo.Deployments INNER JOIN dbo.Releases ON dbo.Deployments.Release_Id = dbo.Releases.Id";
            this.Sql(deploymentUpdateTenantIdCommand);
        }

        private void AddTenantIdsToPolicyNumbers()
        {
            foreach (var mapping in Release2ProductMappings.ProductMappings)
            {
                var command = $@"UPDATE dbo.PolicyNumbers SET TenantId = '{mapping.NewTenantAbbreviation}', ProductId = '{mapping.NewProductAbbreviation}' WHERE ProductId = '{mapping.ExistingProductId}'";
                this.Sql(command);
            }
        }

        private void AddTenantIdsToInvoiceNumbers()
        {
            foreach (var mapping in Release2ProductMappings.ProductMappings)
            {
                var command = $@"UPDATE dbo.InvoiceNumbers SET TenantId = '{mapping.NewTenantAbbreviation}', ProductId = '{mapping.NewProductAbbreviation}' WHERE ProductId = '{mapping.ExistingProductId}'";
                this.Sql(command);
            }
        }
    }
}
