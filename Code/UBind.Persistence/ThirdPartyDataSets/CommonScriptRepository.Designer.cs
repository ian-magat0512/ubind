//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UBind.Persistence.ThirdPartyDataSets {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class CommonScriptRepository {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal CommonScriptRepository() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("UBind.Persistence.ThirdPartyDataSets.CommonScriptRepository", typeof(CommonScriptRepository).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- Set the schema and table index values using c# string format
        ///DECLARE @Schema NVARCHAR(128) = &apos;{0}&apos;;
        ///DECLARE @TableIndex NVARCHAR(2) = &apos;{1}&apos;;
        ///DECLARE @Columns NVARCHAR(MAX);
        ///DECLARE @SqlQuery NVARCHAR(MAX);
        ///
        ///-- Create a table to store the list of tables
        ///CREATE TABLE #TableList
        ///(
        ///    TableName NVARCHAR(128)
        ///);
        ///
        ///IF @TableIndex = &apos;&apos;
        ///	BEGIN
        ///		-- Get tables without indexes
        ///		INSERT INTO #TableList (TableName)
        ///		SELECT t.name
        ///		FROM sys.tables t
        ///		WHERE t.schema_id = SCHEMA_ID(@Schema) and t.n [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string CreateOrAlterTableBoundedView {
            get {
                return ResourceManager.GetString("CreateOrAlterTableBoundedView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- Set the schema and table index values using c# string format
        ///DECLARE @Schema NVARCHAR(128) = &apos;{0}&apos;;
        ///DECLARE @TableIndex NVARCHAR(2)  = &apos;{1}&apos;;
        ///
        ///-- Create a temporary to store the list of tables
        ///CREATE TABLE #TableList
        ///(
        ///    TableName NVARCHAR(128)
        ///);
        ///
        ///-- Include tables without indexes to clean up the old data.
        ///-- Todo: This block can be removed in the future once we have tables with index prefix for GNAF, NFID, and RedBook
        ///INSERT INTO #TableList (TableName)
        ///SELECT t.name
        ///FROM sys.tables t
        ///W [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DropTablesBySchemaAndIndex {
            get {
                return ResourceManager.GetString("DropTablesBySchemaAndIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- Set the @Schema value using c# string format
        ///-- This will check for the existence of the latest table with the
        ///-- given schema and will return a two-character numeric suffix
        ///DECLARE @Schema NVARCHAR(128) = &apos;{0}&apos;
        ///DECLARE @TableName NVARCHAR(128)
        ///
        ///SELECT TOP 1 
        ///	@TableName = name
        ///FROM sys.tables
        ///WHERE schema_id = SCHEMA_ID(@Schema)
        ///ORDER BY create_date DESC
        ///
        ///IF @TableName LIKE &apos;%[_][0-9][0-9]&apos;
        ///BEGIN
        ///    -- Extract the two-character numeric suffix
        ///    SELECT Suffix = RIGHT(@TableName, 2)
        ///END [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetExistingTableIndexBySchema {
            get {
                return ResourceManager.GetString("GetExistingTableIndexBySchema", resourceCulture);
            }
        }
    }
}
