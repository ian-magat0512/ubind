import { AuthenticationMethodType } from "@app/models/authentication-method-type.enum";

/**
 * Interface for an authentication method, which is a way someone might log in to uBind.
 */
export interface AuthenticationMethodResourceModel {
    tenantId: string;
    organisationId: string;
    id: string;
    name: string;
    typeName: AuthenticationMethodType;
    includeSignInButtonOnPortalLoginPage: boolean;
    signInButtonLabel?: string;
    signInButtonBackgroundColor?: string;
    signInButtonIconUrl?: string;
    canCustomersSignIn: boolean;
    canAgentsSignIn: boolean;
    disabled: boolean;
}

/**
 * Upsert model for an authentication method, which is a way someone might log in to uBind.
 */
export interface AuthenticationMethodUpsertModel extends AuthenticationMethodResourceModel {
    tenant: string;
    organisation: string;
}

/**
 * Resource model for a local account authentication method.
 */
export interface LocalAccountAuthenticationMethodResourceModel extends AuthenticationMethodResourceModel {
    allowCustomerSelfRegistration: boolean;
    allowAgentSelfRegistration: boolean;
}

/**
 * Security Assertion Markup Language (SAML) is a standard that allows identity providers (IdP) to pass
 * authorization credentials to service providers (SP).
 * As an example, uBind are a Service Provider, and our client IAG would be an Identity provider, as they
 * provide the identities of their brokers to us so we can log them in.
 * --
 * The following information needs to be generated by uBind and given to the IdP so they can configure
 * SAML on their end:
 * - Assertion Consumer Service URL (ACS URL): an endpoint in uBind (SP) where the Identity Provider (IdP)
 * sends its SAML responses/assertions.
 * - Single Logout URL (SLO URL): an endpoint in uBind where the IdP sends logout requests.
 */
export interface SamlAuthenticationMethodResourceModel extends AuthenticationMethodResourceModel {

    /**
     * Gets or sets a unique identifier for the service provider or identity provider.
     * It's usually a URI, but it doesn't have to be a reachable location.
     */
    identityProviderEntityIdentifier: string;

    /**
     * Gets or sets the IdP URL where uBind sends SAML Authentication Request messages to when a user needs to be
     * authenticated.
     */
    identityProviderSingleSignOnServiceUrl: string;

    /**
     * Gets or sets the URL which uBind will send a logout request to when the user logs out of uBind.
     * This SLO URL is used to inform the IdP that the user has logged out of the SP (uBind), so that
     * the IdP can invalidate the user's session and also notify other service providers to log them out.
     * On the configuration screen we should also publish the uBind logout URL (SP SLO URL) so that the
     * IdP can send us a notification that the user's session has been invalidated and we can log them out
     * locally.
     */
    identityProviderSingleLogoutServiceUrl?: string;

    /**
     * Gets or sets the URL that is used to resolve a SAML artifact into the corresponding SAML assertion.
     * Instead of sending the entire SAML assertion to the Service Provider (SP) directly (via the user's
     * browser), the IdP sends a smaller reference called a SAML Artifact. This approach is beneficial
     * when you want to avoid potentially sensitive data being exposed at the user's browser.
     * The SP then uses a direct, server-to-server connection to the IdP's ArtifactResolutionServiceUrl
     * to exchange the SAML Artifact for the full SAML Assertion.
     * This process allows the SAML Assertion(which contains the user's authentication and/or authorization
     * data) to be transmitted securely between the SP and the IdP, without passing through the user's browser.
     */
    identityProviderArtifactResolutionServiceUrl?: string;

    /**
     * Gets or sets the digital certificate used by the IdP to sign SAML responses/assertions.
     * This certificate must contain IdP's public key (not the private key).
     * uBind will use the public key to verify the signature of the SAML response/assertion.
     */
    identityProviderCertificate: string;

    mustSignAuthenticationRequests: boolean;

    /**
     * Gets or sets a value indicating whether to link the identity to an existing customer user account if one is
     * found with the same email address.
     * If this is set to false, and an existing user account exists with the same email address, an error will be
     * generated and the user won't be able to log in.
     * If this is set to true, during first time login, the user will be linked to the existing user account.
     * This setting will only be available if customers can sign in using this authentication method.
     */
    shouldLinkExistingCustomerWithSameEmailAddress?: boolean;

    canCustomerAccountsBeAutoProvisioned: boolean;

    canCustomerDetailsBeAutoUpdated?: boolean;

    /**
     * Gets or sets a value indicating whether to link the identity to an existing agent user account if one is
     * found with the same email address.
     * If this is set to false, and an existing user account exists with the same email address, an error will be
     * generated and the user won't be able to log in.
     * If this is set to true, during first time login, the user will be linked to the existing user account.
     * This setting will only be available if agents can sign in using this authentication method.
     */
    shouldLinkExistingAgentWithSameEmailAddress?: boolean;

    canAgentAccountsBeAutoProvisioned: boolean;

    canAgentDetailsBeAutoUpdated?: boolean;

    /**
     * Gets or sets a value indicating whether to allow users of organisations that are managed by this
     * organisation to sign in using assertions from the Identity Provider.
     * This would require that there is an appropriate attribute mapping for the user's organisation,
     * and/or auto provisioning of the organisation is enabled.
     */
    canUsersOfManagedOrganisationsSignIn: boolean;

    /**
     * Gets or sets a value indicating whether to link the user to an existing organisation with the same alias.
     * If this is set to false, and an existing organisation exists with the same alias during auto-provisioning,
     * an error will be generated, and the user will not be able to have their account auto-provisioned.
     * If it's set to true, during auto-provisioning, the user will be linked to the existing organisation.
     * This setting is only relevant if CanUsersOfManagedOrganisationsSignIn is set to true.
     */
    shouldLinkExistingOrganisationWithSameAlias?: boolean;

    canOrganisationsBeAutoProvisioned?: boolean;

    canOrganisationDetailsBeAutoUpdated?: boolean;

    /**
     * Gets or sets the format of the NameID that the IdP will include in the SAML response.
     * This could be an email address, a transient identifier, a persistent identifier, etc.
     * Example: "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress".
     */
    nameIdFormat: string;

    /**
     * Gets or sets a value indicating whether to use the NameID as the unique identifier for the user.
     * If set to false, the unique identifier must be set in the attribute mapping.
     */
    useNameIdAsUniqueIdentifier: boolean;

    /**
     * Gets or sets a value indicating whether to use the NameID as the email address of the user.
     * This is only relevant if the NameIDFormat is set to an emailAddress.
     * If this is set, there is no need to use an attribute mapping to map the email address.
     */
    useNameIdAsEmailAddress?: boolean;

    /**
     * Gets or sets the name of the attribute that contains the unique identifier for the user.
     * This is only required when UseNameIdAsUniqueIdentifier is set to false.
     */
    uniqueIdentifierAttributeName?: string;

    firstNameAttributeName?: string;

    lastNameAttributeName?: string;

    emailAddressAttributeName?: string;

    phoneNumberAttributeName?: string;

    mobileNumberAttributeName?: string;

    /**
     *  Gets or sets the name of the attribute that contains the type of user account.
     *  This is needed to determine whether the user is a customer or an agent, and is only required
     *  when this authentication method allows both customers and users to sign-in using an IDP initiated
     *  sign in method with auto provisioning enabled for that user type.
     *  The reason this is required, is because if the user doesn't exist, we need to know which type of
     *  user to create. If the user initiated their own login from a portal, we know they are a customer or
     *  an agent because of the portal they initated their request from, because it would have been an agent portal
     *  or a customer portal. However if the IdP redirects the user to uBind's SAML endpoint, asking us to create a
     *  user, we don't know which portal, so we don't know the user type to create. Therefore we need to rely on this
     *  SAML attribute to help us.
     */
    userTypeAttributeName?: string;

    /**
     * Gets or sets the name of the attribute that contains the unique identifier for the user's organisation.
     * Only required if CanUsersOfManagedOrganisationsSignIn is set to true.
     */
    organisationUniqueIdentifierAttributeName?: string;

    /**
     * Gets or sets the name of the attribute that contains the name of the user's organisation.
     * Only required if CanUsersOfManagedOrganisationsSignIn is set to true.
     */
    organisationNameAttributeName?: string;

    /**
     * Gets or sets the name of the attribute that contains the alias of the user's organisation.
     * If left blank it will be auto generated.
     */
    organisationAliasAttributeName?: string;

    /**
     * Gets or sets the name of the attribute that contains a user's role or roles.
     * The role attribute name allows us to know what roles in the IdP the user has.
     * The way these multi-valued attributes are represented in the SAML assertion can vary. For example, they
     * might be included as multiple &lt;saml:AttributeValue&gt; elements within a single &lt;saml:Attribute&gt;
     * element, or they might be included as a single string with some form of delimiter (such as commas or
     * semicolons) between the individual values.
     * Once we have the role for a particular user, we still might need to map the roles in the IdP to roles in
     * uBind, defined against the organisation or tenant, so we'lkl have a separate role mapping for that.
     */
    roleAttributeName?: string;

    /**
     * Gets or sets the delimiter used to separate multiple values in the role AttributeValue.
     * Leave empty if each role AttributeValue only contains a single value, and instead there are multiple
     * instances of AttributeValue for the role Attribute.
     */
    roleAttributeValueDelimiter?: string;

    /**
     * Gets or sets a default role which all agents provisioned by this authentication method will be given.
     */
    defaultAgentRoleId?: string;

    /**
     * Gets or sets a mapping of Idp role names to uBind role IDs.
     */
    roleMap?: {
        [key: string]: string;
    };

    /**
     * Gets or sets a value indicating whether this identity provider is the authority on what roles
     * users have.
     * If this is set to true, then roles cannot be manually assigned to this user wtihin uBind, and
     * each time the user signs in, their roles will be updated to match the roles specified in the
     * identity provider.
     */
    areRolesManagedExclusivelyByThisIdentityProvider: boolean;
}

/**
 * Upsert model for creating SAML auth methods.
 */
export interface SamlAuthenticationMethodUpsertModel
    extends SamlAuthenticationMethodResourceModel, AuthenticationMethodUpsertModel {
}

/**
 * Upsert model for creating local account auth methods.
 */
export interface LocalAccountAuthenticationUpsertModel
    extends LocalAccountAuthenticationMethodResourceModel, AuthenticationMethodUpsertModel {
}
