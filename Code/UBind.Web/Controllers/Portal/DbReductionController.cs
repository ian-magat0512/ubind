// <copyright file="DbReductionController.cs" company="uBind">
// Copyright (c) uBind. All rights reserved.
// </copyright>

// If you edit this file, you must remove this line and then do proper null checking
#pragma warning disable CS8600, CS8625, CS8629, CS8618, CS8605, CS8604, CS8601, CS8602, CS8603, CS8622, CS8619, CS8767, CS8620, CS8765

namespace UBind.Web.Controllers.Portal
{
    using System;
    using Hangfire;
    using Microsoft.AspNetCore.Mvc;
    using UBind.Application.Authorisation;
    using UBind.Domain.Enums;
    using UBind.Domain.Services;
    using UBind.Web.Filters;

    /// <summary>
    /// Controller for database size reduction.
    /// </summary>
    [Produces("application/json")]
    [Route("/api/v1/")]
    [ServiceFilter(typeof(ClientIPAddressFilterAttribute))]
    public class DbReductionController : Controller
    {
        private const string RecurringNascentQuoteDeletionJobId = "RecurringNascentQuoteDeletionJobId";
        private const string RecurringMiniProfilerTruncationJobId = "RecurringMiniProfilerTruncationJobId";

        private readonly IDeletionService deletionService;
        private readonly IAuthorisationService authorisationService;

        /// <summary>
        /// Initializes a new instance of the <see cref="DbReductionController"/> class.
        /// </summary>
        /// <param name="deletionService">A service interface for deleting data.</param>
        /// <param name="authorisationService">The authorization service.</param>
        public DbReductionController(IDeletionService deletionService, IAuthorisationService authorisationService)
        {
            this.deletionService = deletionService;
            this.authorisationService = authorisationService;
        }

        /// <summary>
        /// Execute the deletion of database record to all nascent quotes. This call removes any related to the quote
        /// read model (including the policy, versions, emails, etc.)
        ///
        /// Dev note: Quotes generated by PRTG are recorded as NASCENT quotes as well.
        /// </summary>
        /// <param name="batchSize">The number of records to delete per batch (capped to 150, default 100).</param>
        /// <param name="deletionLimit">
        ///   The maximum number of entries to delete.
        ///   Setting the value to -1 will remove all entries, which is the default value as well.
        /// </param>
        /// <returns>The action result from the request.</returns>
        [HttpPost]
        [Route("delete-nascent-quotes")]
        [RequestRateLimit(Period = 10, Type = RateLimitPeriodType.Seconds, Limit = 5)]
        [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
        public async Task<IActionResult> DeleteNascentQuotes(int batchSize = 100, int deletionLimit = -1)
        {
            await this.authorisationService.ThrowIfUserIsNotFromMasterTenant(this.User, "delete nascent quotes");
            var cappedBatchSize = Math.Min(batchSize, 150);
            this.deletionService.QueueBackgroundDeletionNascentQuotes(cappedBatchSize, deletionLimit);

            return this.Ok("System is now doing all nascent record deletion, check Hangfire for status.");
        }

        /// <summary>
        /// Execute the deletion of mini profiler in the database.
        /// </summary>
        /// <returns>The action result from the request.</returns>
        [HttpPost]
        [Route("truncate-miniprofiler")]
        [RequestRateLimit(Period = 10, Type = RateLimitPeriodType.Seconds, Limit = 5)]
        [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
        public async Task<IActionResult> TruncateMiniProfilerTable()
        {
            await this.authorisationService.ThrowIfUserIsNotFromMasterTenant(this.User, "truncate mini profiler");

            this.deletionService.QueueBackgroundTruncateMiniProfilerData();

            return this.Ok("System is now doing all mini profiler data deletion, check Hangfire for status.");
        }

        /// <summary>
        /// Schedule the recurrence of nascent deletion.
        /// </summary>
        /// <param name="batchSize">The number of records to delete per batch (capped to 150, default 100).</param>
        /// <param name="deletionLimit">The deletion limit per recurrence.</param>
        /// <param name="startTime">The hour in which the schedule will be activated (0-23) in UTC.</param>
        /// <returns>The action result from the request.</returns>
        [HttpPost]
        [Route("schedule-delete-nascent-quotes")]
        [RequestRateLimit(Period = 10, Type = RateLimitPeriodType.Seconds, Limit = 5)]
        [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
        public async Task<IActionResult> ScheduleNascentDeletion(int batchSize = 100, int deletionLimit = -1, int startTime = 0)
        {
            await this.authorisationService.ThrowIfUserIsNotFromMasterTenant(this.User, "schedule nascent deletion");

            var cappedBatchSize = Math.Min(batchSize, 150);
            this.deletionService.ScheduleNascentDeletion(
                RecurringNascentQuoteDeletionJobId, cappedBatchSize, deletionLimit, Cron.Daily(startTime));
            return this.Ok("The system is now queueing the recurrence of nascent deletion.");
        }

        /// <summary>
        /// Stop any recurring nascent deletion.
        /// </summary>
        /// <returns>The action result from the request.</returns>
        [HttpPost]
        [Route("stop-delete-nascent-quotes")]
        [RequestRateLimit(Period = 10, Type = RateLimitPeriodType.Seconds, Limit = 5)]
        [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
        public async Task<IActionResult> RemoveRecurringNascentDeletion()
        {
            await this.authorisationService.ThrowIfUserIsNotFromMasterTenant(this.User, "remove recurring nascent deletion");
            this.deletionService.RemoveAnyRecurringJob(RecurringNascentQuoteDeletionJobId);
            return this.Ok("The system is stop any recurring nascent deletion.");
        }

        /// <summary>
        /// Perform to recurring the nascent deletion.
        /// </summary>
        /// <param name="dayOfWeek">The day of week in which the schedule will be activated.</param>
        /// <param name="hour">The hour in which the schedule will be activated (0-23).</param>
        /// <param name="minute">The minute in which the schedule will be activated (0-59).</param>
        /// <returns>The action result from the request.</returns>
        [HttpPost]
        [Route("schedule-truncate-miniprofiler")]
        [RequestRateLimit(Period = 10, Type = RateLimitPeriodType.Seconds, Limit = 5)]
        [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
        public async Task<IActionResult> RecurTruncateMiniProfiler(DayOfWeek dayOfWeek, int hour, int minute = 0)
        {
            await this.authorisationService.ThrowIfUserIsNotFromMasterTenant(this.User, "perform recurring nascent deletion");

            this.deletionService.ScheduleTruncateMiniProfiler(
                RecurringMiniProfilerTruncationJobId, Cron.Weekly(dayOfWeek, hour, minute));
            return this.Ok("The system is now queueing the recurrence of mini-profiler truncation.");
        }

        /// <summary>
        /// Stop any recurring mini-profiler truncation.
        /// </summary>
        /// <returns>The action result from the request.</returns>
        [HttpPost]
        [Route("stop-truncate-miniprofiler")]
        [RequestRateLimit(Period = 10, Type = RateLimitPeriodType.Seconds, Limit = 5)]
        [ProducesResponseType(typeof(string), StatusCodes.Status200OK)]
        public async Task<IActionResult> RemoveRecurringMiniProfilerTruncation()
        {
            await this.authorisationService.ThrowIfUserIsNotFromMasterTenant(this.User, "Stop recurring mini-profiler truncation");
            this.deletionService.RemoveAnyRecurringJob(RecurringMiniProfilerTruncationJobId);
            return this.Ok("The system is stop any recurring mini-profiler truncation.");
        }
    }
}
