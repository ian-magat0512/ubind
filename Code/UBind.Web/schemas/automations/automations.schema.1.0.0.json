{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Automations",
  "description": "For the definition of automations which can be run, typically in response to steps or actions during form fill, but also in response to events within the ubind system.",
  "type": "object",
  "properties": {
    "schemaVersion": {
      "type": "string",
      "description": "The version of the schema which this json structure must validate against.",
      "enum": [
        "1.0.0"
      ]
    },
    "automations": {
      "type": "array",
      "description": "An array of automations which can be run.",
      "items": {
        "$ref": "#automation"
      },
      "additionalItems": false
    }
  },
  "required": [
    "schemaVersion"
  ],
  "additionalProperties": false,
  "definitions": {
    "automation": {
      "$id": "#automation",
      "type": "object",
      "description": "An automation that can be run.",
      "properties": {
        "name": {
          "$ref": "#name",
          "description": "A name for the automation."
        },
        "alias": {
          "$ref": "#alias",
          "description": "An ID for the automation."
        },
        "description": {
          "$ref": "#description",
          "description": "A description for the automation."
        },
        "runCondition": {
          "$ref": "#condition",
          "description": "An optional condition. When true, this automation is run. When false, this automation is not run."
        },
        "triggers": {
          "type": "array",
          "description": "A list of triggers for the automation.",
          "items": {
            "$ref": "#trigger"
          },
          "additionalItems": false
        },
        "actions": {
          "type": "array",
          "description": "A list of actions for the automation to run.",
          "items": {
            "$ref": "#action"
          },
          "additionalItems": false
        }
      },
      "required": [
        "name",
        "alias"
      ],
      "additionalProperties": false
    },
    "trigger": {
      "$id": "#trigger",
      "description": "A trigger for an automation.",
      "type": "object",
      "properties": {
        "httpTrigger": {
          "$id": "#httpTrigger",
          "type": "object",
          "description": "A trigger that is invoked by making HTTP requests to a custom API endpoint. This trigger will wait for any associated non-asynchronous actions to complete before forming the httpResponse, so that it can reference data from the automation data created by those actions.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the trigger."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the trigger."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the trigger."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this automation is run. When false, this automation is not run."
            },
            "context": {
              "$ref": "#context",
              "description": "An optional object containing a list of entities that will be set as the automation context."
            },
            "endpoint": {
              "type": "object",
              "description": "The definition of the API endpoint that the HTTP trigger will be invoked through.",
              "properties": {
                "path": {
                  "$ref": "#staticText",
                  "description": "The relative path of the endpoint URL. This will be appended to the root path of the HTTP trigger endpoints. This value must be unique per tenant and per HTTP verb."
                },
                "httpVerb": {
                  "$ref": "#httpVerb",
                  "description": "The HTTP verb that the endpoint will respond to. Defaults to GET."
                },
                "requestValidationErrorConditions": {
                  "type": "array",
                  "description": "A list of conditiopns representing validation rules applied to requests made to the endpoint. If any fail, the response will be an error as defined.",
                  "items": {
                    "$ref": "#errorCondition"
                  },
                  "additionalItems": false
                }
              },
              "required": [
                "path"
              ],
              "additionalProperties": false
            },
            "httpResponse": {
              "$ref": "#httpResponse",
              "description": "A definition of the HTTP Response that will be generated if the automation successfully completes."
            }
          },
          "required": [
            "name",
            "alias",
            "endpoint",
            "httpResponse"
          ],
          "additionalProperties": false
        },
        "eventTrigger": {
          "$id": "#eventTrigger",
          "type": "object",
          "description": "A trigger that is invoked when a specified system event or custom event is raised.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the trigger."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the trigger."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the trigger."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this automation is run. When false, this automation is not run."
            },
            "eventType": {
              "$ref": "#eventType",
              "description": "The event type of a system event."
            },
            "customEventAlias": {
              "$ref": "#staticText",
              "description": "The alias of a custom event. Must be used if the value of the eventType property is 'custom'."
            }
          },
          "required": [
            "name",
            "alias",
            "eventType"
          ],
          "additionalProperties": false
        },
        "periodicTrigger": {
          "$id": "#periodicTrigger",
          "type": "object",
          "description": "A trigger that is invoked on a periodic basis.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the trigger."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the trigger."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the trigger."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this automation is run. When false, this automation is not run."
            },
            "timeZoneId": {
              "type": "string",
              "description": "The NodaTime time zone ID for the time zone that should apply to all date and time values defined in the trigger.",
              "examples": [
                "Australia/Melbourne",
                "Asia/Manila"
              ]
            },
            "timeZoneOffset": {
              "type": "string",
              "description": "The UTC time zone offset that should apply to all date and time values defined in the trigger.",
              "examples": [
                "+10:00",
                "+11:00"
              ]
            },
            "month": {
              "type": "object",
              "description": "The month settings for the periodic trigger.",
              "properties": {
                "list": {
                  "type": "array",
                  "description": "An alternative month denomination representing a list of specific months of each year during which the trigger should be invoked.",
                  "items": {
                    "$ref": "#calendarMonth",
                    "description": "A month of each year during which the trigger should be invoked."
                  },
                  "additionalItems": false
                },
                "range": {
                  "type": "object",
                  "description": "An alternative month denomination representing a range of months in each year during which the trigger should be invoked.",
                  "properties": {
                    "from": {
                      "$ref": "#calendarMonth",
                      "description": "The start value for the range."
                    },
                    "to": {
                      "$ref": "#calendarMonth",
                      "description": "The end value for the range."
                    }
                  },
                  "additionalProperties": false
                },
                "every": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 11,
                  "description": "An alternative month denomination, interpreted as 'every n months', e.g. to represent 'every three months', use the value 3.",
                  "examples": [
                    1,
                    3
                  ]
                }
              },
              "oneOf": [
                {
                  "required": [
                    "list"
                  ]
                },
                {
                  "required": [
                    "range"
                  ]
                },
                {
                  "required": [
                    "every"
                  ]
                }
              ],
              "additionalProperties": false
            },
            "day": {
              "type": "object",
              "description": "The day settings for the periodic trigger.",
              "properties": {
                "dayOfTheMonth": {
                  "type": "object",
                  "desription": "A denomination used to control which days of the month the trigger should be invoked.",
                  "properties": {
                    "list": {
                      "type": "array",
                      "description": "An alternative day of the month denomination representing a list of specific days of each month during which the trigger should be invoked.",
                      "items": {
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 31,
                        "description": "A day of each month during which the trigger should be invoked."
                      },
                      "additionalItems": false
                    },
                    "range": {
                      "type": "object",
                      "description": "An alternative day of the month denomination representing a range of days in each month during which the trigger should be invoked.",
                      "properties": {
                        "from": {
                          "type": "integer",
                          "minimum": 1,
                          "maximum": 30,
                          "description": "The start value for the range."
                        },
                        "to": {
                          "type": "integer",
                          "minimum": 2,
                          "maximum": 31,
                          "description": "The end value for the range."
                        }
                      },
                      "additionalProperties": false
                    },
                    "every": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 30,
                      "description": "An alternative day of the month denomination, interpreted as 'every n days', e.g. to represent 'every five days', use the value 5.",
                      "examples": [
                        1,
                        3
                      ]
                    }
                  },
                  "oneOf": [
                    {
                      "required": [
                        "list"
                      ]
                    },
                    {
                      "required": [
                        "range"
                      ]
                    },
                    {
                      "required": [
                        "every"
                      ]
                    }
                  ],
                  "additionalProperties": false
                },
                "dayOfTheWeek": {
                  "type": "object",
                  "desription": "A denomination used to control which days of the week the trigger should be invoked.",
                  "properties": {
                    "list": {
                      "type": "array",
                      "description": "An alternative day of the week denomination representing a list of specific days of the week during which the trigger should be invoked.",
                      "items": {
                        "$ref": "#dayOfTheWeek",
                        "description": "A day of the week during which the trigger should be invoked."
                      },
                      "additionalItems": false
                    },
                    "range": {
                      "type": "object",
                      "description": "An alternative day of the week denomination representing a range of days in each week during which the trigger should be invoked.",
                      "properties": {
                        "from": {
                          "$ref": "#dayOfTheWeek",
                          "description": "The start value for the range."
                        },
                        "to": {
                          "$ref": "#dayOfTheWeek",
                          "description": "The end value for the range."
                        }
                      },
                      "additionalProperties": false
                    }
                  },
                  "oneOf": [
                    {
                      "required": [
                        "list"
                      ]
                    },
                    {
                      "required": [
                        "range"
                      ]
                    }
                  ],
                  "additionalProperties": false
                },
                "dayOfTheWeekOccurrenceWithinMonth": {
                  "type": "object",
                  "description": "An alternative way to specify the dates on which the trigger should be invoked. If used, the dayOfTheMonth and dayOfTheWeek properties should not be used.",
                  "properties": {
                    "dayOfTheWeek": {
                      "$ref": "#dayOfTheWeek",
                      "description": "A day of the week during which the trigger should be invoked. E.g. for the third Tuesday of every month, enter 'Tuesday'."
                    },
                    "occurrence": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 5,
                      "description": "The number of the specified day of the week during which the trigger should be invoked. E.g. for the third Tuesday of every month, enter 3."
                    }
                  },
                  "required": [
                    "dayOfTheWeek",
                    "occurrence"
                  ],
                  "additionalProperties": true
                }
              },
              "anyOf": [
                {
                  "required": [
                    "dayOfTheMonth"
                  ]
                },
                {
                  "required": [
                    "dayOfTheWeek"
                  ]
                },
                {
                  "required": [
                    "dayOfTheWeekOccurrenceWithinMonth"
                  ]
                }
              ],
              "additionalProperties": false
            },
            "hour": {
              "type": "object",
              "description": "The hour settings for the periodic trigger.",
              "properties": {
                "list": {
                  "type": "array",
                  "description": "An alternative hour denomination representing a list of specific hours of each day during which the trigger should be invoked.",
                  "items": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 23,
                    "description": "An hour of each day during which the trigger should be invoked."
                  },
                  "additionalItems": false
                },
                "range": {
                  "type": "object",
                  "description": "An alternative hour denomination representing a range of hours during in each day which the trigger should be invoked.",
                  "properties": {
                    "from": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 22,
                      "description": "The start value for the range."
                    },
                    "to": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 23,
                      "description": "The end value for the range."
                    }
                  },
                  "additionalProperties": false
                },
                "every": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 23,
                  "description": "An alternative hour denomination, interpreted as 'every n hours', e.g. to represent 'every two hour', use the value 2.",
                  "examples": [
                    1,
                    3
                  ]
                }
              },
              "oneOf": [
                {
                  "required": [
                    "list"
                  ]
                },
                {
                  "required": [
                    "range"
                  ]
                },
                {
                  "required": [
                    "every"
                  ]
                }
              ],
              "additionalProperties": false
            },
            "minute": {
              "type": "object",
              "description": "The minute settings for the periodic trigger.",
              "properties": {
                "list": {
                  "type": "array",
                  "description": "An alternative minute denomination representing a list of specific minutes of each hour during which the trigger should be invoked.",
                  "items": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 59,
                    "description": "A minute of each hour during which the trigger should be invoked."
                  },
                  "additionalItems": false
                },
                "range": {
                  "type": "object",
                  "description": "An alternative minute denomination representing a range of minutes in each hour during which the trigger should be invoked.",
                  "properties": {
                    "from": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 58,
                      "description": "The start value for the range."
                    },
                    "to": {
                      "type": "integer",
                      "minimum": 1,
                      "maximum": 59,
                      "description": "The end value for the range."
                    }
                  },
                  "additionalProperties": false
                },
                "every": {
                  "type": "integer",
                  "minimum": 1,
                  "maximum": 59,
                  "description": "An alternative minute denomination, interpreted as 'every n minutes', e.g. to represent 'every ten minutes', use the value 10.",
                  "examples": [
                    5,
                    10
                  ]
                }
              },
              "oneOf": [
                {
                  "required": [
                    "list"
                  ]
                },
                {
                  "required": [
                    "range"
                  ]
                },
                {
                  "required": [
                    "every"
                  ]
                }
              ],
              "additionalProperties": false
            }
          },
          "required": [
            "name",
            "alias",
            "month",
            "day",
            "hour",
            "minute"
          ],
          "additionalProperties": false
        },
        "portalPageTrigger": {
          "$id": "#portalPageTrigger",
          "type": "object",
          "description": "A trigger that is invoked by clicking an action item or popover menu item in the portal.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the trigger."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the trigger."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the trigger."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this automation is run. When false, this automation is not run."
            },
            "pages": {
              "type": "array",
              "description": "A list of portal pages on which this trigger should be available.",
              "items": {
                "$ref": "#portalPage"
              },
              "additionalItems": false
            },
            "actionName": {
              "type": "string",
              "description": "If used, this string value will be used as the label on a popover menu item on the specified pages. It will also be used as the title and aria-label values for the action button if applicable.",
              "examples": [
                "Download Page Data"
              ]
            },
            "actionIcon": {
              "type": "string",
              "description": "The name of the icon. If used, the trigger will be represented as an action item on the specified pages.",
              "examples": [
                "play"
              ]
            },
            "actionIconLibrary": {
              "type": "string",
              "description": "The name of the icon library to use. Defaults to ionic.",
              "enum": [
                "ionic",
                "angular-material",
                "fontawesome"
              ]
            },
            "actionButtonLabel": {
              "type": "string",
              "description": "If used, this string value will be used as the label on an action button on the specified pages.",
              "examples": [
                "Download"
              ]
            },
            "actionButtonPrimary": {
              "type": "boolean",
              "description": "If used and set to true, the action button will be rendered as primary. Otherwise it will be rendered as a regular action button."
            },
            "includeInMenu": {
              "type": "boolean",
              "description": "If used and set to false, the action will not appear in the popover menu on the page in question. Otherwise it will be included.",
              "default": true
            },
            "spinnerAlertText": {
              "type": "string",
              "description": "If used, this text will be displayed on the progress spinner alert while the automation is being run. If omitted, the default text 'Automation is running, please wait...' will instead be displayed.",
              "examples": [
                "Sending welcome email, please wait..."
              ]
            },
            "successSnackbarText": {
              "$ref": "#text",
              "description": "Returns a text value that will be displayed on a snackbar in the portal if the automation completes successfully."
            },
            "downloadFile": {
              "$ref": "#file",
              "description": "Returns a file value that will be used to initialise a file download if the automation completes successfully."
            }
          },
          "required": [
            "name",
            "alias",
            "pages"
          ],
          "anyOf": [
            {
              "required": [
                "actionIcon"
              ]
            },
            {
              "required": [
                "actionName"
              ]
            },
            {
              "required": [
                "actionButtonLabel"
              ]
            },
            {
              "required": [
                "actionButtonPrimary"
              ]
            },
            {
              "required": [
                "includeInMenu"
              ]
            }
          ],
          "additionalProperties": false
        },
        "extensionPointTrigger": {
          "$id": "#extensionPointTrigger",
          "type": "object",
          "oneOf": [
            {
              "description": "A trigger that is invoked when a policy number is about to be assigned to a new policy. It returns a generated policy number that will be assigned to the policy instead of selecting one from the pool.",
              "properties": {
                "name": {
                  "$ref": "#name",
                  "description": "A name for the trigger."
                },
                "alias": {
                  "$ref": "#alias",
                  "description": "An alias for the trigger."
                },
                "description": {
                  "$ref": "#description",
                  "description": "An optional description for the trigger."
                },
                "runCondition": {
                  "$ref": "#condition",
                  "description": "An optional condition. When true, this automation is run. When false, this automation is not run."
                },
                "extensionPoint": {
                  "type": "string",
                  "description": "The extension point of this extension point trigger.",
                  "enum": [
                    "generatePolicyNumber"
                  ]
                },
                "policyNumber": {
                  "$ref": "#text",
                  "description": "The policy number that will be assigned to the new policy."
                }
              },
              "required": [
                "name",
                "alias",
                "extensionPoint",
                "policyNumber"
              ],
              "additionalProperties": false
            },
            {
              "description": "A trigger that is invoked when a calculation is about to be made. It returns dynamic rating factors that will be injected in corresponding tables within the workbook before the calculation is processed.",
              "properties": {
                "name": {
                  "$ref": "#name",
                  "description": "A name for the trigger."
                },
                "alias": {
                  "$ref": "#alias",
                  "description": "An alias for the trigger."
                },
                "description": {
                  "$ref": "#description",
                  "description": "An optional description for the trigger."
                },
                "runCondition": {
                  "$ref": "#condition",
                  "description": "An optional condition. When true, this automation is run. When false, this automation is not run."
                },
                "extensionPoint": {
                  "type": "string",
                  "description": "The extension point of this extension point trigger.",
                  "enum": [
                    "beforeQuoteCalculation"
                  ]
                },
                "returnInputData": {
                  "$ref": "#object",
                  "description": "The dynamic rating factors that should be injected in the workbook before the calculation. This object should contain one property per table that should have dynamic rating factors injected. Each property should contain a list with an item for each row in the table. Each item should be an object where each property is named after the column in the table where its value should be injected. Although the example uses a JSON string value to demonstrate the required structure, please note that the actual value should be an object provider and not a string with a JSON object definition. ",
                  "examples": [
                    "{\"tableOne\":[{\"columnOne\":\"value a\",\"columnTwo\":\"value b\"},{\"columnOne\":\"value n\",\"columnTwo\":\"value d\"}],\"tableTwo\":[{\"columnA\":\"value 1\",\"columnB\":\"value 2\"},{\"columnA\":\"value 3\",\"columnB\":\"value 4\"}]}"
                  ]
                }
              },
              "required": [
                "name",
                "alias",
                "extensionPoint"
              ],
              "additionalProperties": false
            },
            {
              "description": "A trigger that is invoked when a calculation is about to be made. It returns dynamic rating factors that will be injected in corresponding tables within the workbook after the calculation is processed.",
              "properties": {
                "name": {
                  "$ref": "#name",
                  "description": "A name for the trigger."
                },
                "alias": {
                  "$ref": "#alias",
                  "description": "An alias for the trigger."
                },
                "description": {
                  "$ref": "#description",
                  "description": "An optional description for the trigger."
                },
                "runCondition": {
                  "$ref": "#condition",
                  "description": "An optional condition. When true, this automation is run. When false, this automation is not run."
                },
                "extensionPoint": {
                  "type": "string",
                  "description": "The extension point of this extension point trigger.",
                  "enum": [
                    "afterQuoteCalculation"
                  ]
                },
                "returnInputData": {
                  "$ref": "#object",
                  "description": "The dynamic rating factors that should be injected in the workbook before the calculation. This object should contain one property per table that should have dynamic rating factors injected. Each property should contain a list with an item for each row in the table. Each item should be an object where each property is named after the column in the table where its value should be injected. Although the example uses a JSON string value to demonstrate the required structure, please note that the actual value should be an object provider and not a string with a JSON object definition. ",
                  "examples": [
                    "{\"tableOne\":[{\"columnOne\":\"value a\",\"columnTwo\":\"value b\"},{\"columnOne\":\"value n\",\"columnTwo\":\"value d\"}],\"tableTwo\":[{\"columnA\":\"value 1\",\"columnB\":\"value 2\"},{\"columnA\":\"value 3\",\"columnB\":\"value 4\"}]}"
                  ]
                },
                "returnCalculationResult": {
                  "$ref": "#object",
                  "description": "The dynamic rating factors that should be injected in the workbook before the calculation. This object should contain one property per table that should have dynamic rating factors injected. Each property should contain a list with an item for each row in the table. Each item should be an object where each property is named after the column in the table where its value should be injected. Although the example uses a JSON string value to demonstrate the required structure, please note that the actual value should be an object provider and not a string with a JSON object definition. ",
                  "examples": [
                    "{\"tableOne\":[{\"columnOne\":\"value a\",\"columnTwo\":\"value b\"},{\"columnOne\":\"value n\",\"columnTwo\":\"value d\"}],\"tableTwo\":[{\"columnA\":\"value 1\",\"columnB\":\"value 2\"},{\"columnA\":\"value 3\",\"columnB\":\"value 4\"}]}"
                  ]
                }
              },
              "required": [
                "name",
                "alias",
                "extensionPoint"
              ],
              "additionalProperties": false
            },
            {
              "description": "A trigger that is invoked when a quote is about to be opened in the webFormApp. It returns an object that will be exposed to the webFormApp when it is launched.",
              "properties": {
                "name": {
                  "$ref": "#name",
                  "description": "A name for the trigger."
                },
                "alias": {
                  "$ref": "#alias",
                  "description": "An alias for the trigger."
                },
                "description": {
                  "$ref": "#description",
                  "description": "An optional description for the trigger."
                },
                "runCondition": {
                  "$ref": "#condition",
                  "description": "An optional condition. When true, this automation is run. When false, this automation is not run."
                },
                "extensionPoint": {
                  "type": "string",
                  "description": "The extension point of this extension point trigger.",
                  "enum": [
                    "prepareQuoteFormInputData"
                  ]
                },
                "returnInputData": {
                  "$ref": "#object",
                  "description": "The data object that should be exposed to the webFormApp when it is launched.",
                  "examples": [
                    "{\"some\": \"value\"}"
                  ]
                }
              },
              "required": [
                "name",
                "alias",
                "extensionPoint",
                "returnInputData"
              ],
              "additionalProperties": false
            }
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "httpTrigger"
          ]
        },
        {
          "required": [
            "eventTrigger"
          ]
        },
        {
          "required": [
            "periodicTrigger"
          ]
        },
        {
          "required": [
            "portalPageTrigger"
          ]
        },
        {
          "required": [
            "extensionPointTrigger"
          ]
        }
      ],
      "additionalProperties": false
    },
    "action": {
      "$id": "#action",
      "type": "object",
      "description": "An action that can be taken.",
      "properties": {
        "httpRequestAction": {
          "$id": "#httpRequestAction",
          "type": "object",
          "description": "An action that makes a HTTP request to a public URL.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "httpRequest": {
              "$ref": "#httpRequest",
              "description": "A definition of the HTTP request that the action will result in."
            }
          },
          "required": [
            "name",
            "alias",
            "httpRequest"
          ],
          "additionalProperties": false
        },
        "sendEmailAction": {
          "$id": "#sendEmailAction",
          "type": "object",
          "description": "An action that results in the sending of an email.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "outboundEmailServerAlias": {
              "$ref": "#alias",
              "description": "If included, the custom outbound server will be used to send the email, otherwise the local host will be used."
            },
            "email": {
              "$ref": "#email",
              "description": "The email that will be sent."
            },
            "tags": {
              "type": "array",
              "description": "An optional array of tags that will be attached to the email.",
              "items": {
                "$ref": "#text",
                "description": "Each item in the array is a separate tag defined by a text provider."
              },
              "additionalItems": false
            },
            "relationships": {
              "type": "array",
              "description": "An optional array of relationships that will be created between the email and another entity.",
              "items": {
                "$ref": "#relationship",
                "description": "Each item in the array is a relationship that should be created for the email."
              },
              "additionalItems": false
            }
          },
          "required": [
            "name",
            "alias",
            "email"
          ],
          "additionalProperties": false
        },
        "sendSmsAction": {
          "$id": "#sendSmsAction",
          "type": "object",
          "description": "An action that results in the sending of an SMS.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "sms": {
              "$ref": "#sms",
              "description": "The SMS that will be sent."
            },
            "tags": {
              "type": "array",
              "description": "An optional array of tags that will be attached to the SMS.",
              "items": {
                "$ref": "#text",
                "description": "Each item in the array is a separate tag defined by a text provider."
              },
              "additionalItems": false
            },
            "relationships": {
              "type": "array",
              "description": "An optional array of relationships that will be created between the SMS and another entity.",
              "items": {
                "$ref": "#relationship",
                "description": "Each item in the array is a relationship that should be created for the SMS."
              },
              "additionalItems": false
            }
          },
          "required": [
            "name",
            "alias",
            "sms"
          ],
          "additionalProperties": false
        },
        "uploadFileAction": {
          "$id": "#uploadFileAction",
          "description": "An action that results in the uploading of a file.",
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "protocol": {
              "$ref": "#fileTransferProtocol",
              "description": "The file transfer protocol that should be used for uploading the file."
            },
            "hostname": {
              "$ref": "#text",
              "description": "The name of the remote host that the file should be uploaded to. An IP address can be used in place of a hostname."
            },
            "port": {
              "$ref": "#integer",
              "description": "The port number that should be used when connecting to the remote host. If omitted, the default port associated with the specified protocol will be used."
            },
            "username": {
              "$ref": "#text",
              "description": "The username that should be used when logging in to the remote host."
            },
            "password": {
              "$ref": "#text",
              "description": "The password that should be used when logging in to the remote host. If omitted, both private and public keys must be used."
            },
            "privateKey": {
              "$ref": "#text",
              "description": "The private key that should be used when logging in to the remote host. If omitted, password must be used."
            },
            "privateKeyPassword": {
              "$ref": "#text",
              "description": "The password that should be used to decrypt the private key. If omitted, password must be used."
            },
            "file": {
              "$ref": "#file",
              "description": "The file that will be uploaded."
            },
            "remotePath": {
              "$ref": "#text",
              "description": "The remote path where the file should be uploaded to. If omitted, the file will be uploaded to the directory where the user is logged into.",
              "examples": [
                "./uploads/exports"
              ]
            },
            "createMissingFolders": {
              "$ref": "#condition",
              "description": "If true, and the location identified by the remote path does not exist, attempt to create the missing folders. If omitted, or if false, and the path does not exist, and error will be raised.",
              "default": false
            },
            "overwriteExistingFile": {
              "$ref": "#condition",
              "description": "If true, and there is already a file with the same filename at the remote target location, then that file will be overwritten. If omitted, or if false, then if there is such a file present, an error will be raised.",
              "default": false
            }
          },
          "oneOf": [
            {
              "required": [
                "name",
                "alias",
                "protocol",
                "hostname",
                "file",
                "username",
                "privateKey",
                "privateKeyPassword"
              ]
            },
            {
              "required": [
                "name",
                "alias",
                "protocol",
                "hostname",
                "file",
                "username",
                "password"
              ]
            }
          ],
          "additionalProperties": false
        },
        "raiseEventAction": {
          "$id": "#raiseEventAction",
          "type": "object",
          "description": "An action that results in a new custom event being raised.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "customEventAlias": {
              "$ref": "#text",
              "description": "The alias of a custom event. Must be used if the value of the eventType property is 'custom'."
            },
            "eventData": {
              "$ref": "#object",
              "description": "The data object that will be passed to the event so that it's accessible to future automations which may be listening. If not passed, everything available to this automation is available in the resulting automations also."
            },
            "eventPersistanceDuration": {
              "$ref": "#duration",
              "description": "The duration for which this event will be persisted before it is purged, defined by a duration provider. If omitted, the event will not be persisted."
            },
            "tags": {
              "type": "array",
              "description": "An optional array of tags that will be attached to the event. These are indexed so that they can be used for querying or counting events retrospectively.",
              "items": {
                "$ref": "#text",
                "description": "Each item in the array is a separate tag defined by a text provider."
              },
              "additionalItems": false
            },
            "eventTags": {
              "type": "array",
              "description": "Obsolete, please use `tags` instead.",
              "items": {
                "$ref": "#tag"
              },
              "additionalItems": false
            },
            "relationships": {
              "type": "array",
              "description": "An optional array of tags that will be attached to the event. These are indexed so that they can be used for querying or counting events retrospectively.",
              "items": {
                "$ref": "#text",
                "description": "Each item in the array is a separate tag defined by a text provider."
              },
              "additionalItems": false
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "alias",
            "customEventAlias"
          ]
        },
        "raiseErrorAction": {
          "$id": "#raiseErrorAction",
          "type": "object",
          "description": "An action that results in a new error being raised.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "error": {
              "$ref": "#error",
              "description": "The error that will be raised if the condition is true."
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "alias",
            "error"
          ]
        },
        "setAdditionalPropertyValueAction": {
          "$id": "#setAdditionalPropertyValueAction",
          "type": "object",
          "description": "An action that sets the value of an additional property on an entity.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "entity": {
              "$ref": "#entity",
              "description": "The entity that the additional property value should be set on."
            },
            "propertyAlias": {
              "$ref": "#text",
              "description": "The alias of the additional property that should have its value set."
            },
            "value": {
              "$ref": "#text",
              "description": "The value that should be set on the additional property."
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "alias",
            "entity",
            "propertyAlias",
            "value"
          ]
        },
        "incrementAdditionalPropertyValueAction": {
          "$id": "#incrementAdditionalPropertyValueAction",
          "type": "object",
          "description": "An action that increments the value of an additional property on an entity. It will fail if the value is not parsable as an integer value.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "entity": {
              "$ref": "#entity",
              "description": "The entity that the additional property value should be set on."
            },
            "propertyAlias": {
              "$ref": "#text",
              "description": "The alias of the additional property that should have its value set."
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "alias",
            "entity",
            "propertyAlias"
          ]
        },
        "setVariableAction": {
          "$id": "#setVariableAction",
          "type": "object",
          "description": "An action that sets the value of a variable.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "path": {
              "$ref": "#staticJsonPointer",
              "description": "An optional location within the variables context where the property value(s) should be set. If not used, the property value(s) will be set in the root of the variable context."
            },
            "propertyName": {
              "$ref": "#text",
              "description": "The name of the property whose value will be set, in the specified location within the variables context. Used if a single property value is set."
            },
            "value": {
              "$ref": "#value",
              "description": "The value that will be set on the property, in the specified location within the variables context. Used if a single property value is set."
            },
            "properties": {
              "$ref": "#object",
              "description": "An object that contains a number of properties that will have their values set in the specified location within the variables context. Used if multiple property values are set."
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "alias"
          ],
          "oneOf": [
            {
              "required": [
                "propertyName",
                "value"
              ]
            },
            {
              "required": [
                "properties"
              ]
            }
          ]
        },
        "groupAction": {
          "$id": "#groupAction",
          "type": "object",
          "description": "A collection of actions to be run.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "actions": {
              "type": "array",
              "description": "The list of actions that belong to this group.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "parallel": {
              "type": "boolean",
              "description": "If true, the actions in this group will be run in parallel. Default value is false. Note: If true, then the \"asynchronous\" property of each of the actions will be ignored, and they will each be set to run asynchronously, then wait for all other actions in this groupAction to complete.",
              "default": false
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "alias",
            "actions"
          ]
        },
        "iterateAction": {
          "$id": "#iterateAction",
          "type": "object",
          "description": "An action that iterates over a list of items, running a list of actions for each item.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "list": {
              "$ref": "#list",
              "description": "The list of items that the iterate action will iterate over."
            },
            "startIndex": {
              "$ref": "#integer",
              "description": "The start index of the iteration. Can be used to start iterating the list starting at an item other than that first item. Indexes are zero based, so the first item in the list would be item 0. If value of startIndex is equal to or greater than the number of items in the list, then no items will be processed and no errors will be raised. If you would like an error to be raised if the list does not have the number of items expected, create a beforeRunErrorCondition."
            },
            "endIndex": {
              "$ref": "#integer",
              "description": "The end index of the iteration. Can be used to stop iterating the list after it reaches a specific value. Indexes are zero based, so the index of the last item of a list with 10 items would be 9. By entering an endIndex of 9, it would process all 10 items in the list. If the value of endIndex is equal to or greater than the number of items in the list, no error will be raised.  If you would like an error to be raised if the list does not have the number of items expected, create a beforeRunErrorCondition."
            },
            "reverse": {
              "$ref": "#condition",
              "description": "If used, and resolves to true, then the iteration will be performed in reverse order, otherwise in normal order."
            },
            "doWhileCondition": {
              "$ref": "#condition",
              "description": "An optional condition which is evaluated before each iteration. When true, this iteration proceeds. When false, the iteration stops and no further items are iterated."
            },
            "actions": {
              "type": "array",
              "description": "The list of actions that belong to this group.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "alias",
            "list",
            "actions"
          ]
        },
        "runAutomationAction": {
          "$id": "#runAutomationAction",
          "type": "object",
          "description": "An action that results in running another automation, referenced by alias, with an optional custom data object. By using the runAutomation action, the subsequent automations automationData will be available to be accessed via this action's entry in this automation's automationData.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "automationAlias": {
              "$ref": "#text",
              "description": "The alias of the automation that will be run."
            },
            "triggerDataObject": {
              "$ref": "#object",
              "description": "The data object that will become the 'trigger' property in the automation data accessible to the automation. The alias of this automation will be set as the value of the triggerAlias property of the triggerDataObject automatically."
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "alias",
            "automationAlias"
          ]
        },
        "attachFilesToEntityAction": {
          "$id": "#attachFilesToEntityAction",
          "type": "object",
          "description": "An action that results in one or more files being attached to an entity.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "entity": {
              "$ref": "#entity",
              "description": "A reference to the entity that the files should be attached to."
            },
            "attachments": {
              "type": "array",
              "description": "A list of file attachments.",
              "items": {
                "$ref": "#fileAttachment"
              },
              "additionalItems": false
            }
          },
          "required": [
            "name",
            "alias",
            "entity",
            "attachments"
          ],
          "additionalProperties": false
        },
        "attachFilesToEntitiesAction": {
          "$id": "#attachFilesToEntitiesAction",
          "type": "object",
          "description": "An action that results in one or more files being attached to one or more entities.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "entities": {
              "type": "array",
              "description": "A list of references to entities that the files should be attached to.",
              "items": {
                "$ref": "#entity"
              },
              "additionalItems": false
            },
            "attachments": {
              "type": "array",
              "description": "A list of file attachments.",
              "items": {
                "$ref": "#fileAttachment"
              },
              "additionalItems": false
            }
          },
          "required": [
            "name",
            "alias",
            "entities",
            "attachments"
          ],
          "additionalProperties": false
        },
        "performQuoteCalculationAction": {
          "$id": "#performQuoteCalculationAction",
          "type": "object",
          "description": "Performs a calculation for a quote.",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "quote": {
              "$ref": "#quote",
              "description": "A reference to a the quote that the quote calculation should be preformed in relation to."
            },
            "policy": {
              "$ref": "#policy",
              "description": "A reference to a the policy that the quote calculation should be preformed in relation to."
            },
            "product": {
              "$ref": "#product",
              "description": "A reference to a the product that the quote calculation should be preformed in relation to."
            },
            "environment": {
              "$ref": "#text",
              "description": "The environment that the quote calculation should be preformed in relation to."
            },
            "policyTransactionType": {
              "$ref": "#policyTransactionType",
              "description": "The policy transaction type that the quote calculation should be preformed in relation to."
            },
            "inputData": {
              "$ref": "#object",
              "description": "An object containing the input data for the quote calculation."
            },
            "paymentData": {
              "$ref": "#object",
              "description": "An object containing the payment data for the quote calculation, so that if any payment or merchant fees are applicable, they can be included in the results."
            },
            "persistResults": {
              "$ref": "#condition",
              "description": "If used and resolved to true, the calculation results will be persisted, otherwise not."
            },
            "calculationResultVersion": {
              "$ref": "#integer",
              "description": "Allows you to specify the version of the calculation result model that the action should generate. If omitted in the future, the latest version will be used. For now it is required to ensure backward compatibility for any products created using the current (legacy) calculation result version. Please use with the value 1 for now."
            }
          },
          "required": [
            "name",
            "alias",
            "inputData",
            "calculationResultVersion"
          ],
          "additionalProperties": false
        },
        "approveQuoteAction": {
          "$id": "#approveQuoteAction",
          "description": "An action that approves a quote.",
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "quote": {
              "$ref": "#quote",
              "description": "A reference to quote entity."
            }
          },
          "required": [
            "name",
            "alias",
            "quote"
          ],
          "additionalProperties": false
        },
        "returnQuoteAction": {
          "$id": "#returnQuoteAction",
          "description": "An action that returns a quote, changing its state back to 'incomplete'.",
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "quote": {
              "$ref": "#quote",
              "description": "A reference to quote entity."
            }
          },
          "required": [
            "name",
            "alias",
            "quote"
          ],
          "additionalProperties": false
        },
        "declineQuoteAction": {
          "$id": "#declineQuoteAction",
          "description": "An action that declines a quote.",
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "quote": {
              "$ref": "#quote",
              "description": "A reference to quote entity."
            }
          },
          "required": [
            "name",
            "alias",
            "quote"
          ],
          "additionalProperties": false
        },
        "issuePolicyAction": {
          "$id": "#issuePolicyAction",
          "description": "An action that issues a policy for a quote.",
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "quote": {
              "$ref": "#quote",
              "description": "A reference to quote entity."
            },
            "customer": {
              "$ref": "#customer",
              "description": "Can optionally be used to specify a customer to associated with the new policy if a quote has not been specified, or if a quote has been specified that is not associated with a customer. If omitted and a quote has been specified that is associated with a customer, then the new policy will be associated with the same customer as the quote. If omitted and a quote has not been specified, or a quote has been specified that is not associated with a customer, then the new policy will not be associated with a customer."
            },
            "organisation": {
              "$ref": "#organisation",
              "description": "Can optionally be used to specify the organisation that the policy should be associated with if no quote or customer has been specified. If omitted and a quote or customer has been specified, then the policy will be associated with the same organisation as that quote or customer. If omitted and no quote or customer has been specified, then the policy will either be associated with the organisation in the automation context if available, or otherwise the default organisation in the tenancy."
            },
            "product": {
              "$ref": "#product",
              "description": "Can optionally be used to specify the product that the policy should be issued for if a quote has not been specified. If omitted and a quote has been specified, then the policy will be issued for the product associated with the quote. If omitted and a quote has not been specified, then the policy will be issued for the product in the automation context."
            },
            "environment": {
              "$ref": "#text",
              "description": "Can optionally be used to specify the environment for the new policy if a quote has not been specified. If omitted and a quote has been specified, then the policy will be associated with the same environment as the quote. If omitted and a quote has not been specified, then the policy will be associated with the environment in the automation context."
            },
            "inputData": {
              "$ref": "#object",
              "description": "An optional object containing input data that should be used to populate the question answers for the new policy. If specified and a quote reference is not provided, then the input data will be used to perform a quote calculation independently of a quote, and both the input data and the calculation results will then be associated with the new business policy transaction for the new policy. If used and a quote is also specified, then the input data will be added to the quote first, before performing a quote calculation for the quote. The quote will be auto-approved and then bound, resulting in a new business policy transaction being created and a policy issued. In all these scenarios, if the calculation results in a calculation state other than binding quote, or if any triggers are active, then this is an error condition and a policy will not be issued. The input data property is required if a quote has not been specified."
            },
            "additionalProperties": {
              "$ref": "#additionalProperties",
              "description": "An object with a property for each additional property value set on the new policy. If used, each property in this object must match the alias of an additional property defined on the policy entity in the applicable context."
            },
            "testData": {
              "$ref": "#condition",
              "description": "Can optionally be used to specify whether the new policy should be labelled as test data if a quote has not been specified. If omitted and a quote has been specified, then the policy will use the same test data label value as the quote. If omitted and a quote has not been specified, then the policy will not be labelled as test data."
            },
            "policyNumber": {
              "$ref": "#text",
              "description": "Can optionally be used to specify a custom policy number to be associated with the new policy."
            }
          },
          "anyOf": [
            {
              "required": [
                "name",
                "alias",
                "quote"
              ]
            },
            {
              "required": [
                "name",
                "alias",
                "inputData"
              ]
            }
          ],
          "additionalProperties": false
        },
        "renewPolicyAction": {
          "$id": "#renewPolicyAction",
          "description": "An action that renews a policy for a quote.",
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "logLevel": {
              "$ref": "#logLevel",
              "description": "The log-level that will be used for this action. If not specified, the log-level is inherited from the the parent element."
            },
            "quote": {
              "$ref": "#quote",
              "description": "A reference to quote entity."
            },
            "policy": {
              "$ref": "#policy",
              "description": "A reference to policy entity. If used and an inputData is not provided then the formData to be used will be from the last transaction (newBusiness, adjustment, or previous renewal transaction - whichever contained the rating factors that applied at the end of the previous term)."
            },
            "inputData": {
              "$ref": "#object",
              "description": "An optional object containing input data that should be used to populate the question answers for the renewal of the policy. The quote will be auto-approved and then bound, resulting in a renewal policy transaction being created. In all these scenarios, if the calculation results in a calculation state other than binding quote, or if any triggers are active, then this is an error condition and a policy will not be issued."
            }
          },
          "anyOf": [
            {
              "required": [
                "name",
                "alias",
                "quote"
              ]
            },
            {
              "required": [
                "name",
                "alias",
                "quote",
                "policy"
              ]
            },
            {
              "required": [
                "name",
                "alias",
                "inputData",
                "quote"
              ]
            },
            {
              "required": [
                "name",
                "alias",
                "inputData",
                "policy"
              ]
            },
            {
              "required": [
                "name",
                "alias",
                "inputData",
                "quote",
                "policy"
              ]
            }
          ],
          "additionalProperties": false
        },
        "createOrganisationAction": {
          "$id": "#createOrganisationAction",
          "description": "An action that creates a new organisation.",
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "managingOrganisation": {
              "$ref": "#organisation",
              "description": "A reference to the organisation that will be managing this organisation."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "organisationName": {
              "$ref": "#text",
              "description": "The name for the new organisation.",
              "examples": [
                "ABC Insurance"
              ]
            },
            "organisationAlias": {
              "$ref": "#text",
              "description": "The alias for the new organisation. Must be unique within the tenancy.",
              "examples": [
                "abc-insurance"
              ]
            },
            "additionalProperties": {
              "$ref": "#additionalProperties",
              "description": "An object with a property for each additional property value set on this person."
            }
          },
          "additionalProperties": false,
          "required": [
            "name",
            "alias",
            "organisationName",
            "organisationAlias"
          ]
        },
        "createUserAction": {
          "$id": "#createUserAction",
          "description": "An action that creates a new user.",
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "accountEmail": {
              "$ref": "#emailAddress",
              "description": "The account email address for the new user."
            },
            "organisation": {
              "$ref": "#organisation",
              "description": "A reference to the organisation that the new user should be associated with."
            },
            "portal": {
              "$ref": "#portal",
              "description": "A reference to the portal that the new user should be associated with."
            },
            "person": {
              "$ref": "#personConstructor",
              "description": "The person entity that will be associated with the new user."
            },
            "additionalProperties": {
              "$ref": "#additionalProperties",
              "description": "An object with a property for each additional property value set on this person."
            },
            "initialRoles": {
              "type": "array",
              "description": "An optional list of user roles that should be assigned to the user when first created. If used, each item must be the alias of an applicable user role.",
              "items": {
                "$ref": "#text",
                "description": "The alias of a user role that should be assigned to the user when created."
              },
              "additionalItems": false
            }
          },
          "required": [
            "name",
            "alias",
            "accountEmail",
            "organisation",
            "person"
          ],
          "additionalProperties": false
        },
        "createQuoteAction": {
          "$id": "#createQuoteAction",
          "description": "An action that creates quote.",
          "type": "object",
          "properties": {
            "name": {
              "$ref": "#name",
              "description": "A name for the action."
            },
            "alias": {
              "$ref": "#alias",
              "description": "An alias for the action."
            },
            "description": {
              "$ref": "#description",
              "description": "An optional description for the action."
            },
            "asynchronous": {
              "type": "boolean",
              "description": "If true, this action will be run asynchronously. Default value is false.",
              "default": false
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "An optional condition. When true, this action is run. When false, this action is not run."
            },
            "beforeRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined, and this action will not be run.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "afterRunErrorConditions": {
              "type": "array",
              "description": "An optional list of error conditions that are evaluated in order. If any evaluate to true, an error is raised as defined.",
              "items": {
                "$ref": "#errorCondition"
              },
              "additionalItems": false
            },
            "onErrorActions": {
              "type": "array",
              "description": "An optional list of actions to be run only if this action fails to complete successfully.",
              "items": {
                "$ref": "#action"
              },
              "additionalItems": false
            },
            "policyTransactionType": {
              "$ref": "#policyTransactionType",
              "description": "Can be used to specify the policy transaction type for the new quote. If omitted, a new business quote will be created."
            },
            "policy": {
              "$ref": "#policy",
              "description": "A reference to the policy that the new quote should be created in relation to. Required when creating a renewal, adjustment or cancellation quote. Cannot be used for a newBusiness quote."
            },
            "organisation": {
              "$ref": "#organisation",
              "description": "Can be used to specify the organisation that a newBusiness quote should be created for if no customer is specified. Cannot be used for a renewal, adjustment or cancellation quote. If omitted, newBusiness quotes will be associated with the same organisation as the specified customer. If no customer is specified then the quote will instead be associated with the organisation in the automation context. Renewal, adjustment or cancellation quotes will always be associated with the organisation associated with the specified policy."
            },
            "product": {
              "$ref": "#product",
              "description": "Can optionally be used to specify the product that a newBusiness quote should be created for. Cannot be used for a renewal, adjustment or cancellation quote. If omitted, newBusiness quotes will be created for the product in the automation context. Renewal, adjustment or cancellation quotes will always be created for the product associated with the specified policy."
            },
            "environment": {
              "$ref": "#text",
              "description": "Can optionally be used to specify the environment for a newBusiness quote. Cannot be used for a renewal, adjustment or cancellation quote. If omitted, newBusiness quotes will be created for the production environment. Renewal, adjustment or cancellation quotes will always be created for the environment associated with the specified policy."
            },
            "formData": {
              "type": "object",
              "description": "An optional object containing form data that should be used to seed the new quote. If omitted, newBusiness quotes will be created without any formData, while renewal, adjustment or cancellation quotes will be created with a copy of the formData from the most recent policy transaction from the specified policy."
            },
            "customer": {
              "$ref": "#customer",
              "description": "Can optionally be used to specify a customer when creating a newBusiness quote. If omitted for a newBusiness quote, the new quote will not be associated with a customer. Renewal, adjustment or cancellation quotes will be created for the same customer (or lack thereof) as the specified policy."
            },
            "initialQuoteState": {
              "$ref": "#text",
              "description": "The initial state that the quote should be in once created. Must be a state that is permitted based on the state machine settings for the product. If omitted, the default initial state for all quote types is nascent.",
              "examples": [
                "nascent",
                "incomplete",
                "review"
              ],
              "default": "nascent"
            },
            "additionalProperties": {
              "$ref": "#additionalProperties",
              "description": "An object with a property for each additional property value set on the new quote. If used, each property in this object must match the alias of an additional property defined on the quote entity in the applicable context."
            },
            "testData": {
              "type": "object",
              "description": "Can optionally be used to specify whether a newBusiness quote should be labelled as test data. If omitted for a newBusiness quote, the new quote will not be labelled as test data. Renewal, adjustment or cancellation quotes will be created for the same testData label value as the specified policy."
            }
          },
          "anyOf": [
            {
              "required": [
                "name",
                "alias"
              ]
            }
          ],
          "additionalProperties": false
        }
      },
      "oneOf": [
        {
          "required": [
            "httpRequestAction"
          ]
        },
        {
          "required": [
            "sendEmailAction"
          ]
        },
        {
          "required": [
            "sendSmsAction"
          ]
        },
        {
          "required": [
            "uploadFileAction"
          ]
        },
        {
          "required": [
            "raiseEventAction"
          ]
        },
        {
          "required": [
            "raiseErrorAction"
          ]
        },
        {
          "required": [
            "setAdditionalPropertyValueAction"
          ]
        },
        {
          "required": [
            "incrementAdditionalPropertyValueAction"
          ]
        },
        {
          "required": [
            "setVariableAction"
          ]
        },
        {
          "required": [
            "groupAction"
          ]
        },
        {
          "required": [
            "iterateAction"
          ]
        },
        {
          "required": [
            "runAutomationAction"
          ]
        },
        {
          "required": [
            "attachFilesToEntityAction"
          ]
        },
        {
          "required": [
            "attachFilesToEntitiesAction"
          ]
        },
        {
          "required": [
            "performQuoteCalculationAction"
          ]
        },
        {
          "required": [
            "issuePolicyAction"
          ]
        },
        {
          "required": [
            "renewPolicyAction"
          ]
        },
        {
          "required": [
            "createSomethingAction"
          ]
        },
        {
          "required": [
            "approveQuoteAction"
          ]
        },
        {
          "required": [
            "returnQuoteAction"
          ]
        },
        {
          "required": [
            "declineQuoteAction"
          ]
        },
        {
          "required": [
            "createOrganisationAction"
          ]
        },
        {
          "required": [
            "createUserAction"
          ]
        },
        {
          "required": [
            "createQuoteAction"
          ]
        }
      ],
      "additionalProperties": false
    },
    "entity": {
      "$id": "#entity",
      "type": "object",
      "description": "An entity in the uBind system.",
      "properties": {
        "quote": {
          "$id": "#quote",
          "description": "A reference to a quote object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The quote ID of the quote. Can be used independently to identify the quote."
            },
            {
              "type": "object",
              "properties": {
                "quoteId": {
                  "$ref": "#text",
                  "description": "The quote ID of the quote. Can be used independently to identify the quote."
                },
                "quoteReference": {
                  "$ref": "#text",
                  "description": "The quote reference of the quote. Must be used together with an environment (defined in the automation context, or passed as a separate property) to identify the quote."
                },
                "environment": {
                  "$ref": "#text",
                  "description": "The environment of the quote. Required to identify the quote using a quote reference if the environment is not defined in the automation context."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "quoteId"
                  ]
                },
                {
                  "required": [
                    "quoteReference"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "quoteVersion": {
          "$id": "#quoteVersion",
          "description": "A reference to a quote version object.",
          "type": "object",
          "properties": {
            "quoteVersionId": {
              "$ref": "#text",
              "description": "The quote version ID of the quote version."
            },
            "quoteId": {
              "$ref": "#text",
              "description": "The quote ID of the quote."
            },
            "quoteReference": {
              "$ref": "#text",
              "description": "The quote reference of the quote. Must be used together with an environment (defined in the automation context, or passed as a separate property) to identify the quote."
            },
            "environment": {
              "$ref": "#text",
              "description": "The environment of the quote. Required to identify the quote version using a quote reference if the environment is not defined in the automation context."
            },
            "versionNumber": {
              "$ref": "#integer",
              "description": "The version number of the quote version."
            }
          },
          "oneOf": [
            {
              "required": [
                "quoteVersionId"
              ]
            },
            {
              "required": [
                "quoteId",
                "versionNumber"
              ]
            },
            {
              "required": [
                "quoteReference",
                "versionNumber"
              ]
            }
          ],
          "additionalProperties": false
        },
        "policy": {
          "$id": "#policy",
          "description": "A reference to a policy object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The policy ID of the policy. Can be used independently to identify the policy."
            },
            {
              "type": "object",
              "properties": {
                "policyId": {
                  "$ref": "#text",
                  "description": "The policy ID of the policy. Can be used independently to identify the policy."
                },
                "policyNumber": {
                  "$ref": "#text",
                  "description": "The policy number of the policy. Must be used together with an environment (defined in the automation context, or passed as a separate property) to identify the policy."
                },
                "environment": {
                  "$ref": "#text",
                  "description": "The environment of the policy. Required to identify the policy using a policy number if the environment is not defined in the automation context."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "policyId"
                  ]
                },
                {
                  "required": [
                    "policyNumber"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "policyTransaction": {
          "$id": "#policyTransaction",
          "description": "A reference to a policy transaction object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The policy transaction ID of the policy transaction. Can be used independently to identify the policy transaction."
            },
            {
              "type": "object",
              "properties": {
                "policyTransactionId": {
                  "$ref": "#text",
                  "description": "The policy transaction ID of the policy transaction. Can be used independently to identify the policy transaction."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "policyTransactionId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "claim": {
          "$id": "#claim",
          "description": "A reference to a claim object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The claim ID of the claim. Can be used independently to identify the claim."
            },
            {
              "type": "object",
              "properties": {
                "claimId": {
                  "$ref": "#text",
                  "description": "The claim ID of the claim. Can be used independently to identify the claim."
                },
                "claimReference": {
                  "$ref": "#text",
                  "description": "The claim reference of the claim. Must be used together with an environment (defined in the automation context, or passed as a separate property) to identify the claim."
                },
                "claimNumber": {
                  "$ref": "#text",
                  "description": "The claim number of the claim. Must be used together with an environment (defined in the automation context, or passed as a separate property) to identify the claim."
                },
                "environment": {
                  "$ref": "#text",
                  "description": "The environment of the claim. Required to identify the claim using a claim number or claim reference if the environment is not defined in the automation context."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "claimId"
                  ]
                },
                {
                  "required": [
                    "claimReference"
                  ]
                },
                {
                  "required": [
                    "claimNumber"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "claimVersion": {
          "$id": "#claimVersion",
          "description": "A reference to a claim version object.",
          "type": "object",
          "properties": {
            "claimVersionId": {
              "$ref": "#text",
              "description": "The claim version ID of the claim version."
            },
            "claimId": {
              "$ref": "#text",
              "description": "The claim ID of the claim."
            },
            "claimReference": {
              "$ref": "#text",
              "description": "The claim reference of the claim. Must be used together with an environment (defined in the automation context, or passed as a separate property) to identify the claim."
            },
            "claimNumber": {
              "$ref": "#text",
              "description": "The claim number of the claim. Must be used together with an environment (defined in the automation context, or passed as a separate property) to identify the claim."
            },
            "environment": {
              "$ref": "#text",
              "description": "The environment of the claim. Required to identify the claim version using a claim reference if the environment is not defined in the automation context."
            },
            "versionNumber": {
              "$ref": "#integer",
              "description": "The version number of the claim version."
            }
          },
          "oneOf": [
            {
              "required": [
                "claimVersionId"
              ]
            },
            {
              "required": [
                "claimId",
                "versionNumber"
              ]
            },
            {
              "required": [
                "claimReference",
                "versionNumber"
              ]
            },
            {
              "required": [
                "claimNumber",
                "versionNumber"
              ]
            }
          ],
          "additionalProperties": false
        },
        "invoice": {
          "$id": "#invoice",
          "description": "A reference to an invoice object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The invoice ID of the invoice. Can be used independently to identify the invoice."
            },
            {
              "type": "object",
              "properties": {
                "invoiceId": {
                  "$ref": "#text",
                  "description": "The invoice ID of the invoice. Can be used independently to identify the invoice."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "invoiceId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "creditNote": {
          "$id": "#creditNote",
          "description": "A reference to a credit note object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The credit note ID of the credit note. Can be used independently to identify the credit note."
            },
            {
              "type": "object",
              "properties": {
                "creditNoteId": {
                  "$ref": "#text",
                  "description": "The credit note ID of the credit note. Can be used independently to identify the credit note."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "creditNoteId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "payment": {
          "$id": "#payment",
          "description": "A reference to a payment object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The payment ID of the payment. Can be used independently to identify the payment."
            },
            {
              "type": "object",
              "properties": {
                "paymentId": {
                  "$ref": "#text",
                  "description": "The payment ID of the payment. Can be used independently to identify the payment."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "paymentId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "refund": {
          "$id": "#refund",
          "description": "A reference to a refund object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The refund ID of the refund. Can be used independently to identify the refund."
            },
            {
              "type": "object",
              "properties": {
                "refundId": {
                  "$ref": "#text",
                  "description": "The refund ID of the refund. Can be used independently to identify the refund."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "refundId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "customer": {
          "$id": "#customer",
          "description": "A reference to a customer object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The customer ID of the customer. Can be used independently to identify the customer."
            },
            {
              "type": "object",
              "properties": {
                "customerId": {
                  "$ref": "#text",
                  "description": "The customer ID of the customer. Can be used independently to identify the customer."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "customerId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "person": {
          "$id": "#person",
          "description": "A reference to a person object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The person ID of the person. Can be used independently to identify the person."
            },
            {
              "type": "object",
              "properties": {
                "personId": {
                  "$ref": "#text",
                  "description": "The person ID of the person. Can be used independently to identify the person."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "personId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "commercialEntity": {
          "$id": "#commercialEntity",
          "description": "A reference to a commercial entity object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The commercial entity ID of the commercial entity. Can be used independently to identify the commercial entity."
            },
            {
              "type": "object",
              "properties": {
                "commercialEntityId": {
                  "$ref": "#text",
                  "description": "The commercial entity ID of the commercial entity. Can be used independently to identify the commercial entity."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "commercialEntityId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "tenant": {
          "$id": "#tenant",
          "description": "A reference to a tenant object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The tenant ID of the tenant. Can be used independently to identify the tenant."
            },
            {
              "type": "object",
              "properties": {
                "tenantId": {
                  "$ref": "#text",
                  "description": "The tenant ID of the tenant. Can be used independently to identify the tenant."
                },
                "tenantAlias": {
                  "$ref": "#text",
                  "description": "The tenant alias of the tenant. Can be used independently to identify the tenant."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "tenantId"
                  ]
                },
                {
                  "required": [
                    "tenantAlias"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "product": {
          "$id": "#product",
          "description": "A reference to a product object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The product ID of the product. Can be used independently to identify the product."
            },
            {
              "type": "object",
              "properties": {
                "productId": {
                  "$ref": "#text",
                  "description": "The product ID of the product. Can be used independently to identify the product."
                },
                "productAlias": {
                  "$ref": "#text",
                  "description": "The product alias of the product. Can be used independently to identify the product."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "productId"
                  ]
                },
                {
                  "required": [
                    "productAlias"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "portal": {
          "$id": "#portal",
          "description": "A reference to a portal object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The portal ID of the portal. Can be used independently to identify the portal."
            },
            {
              "type": "object",
              "properties": {
                "portalId": {
                  "$ref": "#text",
                  "description": "The portal ID of the portal. Can be used independently to identify the portal."
                },
                "portalAlias": {
                  "$ref": "#text",
                  "description": "The portal alias of the portal. Can be used independently to identify the portal."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "portalId"
                  ]
                },
                {
                  "required": [
                    "portalAlias"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "organisation": {
          "$id": "#organisation",
          "description": "A reference to a organisation object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The organisation ID of the organisation. Can be used independently to identify the organisation."
            },
            {
              "type": "object",
              "properties": {
                "organisationId": {
                  "$ref": "#text",
                  "description": "The organisation ID of the organisation. Can be used independently to identify the organisation."
                },
                "organisationAlias": {
                  "$ref": "#text",
                  "description": "The organisation alias of the organisation. Can be used independently to identify the organisation."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "organisationId"
                  ]
                },
                {
                  "required": [
                    "organisationAlias"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "user": {
          "$id": "#user",
          "description": "A reference to a user object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The user ID of the user. Can be used independently to identify the user."
            },
            {
              "type": "object",
              "properties": {
                "userId": {
                  "$ref": "#text",
                  "description": "The user ID of the user. Can be used independently to identify the user."
                },
                "userAccountEmail": {
                  "$ref": "#text",
                  "description": "The primary email of the user. Can be used independently to identify the user."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "userId"
                  ]
                },
                {
                  "required": [
                    "userAccountEmail"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "message": {
          "$id": "#message",
          "description": "A reference to a message object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The message ID of the message. Can be used independently to identify the message."
            },
            {
              "type": "object",
              "properties": {
                "messageId": {
                  "$ref": "#text",
                  "description": "The message ID of the message. Can be used independently to identify the message."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "messageId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "document": {
          "$id": "#document",
          "description": "A reference to a document object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The document ID of the document. Can be used independently to identify the document."
            },
            {
              "type": "object",
              "properties": {
                "documentId": {
                  "$ref": "#text",
                  "description": "The document ID of the document. Can be used independently to identify the document."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "documentId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "event": {
          "$id": "#event",
          "description": "A reference to a system event object.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The event ID of the system event. Can be used independently to identify the event."
            },
            {
              "type": "object",
              "properties": {
                "eventId": {
                  "$ref": "#text",
                  "description": "The event ID of the system event. Can be used independently to identify the event."
                }
              },
              "oneOf": [
                {
                  "required": [
                    "eventId"
                  ]
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "contextEntity": {
          "$id": "#contextEntity",
          "description": "Reads an entity reference with the specified name from from the automation context.",
          "$ref": "#jsonPointerOrJsonPath"
        },
        "objectPathLookupEntity": {
          "$id": "#objectPathLookupEntity",
          "description": "Reads an entity reference from the automation data (or a custom data object) using a path defined by a text provider.",
          "oneOf": [
            {
              "$ref": "#jsonPointerOrJsonPath",
              "description": "The path that the value will be read from."
            },
            {
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                "valueIfNotFound": {
                  "$ref": "#entity",
                  "description": "An optional value that should be returned if no value is found when the path is resolved."
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                }
              },
              "required": [
                "path"
              ],
              "additionalProperties": false
            }
          ]
        },
        "dynamicEntity": {
          "$id": "#dynamicEntity",
          "description": "Reads an entity of the specified type with the speficied ID, where each property is defined by a text provider.",
          "type": "object",
          "properties": {
            "entityType": {
              "$ref": "#text",
              "description": "The type of the entity.",
              "examples": [
                "quote",
                "policy",
                "customer"
              ]
            },
            "entityId": {
              "$ref": "#text",
              "description": "The ID (UUID) of the entity."
            }
          },
          "required": [
            "entityType",
            "entityId"
          ],
          "additionalProperties": false
        }
      },
      "oneOf": [
        {
          "required": [
            "quote"
          ]
        },
        {
          "required": [
            "quoteVersion"
          ]
        },
        {
          "required": [
            "policy"
          ]
        },
        {
          "required": [
            "policyTransaction"
          ]
        },
        {
          "required": [
            "claim"
          ]
        },
        {
          "required": [
            "claimVersion"
          ]
        },
        {
          "required": [
            "invoice"
          ]
        },
        {
          "required": [
            "creditNote"
          ]
        },
        {
          "required": [
            "payment"
          ]
        },
        {
          "required": [
            "refund"
          ]
        },
        {
          "required": [
            "customer"
          ]
        },
        {
          "required": [
            "person"
          ]
        },
        {
          "required": [
            "commercialEntity"
          ]
        },
        {
          "required": [
            "tenant"
          ]
        },
        {
          "required": [
            "product"
          ]
        },
        {
          "required": [
            "portal"
          ]
        },
        {
          "required": [
            "organisation"
          ]
        },
        {
          "required": [
            "user"
          ]
        },
        {
          "required": [
            "message"
          ]
        },
        {
          "required": [
            "document"
          ]
        },
        {
          "required": [
            "event"
          ]
        },
        {
          "required": [
            "contextEntity"
          ]
        },
        {
          "required": [
            "objectPathLookupEntity"
          ]
        },
        {
          "required": [
            "dynamicEntity"
          ]
        }
      ],
      "additionalProperties": false
    },
    "entityType": {
      "$id": "#entityType",
      "type": "string",
      "description": "A type of entity in the uBind system.",
      "enum": [
        "quote",
        "quoteVersion",
        "policy",
        "policyTransaction",
        "claim",
        "claimVersion",
        "invoice",
        "creditNote",
        "payment",
        "refund",
        "customer",
        "person",
        "commercialEntity",
        "tenant",
        "product",
        "release",
        "portal",
        "organisation",
        "user",
        "message",
        "emailMessage",
        "smsMessage",
        "document",
        "event",
        "role",
        "report"
      ]
    },
    "context": {
      "$id": "#context",
      "type": "object",
      "description": "An object where each property is an entity that is considered part of the automation context.",
      "additionalProperties": {
        "$ref": "#entity"
      }
    },
    "staticValue": {
      "$id": "#staticValue",
      "description": "Defines a static property value.",
      "anyOf": [
        {
          "$ref": "#staticText"
        },
        {
          "$ref": "#staticInteger"
        },
        {
          "$ref": "#staticNumber"
        },
        {
          "$ref": "#staticCondition"
        },
        {
          "$ref": "#staticList"
        },
        {
          "$ref": "#staticObject"
        }
      ]
    },
    "value": {
      "$id": "#value",
      "description": "Defines a property value generated by a provider.",
      "anyOf": [
        {
          "type": "null"
        },
        {
          "$ref": "#text"
        },
        {
          "$ref": "#integer"
        },
        {
          "$ref": "#number"
        },
        {
          "$ref": "#condition"
        },
        {
          "$ref": "#list"
        },
        {
          "$ref": "#object"
        },
        {
          "$ref": "#binary"
        },
        {
          "$ref": "#file"
        },
        {
          "$ref": "#valueProvider"
        }
      ]
    },
    "valueProvider": {
      "$id": "#valueProvider",
      "description": "Provides a value generated by a value provider.",
      "type": "object",
      "properties": {
        "objectPathLookupValue": {
          "$id": "#objectPathLookupValue",
          "description": "Reads a value from the automation data (or a custom data object) using a path defined by a text provider.",
          "oneOf": [
            {
              "$ref": "#jsonPointerOrJsonPath",
              "description": "The path that the value will be read from."
            },
            {
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                "raiseErrorIfNotFound": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                  "default": "true"
                },
                "valueIfNotFound": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                },
                "raiseErrorIfNull": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                  "default": "false"
                },
                "valueIfNull": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                },
                "defaultValue": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if either no value is found or a null value is found when the path is resolved. If any of the valueIfNotFound or valueIfNull properties are used, they will override the defaultValue property."
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                },
                "logLevel": {
                  "$ref": "#logLevel",
                  "description": "The log-level that will be used for this provider."
                }
              },
              "required": [
                "path"
              ],
              "allOf": [
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNotFound",
                      "valueIfNotFound"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNull",
                      "valueIfNull"
                    ]
                  }
                }
              ],
              "additionalProperties": false
            }
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "objectPathLookupValue"
          ]
        }
      ],
      "additionalProperties": false
    },
    "staticProperty": {
      "$id": "#staticProperty",
      "description": "Defines a static property of an object.",
      "type": "object",
      "properties": {
        "propertyName": {
          "$ref": "#staticText",
          "description": "The name of the property."
        },
        "value": {
          "$ref": "#staticValue",
          "description": "The value of the property"
        }
      },
      "required": [
        "propertyName",
        "value"
      ],
      "additionalProperties": false
    },
    "property": {
      "$id": "#property",
      "type": "object",
      "description": "Defines a property of an object.",
      "properties": {
        "propertyName": {
          "$ref": "#text",
          "description": "The name of the property."
        },
        "value": {
          "$ref": "#value",
          "description": "The value of the property"
        }
      },
      "required": [
        "propertyName",
        "value"
      ],
      "additionalProperties": false
    },
    "staticCondition": {
      "$id": "#staticCondition",
      "description": "A condition value based on a static boolean.",
      "type": "boolean",
      "examples": [
        true,
        false
      ]
    },
    "condition": {
      "$id": "#condition",
      "description": "Provides a condition value based on a static boolean or a condition value generated by a condition provider.",
      "oneOf": [
        {
          "$ref": "#staticCondition"
        },
        {
          "$ref": "#conditionProvider"
        }
      ]
    },
    "conditionProvider": {
      "$id": "#conditionProvider",
      "description": "Provides a condition value generated by a condition provider.",
      "type": "object",
      "properties": {
        "orCondition": {
          "$id": "#orCondition",
          "type": "array",
          "description": "Returns a boolean true if any of the conditions in the array are true.",
          "items": {
            "type": "object",
            "description": "A condition that will be one of the input values into the OR evaluation.",
            "$ref": "#condition",
            "additionalProperties": false
          },
          "additionalItems": false
        },
        "andCondition": {
          "$id": "#andCondition",
          "type": "array",
          "description": "Returns a boolean true if all of the conditions in the array are true.",
          "items": {
            "type": "object",
            "description": "A condition that will be one of the input values into the AND evaluation.",
            "$ref": "#condition",
            "additionalProperties": false
          },
          "additionalItems": false
        },
        "notCondition": {
          "$id": "#notCondition",
          "$ref": "#condition",
          "description": "Returns the inverse boolean value of the input condition."
        },
        "xorCondition": {
          "$id": "#xorCondition",
          "type": "object",
          "description": "Returns a boolean true if one of the input conditions is true and the other is false, otherwise it returns boolean false.",
          "properties": {
            "firstCondition": {
              "$ref": "#condition",
              "description": "The first condition that will be used to perform the test."
            },
            "secondCondition": {
              "$ref": "#condition",
              "description": "The second condition that will be used to perform the test."
            }
          },
          "required": [
            "firstCondition",
            "secondCondition"
          ],
          "additionalProperties": false
        },
        "textIsEqualToCondition": {
          "$id": "#textIsEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the two text values passed are identical.",
          "properties": {
            "text": {
              "$ref": "#text",
              "description": "The text value that will be tested."
            },
            "isEqualTo": {
              "$ref": "#text",
              "description": "The text value that the test will be performed with."
            },
            "ignoreCase": {
              "$ref": "#condition",
              "description": "If this evaluates to true, case will be ignored when performing the text. Default behaviour is to respect case."
            }
          },
          "required": [
            "text",
            "isEqualTo"
          ],
          "additionalProperties": false
        },
        "textContainsCondition": {
          "$id": "#textContainsCondition",
          "type": "object",
          "description": "Returns a boolean true if the text value contains the second text value.",
          "properties": {
            "text": {
              "$ref": "#text",
              "description": "The text value that will be tested."
            },
            "contains": {
              "$ref": "#text",
              "description": "The text value that the test will be performed with."
            },
            "ignoreCase": {
              "$ref": "#condition",
              "description": "If this evaluates to true, case will be ignored when performing the text. Default behaviour is to respect case."
            }
          },
          "required": [
            "text",
            "contains"
          ],
          "additionalProperties": false
        },
        "textStartsWithCondition": {
          "$id": "#textStartsWithCondition",
          "type": "object",
          "description": "Returns a boolean true if the text value starts with the second text value.",
          "properties": {
            "text": {
              "$ref": "#text",
              "description": "The text value that will be tested."
            },
            "startsWith": {
              "$ref": "#text",
              "description": "The text value that the test will be performed with."
            },
            "ignoreCase": {
              "$ref": "#condition",
              "description": "If this evaluates to true, case will be ignored when performing the text. Default behaviour is to respect case."
            }
          },
          "required": [
            "text",
            "startsWith"
          ],
          "additionalProperties": false
        },
        "textEndsWithCondition": {
          "$id": "#textEndsWithCondition",
          "type": "object",
          "description": "Returns a boolean true if the text value ends with the second text value.",
          "properties": {
            "text": {
              "$ref": "#text",
              "description": "The text value that will be tested."
            },
            "endsWith": {
              "$ref": "#text",
              "description": "The text value that the test will be performed with."
            },
            "ignoreCase": {
              "$ref": "#condition",
              "description": "If this evaluates to true, case will be ignored when performing the text. Default behaviour is to respect case."
            }
          },
          "required": [
            "text",
            "endsWith"
          ],
          "additionalProperties": false
        },
        "textMatchesRegexPatternCondition": {
          "$id": "#textMatchesRegexPatternCondition",
          "type": "object",
          "description": "Returns a boolean true if the text is a regex match for the regex pattern.",
          "properties": {
            "text": {
              "$ref": "#text",
              "description": "The text that will be tested for a match using the regex pattern."
            },
            "regexPattern": {
              "$ref": "#text",
              "description": "The regex pattern that will be used to perform the test."
            }
          },
          "required": [
            "text",
            "regexPattern"
          ],
          "additionalProperties": false
        },
        "integerIsEqualToCondition": {
          "$id": "#integerIsEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the integer value is equal to the second integer value.",
          "properties": {
            "integer": {
              "$ref": "#integer",
              "description": "The integer value that will be tested."
            },
            "isEqualTo": {
              "$ref": "#integer",
              "description": "The integer value that the test will be performed with."
            }
          },
          "required": [
            "integer",
            "isEqualTo"
          ],
          "additionalProperties": false
        },
        "integerIsGreaterThanCondition": {
          "$id": "#integerIsGreaterThanCondition",
          "type": "object",
          "description": "Returns a boolean true if the integer value is greater than the second integer value.",
          "properties": {
            "integer": {
              "$ref": "#integer",
              "description": "The integer value that will be tested."
            },
            "isGreaterThan": {
              "$ref": "#integer",
              "description": "The integer value that the test will be performed with."
            }
          },
          "required": [
            "integer",
            "isGreaterThan"
          ],
          "additionalProperties": false
        },
        "integerIsGreaterThanOrEqualToCondition": {
          "$id": "#integerIsGreaterThanOrEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the integer value is greater than or equal to the second integer value.",
          "properties": {
            "integer": {
              "$ref": "#integer",
              "description": "The integer value that will be tested."
            },
            "isGreaterThanOrEqualTo": {
              "$ref": "#integer",
              "description": "The integer value that the test will be performed with."
            }
          },
          "required": [
            "integer",
            "isGreaterThanOrEqualTo"
          ],
          "additionalProperties": false
        },
        "integerIsLessThanCondition": {
          "$id": "#integerIsLessThanCondition",
          "type": "object",
          "description": "Returns a boolean true if the integer value is less than the second integer value.",
          "properties": {
            "integer": {
              "$ref": "#integer",
              "description": "The integer value that will be tested."
            },
            "isLessThan": {
              "$ref": "#integer",
              "description": "The integer value that the test will be performed with."
            }
          },
          "required": [
            "integer",
            "isLessThan"
          ],
          "additionalProperties": false
        },
        "integerIsLessThanOrEqualToCondition": {
          "$id": "#integerIsLessThanOrEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the integer value is less than or equal to the second integer value.",
          "properties": {
            "integer": {
              "$ref": "#integer",
              "description": "The integer value that will be tested."
            },
            "isLessThanOrEqualTo": {
              "$ref": "#integer",
              "description": "The integer value that the test will be performed with."
            }
          },
          "required": [
            "integer",
            "isLessThanOrEqualTo"
          ],
          "additionalProperties": false
        },
        "numberIsEqualToCondition": {
          "$id": "#numberIsEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the number value is equal to the second number value.",
          "properties": {
            "number": {
              "$ref": "#number",
              "description": "The number value that will be tested."
            },
            "isEqualTo": {
              "$ref": "#number",
              "description": "The number value that the test will be performed with."
            }
          },
          "required": [
            "number",
            "isEqualTo"
          ],
          "additionalProperties": false
        },
        "numberIsGreaterThanCondition": {
          "$id": "#numberIsGreaterThanCondition",
          "type": "object",
          "description": "Returns a boolean true if the number value is greater than the second number value.",
          "properties": {
            "number": {
              "$ref": "#number",
              "description": "The number value that will be tested."
            },
            "isGreaterThan": {
              "$ref": "#number",
              "description": "The number value that the test will be performed with."
            }
          },
          "required": [
            "number",
            "isGreaterThan"
          ],
          "additionalProperties": false
        },
        "numberIsGreaterThanOrEqualToCondition": {
          "$id": "#numberIsGreaterThanOrEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the number value is greater than or equal to the second number value.",
          "properties": {
            "number": {
              "$ref": "#number",
              "description": "The number value that will be tested."
            },
            "isGreaterThanOrEqualTo": {
              "$ref": "#number",
              "description": "The number value that the test will be performed with."
            }
          },
          "required": [
            "number",
            "isGreaterThanOrEqualTo"
          ],
          "additionalProperties": false
        },
        "numberIsLessThanCondition": {
          "$id": "#numberIsLessThanCondition",
          "type": "object",
          "description": "Returns a boolean true if the number value is less than the second number value.",
          "properties": {
            "number": {
              "$ref": "#number",
              "description": "The number value that will be tested."
            },
            "isLessThan": {
              "$ref": "#number",
              "description": "The number value that the test will be performed with."
            }
          },
          "required": [
            "number",
            "isLessThan"
          ],
          "additionalProperties": false
        },
        "numberIsLessThanOrEqualToCondition": {
          "$id": "#numberIsLessThanOrEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the number value is less than or equal to the second number value.",
          "properties": {
            "number": {
              "$ref": "#number",
              "description": "The number value that will be tested."
            },
            "isLessThanOrEqualTo": {
              "$ref": "#number",
              "description": "The number value that the test will be performed with."
            }
          },
          "required": [
            "number",
            "isLessThanOrEqualTo"
          ],
          "additionalProperties": false
        },
        "dateIsEqualToCondition": {
          "$id": "#dateIsEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the date value is equal to the second date value.",
          "properties": {
            "date": {
              "$ref": "#date",
              "description": "The date value that will be tested."
            },
            "isEqualTo": {
              "$ref": "#date",
              "description": "The date value that the test will be performed against."
            }
          },
          "required": [
            "date",
            "isEqualTo"
          ],
          "additionalProperties": false
        },
        "dateIsAfterCondition": {
          "$id": "#dateIsAfterCondition",
          "type": "object",
          "description": "Returns a boolean true if the date is after the second date.",
          "properties": {
            "date": {
              "$ref": "#date",
              "description": "The date value that will be tested."
            },
            "isAfter": {
              "$ref": "#date",
              "description": "The date value that the test will be performed against."
            }
          },
          "required": [
            "date",
            "isAfter"
          ],
          "additionalProperties": false
        },
        "dateIsAfterOrEqualToCondition": {
          "$id": "#dateIsAfterOrEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the date is after or equal to the second date.",
          "properties": {
            "date": {
              "$ref": "#date",
              "description": "The date value that will be tested."
            },
            "isAfterOrEqualTo": {
              "$ref": "#date",
              "description": "The date value that the test will be performed against."
            }
          },
          "required": [
            "date",
            "isAfterOrEqualTo"
          ],
          "additionalProperties": false
        },
        "dateIsBeforeCondition": {
          "$id": "#dateIsBeforeCondition",
          "type": "object",
          "description": "Returns a boolean true if the date is before the second date.",
          "properties": {
            "date": {
              "$ref": "#date",
              "description": "The date value that will be tested."
            },
            "isBefore": {
              "$ref": "#date",
              "description": "The date value that the test will be performed against."
            }
          },
          "required": [
            "date",
            "isBefore"
          ],
          "additionalProperties": false
        },
        "dateIsBeforeOrEqualToCondition": {
          "$id": "#dateIsBeforeOrEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the date is before or equal to the second date.",
          "properties": {
            "date": {
              "$ref": "#date",
              "description": "The date value that will be tested."
            },
            "isBeforeOrEqualTo": {
              "$ref": "#date",
              "description": "The date value that the test will be performed against."
            }
          },
          "required": [
            "date",
            "isBeforeOrEqualTo"
          ],
          "additionalProperties": false
        },
        "timeIsEqualToCondition": {
          "$id": "#timeIsEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the time value is equal to the second time value.",
          "properties": {
            "time": {
              "$ref": "#time",
              "description": "The time value that will be tested."
            },
            "isEqualTo": {
              "$ref": "#time",
              "description": "The time value that the test will be performed against."
            }
          },
          "required": [
            "time",
            "isEqualTo"
          ],
          "additionalProperties": false
        },
        "timeIsAfterCondition": {
          "$id": "#timeIsAfterCondition",
          "type": "object",
          "description": "Returns a boolean true if the time is after the second time.",
          "properties": {
            "time": {
              "$ref": "#time",
              "description": "The time value that will be tested."
            },
            "isAfter": {
              "$ref": "#time",
              "description": "The time value that the test will be performed against."
            }
          },
          "required": [
            "time",
            "isAfter"
          ],
          "additionalProperties": false
        },
        "timeIsAfterOrEqualToCondition": {
          "$id": "#timeIsAfterOrEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the time is after or equal to the second time.",
          "properties": {
            "time": {
              "$ref": "#time",
              "description": "The time value that will be tested."
            },
            "isAfterOrEqualTo": {
              "$ref": "#time",
              "description": "The time value that the test will be performed against."
            }
          },
          "required": [
            "time",
            "isAfterOrEqualTo"
          ],
          "additionalProperties": false
        },
        "timeIsBeforeCondition": {
          "$id": "#timeIsBeforeCondition",
          "type": "object",
          "description": "Returns a boolean true if the time is before the second time.",
          "properties": {
            "time": {
              "$ref": "#time",
              "description": "The time value that will be tested."
            },
            "isBefore": {
              "$ref": "#time",
              "description": "The time value that the test will be performed against."
            }
          },
          "required": [
            "time",
            "isBefore"
          ],
          "additionalProperties": false
        },
        "timeIsBeforeOrEqualToCondition": {
          "$id": "#timeIsBeforeOrEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the time is before or equal to the second time.",
          "properties": {
            "time": {
              "$ref": "#time",
              "description": "The time value that will be tested."
            },
            "isBeforeOrEqualTo": {
              "$ref": "#time",
              "description": "The time value that the test will be performed against."
            }
          },
          "required": [
            "time",
            "isBeforeOrEqualTo"
          ],
          "additionalProperties": false
        },
        "dateTimeIsEqualToCondition": {
          "$id": "#dateTimeIsEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the date-time value is equal to the second date-time value.",
          "properties": {
            "dateTime": {
              "$ref": "#dateTime",
              "description": "The date-time value that will be tested."
            },
            "isEqualTo": {
              "$ref": "#dateTime",
              "description": "The date-time value that the test will be performed against."
            }
          },
          "required": [
            "dateTime",
            "isEqualTo"
          ],
          "additionalProperties": false
        },
        "dateTimeIsAfterCondition": {
          "$id": "#dateTimeIsAfterCondition",
          "type": "object",
          "description": "Returns a boolean true if the date-time is after the second date-time.",
          "properties": {
            "dateTime": {
              "$ref": "#dateTime",
              "description": "The date-time value that will be tested."
            },
            "isAfter": {
              "$ref": "#dateTime",
              "description": "The date-time value that the test will be performed against."
            }
          },
          "required": [
            "dateTime",
            "isAfter"
          ],
          "additionalProperties": false
        },
        "dateTimeIsAfterOrEqualToCondition": {
          "$id": "#dateTimeIsAfterOrEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the date-time is after or equal to the second date-time.",
          "properties": {
            "dateTime": {
              "$ref": "#dateTime",
              "description": "The date-time value that will be tested."
            },
            "isAfterOrEqualTo": {
              "$ref": "#dateTime",
              "description": "The date-time value that the test will be performed against."
            }
          },
          "required": [
            "dateTime",
            "isAfterOrEqualTo"
          ],
          "additionalProperties": false
        },
        "dateTimeIsBeforeCondition": {
          "$id": "#dateTimeIsBeforeCondition",
          "type": "object",
          "description": "Returns a boolean true if the date-time is before the second date-time.",
          "properties": {
            "dateTime": {
              "$ref": "#dateTime",
              "description": "The date-time value that will be tested."
            },
            "isBefore": {
              "$ref": "#dateTime",
              "description": "The date-time value that the test will be performed against."
            }
          },
          "required": [
            "dateTime",
            "isBefore"
          ],
          "additionalProperties": false
        },
        "dateTimeIsBeforeOrEqualToCondition": {
          "$id": "#dateTimeIsBeforeOrEqualToCondition",
          "type": "object",
          "description": "Returns a boolean true if the date-time is before or equal to the second date-time.",
          "properties": {
            "dateTime": {
              "$ref": "#dateTime",
              "description": "The date-time value that will be tested."
            },
            "isBeforeOrEqualTo": {
              "$ref": "#dateTime",
              "description": "The date-time value that the test will be performed against."
            }
          },
          "required": [
            "dateTime",
            "isBeforeOrEqualTo"
          ],
          "additionalProperties": false
        },
        "dateTimeIsInPeriodCondition": {
          "$id": "#dateTimeIsInPeriodCondition",
          "type": "object",
          "description": "Returns a boolean true if the dateTime is within the specified period.",
          "properties": {
            "dateTime": {
              "$ref": "#dateTime",
              "description": "The dateTime value that will be tested."
            },
            "isInPeriod": {
              "$ref": "#period",
              "description": "The period that the dateTime will be tested against."
            }
          },
          "required": [
            "dateTime",
            "isInPeriod"
          ],
          "additionalProperties": false
        },
        "objectContainsPropertyCondition": {
          "$id": "#objectContainsPropertyCondition",
          "type": "object",
          "description": "Returns a boolean true if the data object has a property with a name that maches the property name value.",
          "properties": {
            "object": {
              "$ref": "#object",
              "description": "The data object that will be searched."
            },
            "propertyName": {
              "$ref": "#text",
              "description": "The property name that will be searched for."
            }
          },
          "required": [
            "object",
            "propertyName"
          ],
          "additionalProperties": false
        },
        "listContainsValueCondition": {
          "$id": "#listContainsValueCondition",
          "type": "object",
          "description": "Returns a boolean true if the list contains the specified value.",
          "properties": {
            "list": {
              "$ref": "#list",
              "description": "The list that will be searched."
            },
            "value": {
              "$ref": "#value",
              "description": "The value that will be searched for."
            }
          },
          "required": [
            "list",
            "value"
          ],
          "additionalProperties": false
        },
        "listCondition": {
          "$id": "#listCondition",
          "description": "Evaluates the specified condition with reference to each item in the speficied list, and returns true based on the match property (requiring the condition to be true for 'any', 'one' or 'all' items in the list).",
          "properties": {
            "list": {
              "$ref": "#list",
              "description": "The list that will be iterated over."
            },
            "itemAlias": {
              "$ref": "#text",
              "description": "An optional alias that will be assigned to the list item while evaluating the condition. Can be used by path lookups within the condition using hashtag prefix, e.g. #myAlias.propertyName. If none is specified, and the item is of a known entity type, the name of that entity type will be used as the alias, e.g. 'event' or 'quote'. If the item is not of a known entity type, then the alias 'item' will be used. If another item alias within the same context has the nams auto-generated name, then an integer suffix will be added such the alias is unique, e.g. 'item1' or 'item2'."
            },
            "condition": {
              "$ref": "#condition",
              "description": "The value that will be searched for."
            },
            "matchType": {
              "type": "string",
              "description": "If 'any' then only one of the items need to result in a true condition for the list condition provider to return true. If 'one' then exactly one item must result in a true condition. If 'all' then all items must result in a true condition.",
              "enum": [
                "any",
                "one",
                "all"
              ]
            }
          },
          "required": [
            "list",
            "condition",
            "matchType"
          ],
          "additionalProperties": false
        },
        "jsonPassesSchemaAssertionCondition": {
          "$id": "#jsonPassesSchemaAssertionCondition",
          "type": "object",
          "description": "Returns a boolean true if the JSON text passes a schema assertion made using the JSON schema.",
          "properties": {
            "jsonData": {
              "$ref": "#text",
              "description": "The JSON text that will be asserted using the JSON schema."
            },
            "jsonSchema": {
              "$ref": "#text",
              "description": "The JSON schema that will be used for asserting the JSON text."
            }
          },
          "required": [
            "jsonData",
            "jsonSchema"
          ],
          "additionalProperties": false
        },
        "objectPathLookupCondition": {
          "$id": "#objectPathLookupCondition",
          "description": "Reads a boolean (true or false) value from the automation data (or a custom data object) using a path defined by a text provider.",
          "oneOf": [
            {
              "$ref": "#jsonPointerOrJsonPath",
              "description": "The path that the value will be read from."
            },
            {
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                "raiseErrorIfNotFound": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                  "default": "true"
                },
                "valueIfNotFound": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                },
                "raiseErrorIfNull": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                  "default": "false"
                },
                "valueIfNull": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                },
                "raiseErrorIfTypeMismatch": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if the value found when the path is resolved is a value of a type other than a condition. If 'false' a null value will be returned if the value found when the path is resolved is a value of a type other than a condition. Cannot be used at the same time as the valueIfTypeMismatch property.",
                  "default": "true"
                },
                "valueIfTypeMismatch": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if the value found when the path is resolved is a value of a type other than a condition. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
                },
                "defaultValue": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if either no value is found, a null value is found or a value of a type other than a condition is found when the path is resolved. If any of the valueIfNotFound, valueIfNull or valueIfTypeMismatch properties are used, they will override the defaultValue property."
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                },
                "logLevel": {
                  "$ref": "#logLevel",
                  "description": "The log-level that will be used for this provider."
                }
              },
              "required": [
                "path"
              ],
              "allOf": [
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNotFound",
                      "valueIfNotFound"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNull",
                      "valueIfNull"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfTypeMismatch",
                      "valueIfTypeMismatch"
                    ]
                  }
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "ipAddressInRangeCondition": {
          "$id": "#ipAddressInRangeCondition",
          "type": "object",
          "description": "Returns a boolean true if the IP address is within the specified range.",
          "properties": {
            "ipAddress": {
              "$ref": "#text",
              "description": "The IP address that will be tested."
            },
            "isInRange": {
              "$ref": "#text",
              "description": "The IP address range that the IP address will be tested against."
            }
          },
          "required": [
            "ipAddress",
            "isInRange"
          ],
          "additionalProperties": false
        }
      },
      "oneOf": [
        {
          "required": [
            "orCondition"
          ]
        },
        {
          "required": [
            "andCondition"
          ]
        },
        {
          "required": [
            "notCondition"
          ]
        },
        {
          "required": [
            "xorCondition"
          ]
        },
        {
          "required": [
            "textIsEqualToCondition"
          ]
        },
        {
          "required": [
            "textContainsCondition"
          ]
        },
        {
          "required": [
            "textStartsWithCondition"
          ]
        },
        {
          "required": [
            "textEndsWithCondition"
          ]
        },
        {
          "required": [
            "integerIsEqualToCondition"
          ]
        },
        {
          "required": [
            "integerIsGreaterThanCondition"
          ]
        },
        {
          "required": [
            "integerIsGreaterThanOrEqualToCondition"
          ]
        },
        {
          "required": [
            "integerIsLessThanCondition"
          ]
        },
        {
          "required": [
            "integerIsLessThanOrEqualToCondition"
          ]
        },
        {
          "required": [
            "numberIsEqualToCondition"
          ]
        },
        {
          "required": [
            "numberIsGreaterThanCondition"
          ]
        },
        {
          "required": [
            "numberIsGreaterThanOrEqualToCondition"
          ]
        },
        {
          "required": [
            "numberIsLessThanCondition"
          ]
        },
        {
          "required": [
            "numberIsLessThanOrEqualToCondition"
          ]
        },
        {
          "required": [
            "dateIsEqualToCondition"
          ]
        },
        {
          "required": [
            "dateIsAfterCondition"
          ]
        },
        {
          "required": [
            "dateIsAfterOrEqualToCondition"
          ]
        },
        {
          "required": [
            "dateIsBeforeCondition"
          ]
        },
        {
          "required": [
            "dateIsBeforeOrEqualToCondition"
          ]
        },
        {
          "required": [
            "timeIsEqualToCondition"
          ]
        },
        {
          "required": [
            "timeIsAfterCondition"
          ]
        },
        {
          "required": [
            "timeIsAfterOrEqualToCondition"
          ]
        },
        {
          "required": [
            "timeIsBeforeCondition"
          ]
        },
        {
          "required": [
            "timeIsBeforeOrEqualToCondition"
          ]
        },
        {
          "required": [
            "dateTimeIsEqualToCondition"
          ]
        },
        {
          "required": [
            "dateTimeIsAfterCondition"
          ]
        },
        {
          "required": [
            "dateTimeIsAfterOrEqualToCondition"
          ]
        },
        {
          "required": [
            "dateTimeIsBeforeCondition"
          ]
        },
        {
          "required": [
            "dateTimeIsBeforeOrEqualToCondition"
          ]
        },
        {
          "required": [
            "dateTimeIsInPeriodCondition"
          ]
        },
        {
          "required": [
            "objectContainsPropertyCondition"
          ]
        },
        {
          "required": [
            "listContainsValueCondition"
          ]
        },
        {
          "required": [
            "listCondition"
          ]
        },
        {
          "required": [
            "textMatchesRegexPatternCondition"
          ]
        },
        {
          "required": [
            "jsonPassesSchemaAssertionCondition"
          ]
        },
        {
          "required": [
            "objectPathLookupCondition"
          ]
        },
        {
          "required": [
            "ipAddressInRangeCondition"
          ]
        }
      ],
      "additionalProperties": false
    },
    "staticInteger": {
      "$id": "#staticInteger",
      "description": "An integer value based on a static integer.",
      "type": "integer",
      "examples": [
        1,
        343
      ]
    },
    "integer": {
      "$id": "#integer",
      "description": "Provides an integer value based on a static integer or an integer value generated by an integer provider.",
      "oneOf": [
        {
          "$ref": "#staticInteger"
        },
        {
          "$ref": "#integerProvider"
        }
      ]
    },
    "integerProvider": {
      "$id": "#integerProvider",
      "description": "Provides an integer value generated by an integer provider.",
      "type": "object",
      "properties": {
        "valueToInteger": {
          "$id": "#valueToInteger",
          "description": "Parses an integer value from a value defined by a value provider.",
          "$ref": "#value"
        },
        "textToInteger": {
          "$id": "#textToInteger",
          "description": "Parses an integer value from a text value defined by a text provider.",
          "$ref": "#text"
        },
        "numberToInteger": {
          "$id": "#numberToInteger",
          "description": "Converts a number value into an integer value. If decimal values are present, they are simply stripped, effectively rounding the value down to the nearest whole number.",
          "$ref": "#number"
        },
        "objectPathLookupInteger": {
          "$id": "#objectPathLookupInteger",
          "description": "Reads a integer value from the automation data (or a custom data object) using a path defined by a text provider.",
          "oneOf": [
            {
              "$ref": "#jsonPointerOrJsonPath",
              "description": "The path that the value will be read from."
            },
            {
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                "raiseErrorIfNotFound": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                  "default": "true"
                },
                "valueIfNotFound": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                },
                "raiseErrorIfNull": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                  "default": "false"
                },
                "valueIfNull": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                },
                "raiseErrorIfTypeMismatch": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if the value found when the path is resolved is a value of a type other than integer. If 'false' a null value will be returned if the value found when the path is resolved is a value of a type other than integer. Cannot be used at the same time as the valueIfTypeMismatch property.",
                  "default": "true"
                },
                "valueIfTypeMismatch": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if the value found when the path is resolved is a value of a type other than integer. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
                },
                "defaultValue": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if either no value is found, a null value is found or a value of a type other than integer is found when the path is resolved. If any of the valueIfNotFound, valueIfNull or valueIfTypeMismatch properties are used, they will override the defaultValue property."
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                },
                "logLevel": {
                  "$ref": "#logLevel",
                  "description": "The log-level that will be used for this provider."
                }
              },
              "required": [
                "path"
              ],
              "allOf": [
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNotFound",
                      "valueIfNotFound"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNull",
                      "valueIfNull"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfTypeMismatch",
                      "valueIfTypeMismatch"
                    ]
                  }
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "countListItemsInteger": {
          "$id": "#countListItemsInteger",
          "description": "Counts the number of items in a list, returning an integer value.",
          "$ref": "#list"
        }
      },
      "oneOf": [
        {
          "required": [
            "valueToInteger"
          ]
        },
        {
          "required": [
            "textToInteger"
          ]
        },
        {
          "required": [
            "numberToInteger"
          ]
        },
        {
          "required": [
            "objectPathLookupInteger"
          ]
        },
        {
          "required": [
            "countListItemsInteger"
          ]
        }
      ],
      "additionalProperties": false
    },
    "staticNumber": {
      "$id": "#staticNumber",
      "description": "A number value based on a static number.",
      "type": "number",
      "examples": [
        1,
        242.3
      ]
    },
    "number": {
      "$id": "#number",
      "description": "Provides a number value based on a static number or a number value generated by a number provider.",
      "oneOf": [
        {
          "$ref": "#staticNumber"
        },
        {
          "$ref": "#numberProvider"
        }
      ]
    },
    "numberProvider": {
      "$id": "#numberProvider",
      "description": "Provides a number value generated by a number provider.",
      "type": "object",
      "properties": {
        "valueToNumber": {
          "$id": "#valueToNumber",
          "description": "Parses a number value from a value defined by a value provider.",
          "$ref": "#value"
        },
        "textToNumber": {
          "$id": "#textToNumber",
          "description": "Parses a number value from a text value defined by a text provider.",
          "$ref": "#text"
        },
        "integerToNumber": {
          "$id": "#integerToNumber",
          "description": "Converts an integer value into a number value.",
          "$ref": "#integer"
        },
        "objectPathLookupNumber": {
          "$id": "#objectPathLookupNumber",
          "description": "Reads a number value from the automation data (or a custom data object) using a path defined by a text provider.",
          "oneOf": [
            {
              "$ref": "#jsonPointerOrJsonPath",
              "description": "The path that the value will be read from."
            },
            {
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                "raiseErrorIfNotFound": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                  "default": "true"
                },
                "valueIfNotFound": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                },
                "raiseErrorIfNull": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                  "default": "false"
                },
                "valueIfNull": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                },
                "raiseErrorIfTypeMismatch": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if the value found when the path is resolved is a value of a type other than number. If 'false' a null value will be returned if the value found when the path is resolved is a value of a type other than number. Cannot be used at the same time as the valueIfTypeMismatch property.",
                  "default": "true"
                },
                "valueIfTypeMismatch": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if the value found when the path is resolved is a value of a type other than number. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
                },
                "defaultValue": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if either no value is found, a null value is found or a value of a type other than number is found when the path is resolved. If any of the valueIfNotFound, valueIfNull or valueIfTypeMismatch properties are used, they will override the defaultValue property."
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                },
                "logLevel": {
                  "$ref": "#logLevel",
                  "description": "The log-level that will be used for this provider."
                }
              },
              "required": [
                "path"
              ],
              "allOf": [
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNotFound",
                      "valueIfNotFound"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNull",
                      "valueIfNull"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfTypeMismatch",
                      "valueIfTypeMismatch"
                    ]
                  }
                }
              ],
              "additionalProperties": false
            }
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "valueToNumber"
          ]
        },
        {
          "required": [
            "textToNumber"
          ]
        },
        {
          "required": [
            "integerToNumber"
          ]
        },
        {
          "required": [
            "objectPathLookupNumber"
          ]
        }
      ],
      "additionalProperties": false
    },
    "staticText": {
      "$id": "#staticText",
      "description": "A text value based on a static text",
      "type": "string"
    },
    "text": {
      "$id": "#text",
      "description": "Provides a text value based on a static string or a text value generated by a text provider.",
      "oneOf": [
        {
          "type": "null"
        },
        {
          "$ref": "#staticText"
        },
        {
          "$ref": "#textProvider"
        }
      ]
    },
    "textProvider": {
      "$id": "#textProvider",
      "description": "Provides a text value generated by a text provider.",
      "type": "object",
      "properties": {
        "valueToText": {
          "$id": "#valueToText",
          "description": "Parses a text value from a value defined by a value provider.",
          "$ref": "#value"
        },
        "conditionToText": {
          "$id": "#conditionToText",
          "description": "Converts a condition value into a text value.",
          "$ref": "#condition"
        },
        "integerToText": {
          "$id": "#integerText",
          "description": "Converts an integer value into a text value.",
          "$ref": "#integer"
        },
        "numberToText": {
          "$id": "#numberText",
          "description": "Converts a number value into a text value.",
          "$ref": "#number"
        },
        "dateToText": {
          "$id": "#dateText",
          "description": "Converts a date value into a text value formatted using the date pattern 'd MMM yyyy'.",
          "$ref": "#date"
        },
        "timeToText": {
          "$id": "#timeText",
          "description": "Converts a time value into a short-time formatted text value, e.g. '3:55 PM'.",
          "$ref": "#time"
        },
        "dateTimeToText": {
          "$id": "#dateTimeText",
          "description": "Converts a date-time value into an ISO-8601 formated datetime text value, e.g. '2021-01-15T04:08:02.000+00:00'.",
          "$ref": "#dateTime"
        },
        "liquidText": {
          "$id": "#liquidText",
          "type": "object",
          "description": "Generates a text output from a liquid template as well as a data object that will be exposed to the template. If no data object is passed, the entire automation data is passed.",
          "properties": {
            "liquidTemplate": {
              "$ref": "#text",
              "description": "A liquid template passed as a text provider."
            },
            "snippets": {
              "type": "array",
              "description": "A list of snippets to be included when invoking the liquid engine.",
              "items": {
                "$ref": "#snippet"
              }
            },
            "dataObject": {
              "$ref": "#object",
              "description": "The data object that will be exposed to the liquid template. "
            }
          },
          "required": [
            "liquidTemplate",
            "dataObject"
          ],
          "additionalProperties": false
        },
        "snippet": {
          "$id": "#snippet",
          "description": "A snippet that can be used by a liquid provider. Can be defined by a single named property with a text value, or as a snippet-alias and liquid-template pair, where the value of each of those properties is resolved from a text provider.",
          "oneOf": [
            {
              "type": "object",
              "minProperties": 1,
              "maxProperties": 1,
              "additionalProperties": {
                "$ref": "#text",
                "description": "The text value of a single named property, defined by a text provider."
              }
            },
            {
              "type": "object",
              "properties": {
                "snippetAlias": {
                  "$ref": "#text",
                  "description": "The alias of the snippet, defined by a text provider."
                },
                "liquidTemplate": {
                  "$ref": "#text",
                  "description": "The liquid template associated with this snippet, defined by a text provider."
                }
              },
              "required": [
                "snippetAlias",
                "liquidTemplate"
              ],
              "additionalProperties": false
            }
          ]
        },
        "razorText": {
          "$id": "#razorText",
          "type": "object",
          "description": "Generates a text output from a razor template as well as an optional data object that will be exposed to the template. If no data object is passed, the entire automation data is passed.",
          "properties": {
            "razorTemplate": {
              "$ref": "#text",
              "description": "A razor template passed as a text provider."
            },
            "dataObject": {
              "$ref": "#object",
              "description": "The data object that will be exposed to the razor template. "
            }
          },
          "required": [
            "razorTemplate",
            "dataObject"
          ],
          "additionalProperties": false
        },
        "fileText": {
          "$id": "#fileText",
          "description": "Generates text from a text file referenced by a file provider.",
          "$ref": "#file"
        },
        "objectToJsonText": {
          "$id": "#objectToJsonText",
          "description": "Generates a json text reprentation of a data object.",
          "$ref": "#object"
        },
        "jsonText": {
          "$id": "#jsonText",
          "description": "Generates a json text reprentation of a data object. Retained as an alias for objectToJsonText for backward compatibility purposes",
          "$ref": "#object"
        },
        "binaryBase64Text": {
          "$id": "#binaryBase64Text",
          "description": "Generates a text reprentation in base64 format of a binary.",
          "$ref": "#binary"
        },
        "environmentText": {
          "$id": "#environmentText",
          "type": "object",
          "description": "Generates a text value based on the current product environment.",
          "properties": {
            "development": {
              "$ref": "#text",
              "description": "The output of this text provider if the current product environment is development."
            },
            "staging": {
              "$ref": "#text",
              "description": "The output of this text provider if the current product environment is staging."
            },
            "production": {
              "$ref": "#text",
              "description": "The output of this text provider if the current product environment is production."
            },
            "default": {
              "$ref": "#text",
              "description": "The default output of this text provider, if the current product environment does not have an entry."
            }
          },
          "anyOf": [
            {
              "required": [
                "development",
                "default"
              ]
            },
            {
              "required": [
                "staging",
                "default"
              ]
            },
            {
              "required": [
                "production",
                "default"
              ]
            },
            {
              "required": [
                "development",
                "staging",
                "production"
              ]
            }
          ],
          "additionalProperties": false
        },
        "additionalPropertyValueText": {
          "$id": "#additionalPropertyValueText",
          "description": "Reads a text value from an additional property of an entity.",
          "type": "object",
          "properties": {
            "entity": {
              "$ref": "#entity",
              "description": "The entity that the additional property value should be read from."
            },
            "propertyAlias": {
              "$ref": "#text",
              "description": "The alias of the additional property that should have its value read."
            },
            "raiseErrorIfNotDefined": {
              "$ref": "#condition",
              "description": "If 'true' an error will be raised if the additional property has not been defined in this context. If 'false' a null value will be returned if the additional property has not been defined in this context. Cannot be used at the same time as the valueIfNotDefined property.",
              "default": "true"
            },
            "valueIfNotDefined": {
              "$ref": "#value",
              "description": "An optional value that should be returned if the additional property has not been defined in this context. Cannot be used at the same time as the raiseErrorIfNotDefined property."
            },
            "raiseErrorIfNotSet": {
              "$ref": "#condition",
              "description": "If 'true' an error will be raised if no value has been set for the additional property. If 'false' a null value will be returned if no value has been set for the additional property. Cannot be used at the same time as the valueIfNotSet property.",
              "default": "false"
            },
            "valueIfNotSet": {
              "$ref": "#value",
              "description": "An optional value that should be returned if no value has been set for the additional property. Cannot be used at the same time as the raiseErrorIfNotSet property."
            },
            "raiseErrorIfTypeMismatch": {
              "$ref": "#condition",
              "description": "If 'true' an error will be raised if the value set for the additional property is of a type other than text. If 'false' a null value will be returned if the value set for the additional property is of a type other than text. Cannot be used at the same time as the valueIfTypeMismatch property.",
              "default": "true"
            },
            "valueIfTypeMismatch": {
              "$ref": "#value",
              "description": "An optional value that should be returned if the value set for the additional property is of a type other than text. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
            },
            "defaultValue": {
              "$ref": "#value",
              "description": "An optional value that should be returned if the additional property is either undefined in this context, has not had a value set or the value is of a type other than text. If any of the valueIfNotDefined, valueIfNotSet or valueIfTypeMismatch properties are used, they will override the defaultValue property."
            },
            "logLevel": {
              "$ref": "#logLevel",
              "description": "The log-level that will be used for this provider."
            }
          },
          "required": [
            "entity",
            "propertyAlias"
          ],
          "allOf": [
            {
              "not": {
                "required": [
                  "raiseErrorIfNotDefined",
                  "valueIfNotDefined"
                ]
              }
            },
            {
              "not": {
                "required": [
                  "raiseErrorIfNotSet",
                  "valueIfNotSet"
                ]
              }
            },
            {
              "not": {
                "required": [
                  "raiseErrorIfTypeMismatch",
                  "valueIfTypeMismatch"
                ]
              }
            }
          ],
          "additionalProperties": false
        },
        "objectPathLookupText": {
          "$id": "#objectPathLookupText",
          "description": "Reads a text value from the automation data (or a custom data object) using a path defined by a text provider.",
          "oneOf": [
            {
              "$ref": "#jsonPointerOrJsonPath",
              "description": "The path that the value will be read from."
            },
            {
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                "raiseErrorIfNotFound": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                  "default": "true"
                },
                "valueIfNotFound": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                },
                "raiseErrorIfNull": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                  "default": "false"
                },
                "valueIfNull": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                },
                "raiseErrorIfTypeMismatch": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if the value found when the path is resolved is a value of a type other than text. If 'false' a null value will be returned if the value found when the path is resolved is a value of a type other than text. Cannot be used at the same time as the valueIfTypeMismatch property.",
                  "default": "true"
                },
                "valueIfTypeMismatch": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if the value found when the path is resolved is a value of a type other than text. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
                },
                "defaultValue": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if either no value is found, a null value is found or a value of a type other than text is found when the path is resolved. If any of the valueIfNotFound, valueIfNull or valueIfTypeMismatch properties are used, they will override the defaultValue property."
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                },
                "logLevel": {
                  "$ref": "#logLevel",
                  "description": "The log-level that will be used for this provider."
                }
              },
              "required": [
                "path"
              ],
              "allOf": [
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNotFound",
                      "valueIfNotFound"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNull",
                      "valueIfNull"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfTypeMismatch",
                      "valueIfTypeMismatch"
                    ]
                  }
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "tinyUrlText": {
          "$id": "#tinyUrlText",
          "description": "Converts a url value into an eight character tokenized URL.",
          "oneOf": [
            {
              "$ref": "#text",
              "description": "The original URL where the shortened URL will be redirected to."
            },
            {
              "type": "object",
              "properties": {
                "redirectUrl": {
                  "$ref": "#text",
                  "description": "The original URL where the shortened URL will be redirected to."
                }
              },
              "required": [
                "redirectUrl"
              ],
              "additionalProperties": false
            }
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "valueToText"
          ]
        },
        {
          "required": [
            "integerToText"
          ]
        },
        {
          "required": [
            "numberToText"
          ]
        },
        {
          "required": [
            "dateToText"
          ]
        },
        {
          "required": [
            "timeToText"
          ]
        },
        {
          "required": [
            "dateTimeToText"
          ]
        },
        {
          "required": [
            "liquidText"
          ]
        },
        {
          "required": [
            "razorText"
          ]
        },
        {
          "required": [
            "fileText"
          ]
        },
        {
          "required": [
            "objectToJsonText"
          ]
        },
        {
          "required": [
            "jsonText"
          ]
        },
        {
          "required": [
            "binaryBase64Text"
          ]
        },
        {
          "required": [
            "environmentText"
          ]
        },
        {
          "required": [
            "additionalPropertyValueText"
          ]
        },
        {
          "required": [
            "objectPathLookupText"
          ]
        },
        {
          "required": [
            "conditionToText"
          ]
        },
        {
          "required": [
            "tinyUrlText"
          ]
        }
      ],
      "additionalProperties": false
    },
    "staticList": {
      "$id": "#staticList",
      "description": "Generates a list using in-line notation with static values.",
      "type": "array",
      "items": {
        "$ref": "#staticValue"
      },
      "additionalItems": false
    },
    "list": {
      "$id": "#list",
      "description": "Provides a list generated using in-line notation or a list generated by a list provider.",
      "oneOf": [
        {
          "description": "Generates a list using in-line notation with dynamic values.",
          "type": "array",
          "items": {
            "$ref": "#value"
          },
          "additionalItems": false
        },
        {
          "$ref": "#listProvider"
        }
      ]
    },
    "listProvider": {
      "$id": "#listProvider",
      "description": "Provides a list generated by a list provider.",
      "type": "object",
      "properties": {
        "objectPathLookupList": {
          "$id": "#objectPathLookupList",
          "description": "Reads a list from the automation data (or a custom data object) using a path defined by a text provider.",
          "oneOf": [
            {
              "$ref": "#jsonPointerOrJsonPath",
              "description": "The path that the value will be read from."
            },
            {
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                "raiseErrorIfNotFound": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                  "default": "true"
                },
                "valueIfNotFound": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                },
                "raiseErrorIfNull": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                  "default": "false"
                },
                "valueIfNull": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                },
                "raiseErrorIfTypeMismatch": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if the value found when the path is resolved is a value of a type other than a list. If 'false' a null value will be returned if the value found when the path is resolved is a value of a type other than a list. Cannot be used at the same time as the valueIfTypeMismatch property.",
                  "default": "true"
                },
                "valueIfTypeMismatch": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if the value found when the path is resolved is a value of a type other than a list. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
                },
                "defaultValue": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if either no value is found, a null value is found or a value of a type other than a list is found when the path is resolved. If any of the valueIfNotFound, valueIfNull or valueIfTypeMismatch properties are used, they will override the defaultValue property."
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                },
                "logLevel": {
                  "$ref": "#logLevel",
                  "description": "The log-level that will be used for this provider."
                }
              },
              "required": [
                "path"
              ],
              "allOf": [
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNotFound",
                      "valueIfNotFound"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNull",
                      "valueIfNull"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfTypeMismatch",
                      "valueIfTypeMismatch"
                    ]
                  }
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "msExcelRangeList": {
          "$id": "#msExcelRangeList",
          "description": "Reads a cell range defined using a text provider from a MS Excel file and returns the contents as a list. If the range contains both rows and columns, the return list contains rows, where each item is an array of columns. If the range contains headers, the rows instead each contain an object where each property has the name of the header, and the value is the value from the cell.",
          "type": "object",
          "properties": {
            "sourceFile": {
              "$ref": "#file",
              "description": "The MS Excel file from which the cell range should be read."
            },
            "range": {
              "$ref": "#text",
              "description": "A text value identifying the range that should be read and returned as an object.",
              "examples": [
                "Sheet1!A1:C6",
                "Table1"
              ]
            },
            "containsHeaders": {
              "$ref": "#condition",
              "description": "If the first row of values in the range are headers, set this property to true.",
              "default": false
            }
          },
          "required": [
            "sourceFile",
            "range"
          ],
          "additionalProperties": true
        },
        "entityQueryList": {
          "$id": "#entityQueryList",
          "type": "object",
          "description": "Provides a list of all entities of the specified type.",
          "properties": {
            "entityType": {
              "$ref": "#entityType",
              "description": "The type of entity that should be provided."
            },
            "pageSize": {
              "$ref": "#integer",
              "description": "Can optionally be used to specify the page size to use. If omitted, a default page size of 10000 will be used."
            },
            "pageNumber": {
              "$ref": "#integer",
              "description": "This property can optionally be used to specify the page number to use. If omitted, the first page of results will be returned."
            }
          },
          "required": [
            "entityType"
          ],
          "additionalProperties": false
        },
        "filterListItemsList": {
          "$id": "#filterListItemsList",
          "type": "object",
          "description": "Removes all items from the specified list where one or more the filter conditions are false.",
          "properties": {
            "list": {
              "$ref": "#list",
              "description": "The input list."
            },
            "itemAlias": {
              "$ref": "#text",
              "description": "An optional alias that will be assigned to the list item while evaluating the condition. Can be used by path lookups within the condition using hashtag prefix, e.g. #myAlias.propertyName. If none is specified, and the item is of a known entity type, the name of that entity type will be used as the alias, e.g. 'event' or 'quote'. If the item is not of a known entity type, then the alias 'item' will be used. If another item alias within the same context has the nams auto-generated name, then an integer suffix will be added such the alias is unique, e.g. 'item1' or 'item2'."
            },
            "condition": {
              "$ref": "#condition",
              "description": "The condition that an item in the input list has to meet, in order to be part of the output list."
            }
          },
          "required": [
            "list",
            "condition"
          ],
          "additionalProperties": false
        },
        "dataTableQueryList": {
          "$id": "#dataTableQueryList",
          "type": "object",
          "description": "Provides a list of all data table contents of the specified type.",
          "properties": {
            "entity": {
              "$ref": "#entity",
              "description": "The entity which should be used to generate an object."
            },
            "dataTableAlias": {
              "$ref": "#text",
              "description": "The alias of data table."
            }
          },
          "required": [
            "entity",
            "dataTableAlias"
          ],
          "additionalProperties": false
        },
        "entityObjectList": {
          "$id": "#entityObjectList",
          "description": "Generates a list where each item is an object representation of an entity, where the source is a list of entity references, and optional properties define which related entities to include as part of the generated objects.",
          "oneOf": [
            {
              "$ref": "#list",
              "description": "A list of entity references that will be resolved and turned into object representations."
            },
            {
              "type": "object",
              "properties": {
                "entityList": {
                  "$ref": "#list",
                  "description": "A list of entity references that will be resolved and turned into object representations."
                },
                "includeOptionalProperties": {
                  "type": "array",
                  "description": "A list of JSON pointers identifying properties (or hierarchies of properties) of the entities in the entity list, to include as part of the generated objects where possible.",
                  "items": {
                    "$ref": "#jsonPointerOrJsonPath"
                  },
                  "examples": [
                    "/customer",
                    "/customer/quotes",
                    "/customer/quotes/policyTransaction"
                  ],
                  "additionalItems": false
                },
                "useEntityDataAsAt": {
                  "$ref": "#dateTime",
                  "description": "If this argument is used, the object representation will be generated using the entity data as it were at the defined date-time. If omitted, the date-time at which the automation was first invoked will be used, e.g. the event creation date-time for event triggered automations, or the original request date-time for HTTP triggered automations."
                }
              },
              "required": [
                "entityList"
              ],
              "additionalProperties": false
            }
          ]
        },
        "kmlPlacemarksWhereCoordinatesInPolygonList": {
          "$id": "#kmlPlacemarksWhereCoordinatesInPolygonList",
          "description": "Identifies all placemarks whose polygon data contains the point identified by the longitude and latitude property values, and returns a list of those placemarks in the form of objects containing all of the properties of that placemark from the XML data.",
          "type": "object",
          "properties": {
            "longitude": {
              "$ref": "#number",
              "description": "The latitude of the point to use for performing the polygon lookup."
            },
            "latitude": {
              "$ref": "#number",
              "description": "The longitude of the point to use for performing the polygon lookup."
            },
            "kmlData": {
              "$ref": "#text",
              "description": "The KML data that the lookup should be performed into."
            }
          },
          "required": [
            "longitude",
            "latitude",
            "kmlData"
          ],
          "additionalProperties": false
        },
        "archiveFileContentsList": {
          "$id": "#archiveFileContentsList",
          "description": "Provides a list of the files found within an archive file.",
          "type": "object",
          "properties": {
            "sourceFile": {
              "$ref": "#file",
              "description": "The archive file whose contents should be described by the return value of this provider."
            },
            "password": {
              "$ref": "#text",
              "description": "If the archive file is protected by a password, that password can be specified here using this optional parameter."
            },
            "format": {
              "$ref": "#text",
              "description": "The file format of the source file. If omitted the format will be detected based on the filename extension. Initially only 'zip' is supported."
            }
          },
          "required": [
            "sourceFile"
          ],
          "additionalProperties": false
        }
      },
      "oneOf": [
        {
          "required": [
            "objectPathLookupList"
          ]
        },
        {
          "required": [
            "msExcelRangeList"
          ]
        },
        {
          "required": [
            "entityQueryList"
          ]
        },
        {
          "required": [
            "filterListItemsList"
          ]
        },
        {
          "required": [
            "dataTableQueryList"
          ]
        },
        {
          "required": [
            "entityObjectList"
          ]
        },
        {
          "required": [
            "kmlPlacemarksWhereCoordinatesInPolygonList"
          ]
        },
        {
          "required": [
            "archiveFileContentsList"
          ]
        }
      ],
      "additionalProperties": false
    },
    "staticObject": {
      "$id": "#staticObject",
      "description": "Generates an object using in-line notation with static properties.",
      "type": "array",
      "items": {
        "$ref": "#staticProperty"
      },
      "additionalItems": false
    },
    "object": {
      "$id": "#object",
      "description": "Provides an object generated using in-line notation or an object generated by an object provider.",
      "oneOf": [
        {
          "description": "Generates an object using in-line notation with dynamic properties.",
          "type": "array",
          "items": {
            "$ref": "#property"
          },
          "additionalItems": false
        },
        {
          "$ref": "#objectProvider"
        }
      ]
    },
    "objectProvider": {
      "$id": "#objectProvider",
      "description": "Provides an object generated by an object provider.",
      "type": "object",
      "properties": {
        "entityObject": {
          "$id": "#entityObject",
          "description": "Generates a data object representation of an entity, with optional properties defining which child entities to include in the generated object.",
          "oneOf": [
            {
              "$ref": "#entity",
              "description": "The entity which should be used to generate an object."
            },
            {
              "type": "object",
              "properties": {
                "entity": {
                  "$ref": "#entity",
                  "description": "The entity which should be used to generate an object."
                },
                "includeOptionalProperties": {
                  "type": "array",
                  "description": "A list of JSON pointers identifying properties (or hierarchies of properties) of the entity, to include as part of the generated object where possible.",
                  "items": {
                    "$ref": "#jsonPointerOrJsonPath"
                  },
                  "examples": [
                    "/customer",
                    "/customer/quotes",
                    "/customer/quotes/policyTransaction"
                  ],
                  "additionalItems": false
                }
              },
              "required": [
                "entity"
              ],
              "additionalProperties": false
            }
          ]
        },
        "contextEntitiesObject": {
          "$id": "#contextEntitiesObject",
          "description": "Generates an object containing a property for each of the specified context properties, where the value is a data object representation of that entity, and where specified, their related entities.",
          "oneOf": [
            {
              "type": "array",
              "description": "A list of JSON pointers identifying properties (or hierarchies of properties) within the automation context, that should be included in the result object.",
              "items": {
                "$ref": "#jsonPointerOrJsonPath"
              },
              "examples": [
                "/quote",
                "/customer/policies",
                "/performingUser"
              ],
              "additionalProperties": false
            },
            {
              "type": "object",
              "properties": {
                "contextEntities": {
                  "type": "array",
                  "description": "A list of JSON pointers identifying properties (or hierarchies of properties) within the automation context, that should be included in the result object.",
                  "items": {
                    "$ref": "#jsonPointerOrJsonPath"
                  },
                  "additionalProperties": false
                }
              },
              "required": [
                "contextEntities"
              ],
              "additionalItems": false
            }
          ]
        },
        "patchObject": {
          "$id": "#patchObject",
          "description": "Generates an object by patching an input object using a sequential list of operations.",
          "type": "object",
          "properties": {
            "object": {
              "$ref": "#object",
              "description": "The input object that will be patched."
            },
            "operations": {
              "type": "array",
              "description": "The list of operations that will be performed on the input object in sequential order.",
              "items": {
                "type": "object",
                "description": "An operation that will be performed on the input object.",
                "properties": {
                  "add": {
                    "type": "object",
                    "description": "An operation that adds a new property or list item to a specified path within the object.",
                    "properties": {
                      "path": {
                        "$ref": "#jsonPointerOrJsonPath",
                        "examples": [
                          "/biscuits/0/name",
                          "/biscuits/0"
                        ]
                      },
                      "value": {
                        "$ref": "#value"
                      },
                      "whenParentPropertyNotFound": {
                        "type": "string",
                        "description": "Describes what should happen if the parent property of the property or list item described by the path cannot be found.",
                        "enum": [
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      },
                      "whenPropertyAlreadyExists": {
                        "type": "string",
                        "description": "Describes what should happen if the property or list item described by the path already exists.",
                        "enum": [
                          "replace",
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      }
                    },
                    "required": [
                      "path",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  "remove": {
                    "type": "object",
                    "description": "An operation that removes a property or list item from a specified path within the object.",
                    "properties": {
                      "path": {
                        "$ref": "#jsonPointerOrJsonPath",
                        "examples": [
                          "/biscuits/0/name",
                          "/biscuits/0"
                        ]
                      },
                      "whenPropertyNotFound": {
                        "type": "string",
                        "description": "Describes what should happen if the property or list item described by the path cannot be found.",
                        "enum": [
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      }
                    },
                    "required": [
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "replace": {
                    "type": "object",
                    "description": "An operation that replaces a property value or list item at a specified path within the object.",
                    "properties": {
                      "path": {
                        "$ref": "#jsonPointerOrJsonPath",
                        "examples": [
                          "/biscuits/0/name",
                          "/biscuits/0"
                        ]
                      },
                      "value": {
                        "$ref": "#value"
                      },
                      "whenPropertyNotFound": {
                        "type": "string",
                        "description": "Describes what should happen if the property or list item described by the path cannot be found.",
                        "enum": [
                          "add",
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      },
                      "whenParentPropertyNotFound": {
                        "type": "string",
                        "description": "Describes what should happen if the property was not found when attempting to replace, and the 'add' behaviour was selected, but the parent property of the property or list item described by the path cannot be found.",
                        "enum": [
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      }
                    },
                    "required": [
                      "path",
                      "value"
                    ],
                    "additionalProperties": false
                  },
                  "copy": {
                    "type": "object",
                    "description": "An operation that copies a property value or list item from a specified path to another path within the object.",
                    "properties": {
                      "from": {
                        "$ref": "#jsonPointerOrJsonPath",
                        "examples": [
                          "/biscuits/0/name",
                          "/biscuits/0"
                        ]
                      },
                      "to": {
                        "$ref": "#jsonPointerOrJsonPath",
                        "examples": [
                          "/biscuits/0/name",
                          "/biscuits/0"
                        ]
                      },
                      "whenSourcePropertyNotFound": {
                        "type": "string",
                        "description": "Describes what should happen if the property or list item described by the 'from' path cannot be found.",
                        "enum": [
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      },
                      "whenDestinationParentPropertyNotFound": {
                        "type": "string",
                        "description": "Describes what should happen if the parent property of the property or list item described by the 'to' path cannot be found.",
                        "enum": [
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      },
                      "whenDestinationPropertyAlreadyExists": {
                        "type": "string",
                        "description": "Describes what should happen if the property or list item described by the 'to' path already exists.",
                        "enum": [
                          "replace",
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      }
                    },
                    "required": [
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  },
                  "move": {
                    "type": "object",
                    "description": "An operation that moves a value from a specified path to another within the object.",
                    "properties": {
                      "from": {
                        "$ref": "#jsonPointerOrJsonPath",
                        "examples": [
                          "/biscuits/0/name",
                          "/biscuits/0"
                        ]
                      },
                      "to": {
                        "$ref": "#jsonPointerOrJsonPath",
                        "examples": [
                          "/biscuits/0/name",
                          "/biscuits/0"
                        ]
                      },
                      "whenSourcePropertyNotFound": {
                        "type": "string",
                        "description": "Describes what should happen if the property or list item described by the 'from' path cannot be found.",
                        "enum": [
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      },
                      "whenDestinationParentPropertyNotFound": {
                        "type": "string",
                        "description": "Describes what should happen if the parent property of the property or list item described by the 'to' path cannot be found.",
                        "enum": [
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      },
                      "whenDestinationPropertyAlreadyExists": {
                        "type": "string",
                        "description": "Describes what should happen if the property or list item described by the 'to' path already exists.",
                        "enum": [
                          "replace",
                          "continue",
                          "end",
                          "raiseError"
                        ],
                        "default": "raiseError"
                      }
                    },
                    "required": [
                      "from",
                      "to"
                    ],
                    "additionalProperties": false
                  }
                },
                "oneOf": [
                  {
                    "required": [
                      "add"
                    ]
                  },
                  {
                    "required": [
                      "remove"
                    ]
                  },
                  {
                    "required": [
                      "replace"
                    ]
                  },
                  {
                    "required": [
                      "copy"
                    ]
                  },
                  {
                    "required": [
                      "move"
                    ]
                  }
                ],
                "additionalProperties": false
              },
              "additionalItems": false
            },
            "valueIfAborted": {
              "$ref": "#object",
              "description": "An optional value that will be returned if the patch operation was aborted because any one of the operations failed."
            }
          },
          "required": [
            "object",
            "operations"
          ],
          "additionalProperties": false
        },
        "jsonTextToObject": {
          "$id": "#jsonTextToObject",
          "description": "Generates a data object by parsing JSON passed as a text provider.",
          "$ref": "#text"
        },
        "jsonObject": {
          "$id": "#jsonObject",
          "description": "Generates a data object by parsing JSON passed as a text provider. Retained as an alias for objectToJsonText for backward compatibility purposes.",
          "$ref": "#text"
        },
        "xmlTextToObject": {
          "$id": "#xmlTextToObject",
          "description": "Generates a data object by parsing XML passed as a text provider.",
          "$ref": "#text"
        },
        "xmlObject": {
          "$id": "#xmlObject",
          "description": "Generates a data object by parsing XML passed as a text provider. Retained as an alias for xmlTextToObject for backward compatibility purposes.",
          "$ref": "#text"
        },
        "objectPathLookupObject": {
          "$id": "#objectPathLookupObject",
          "description": "Reads a data object from the automation data (or a custom data object) using a path defined by a text provider.",
          "oneOf": [
            {
              "$ref": "#jsonPointerOrJsonPath",
              "description": "The path that the value will be read from."
            },
            {
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                "raiseErrorIfNotFound": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                  "default": "true"
                },
                "valueIfNotFound": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                },
                "raiseErrorIfNull": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                  "default": "false"
                },
                "valueIfNull": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                },
                "raiseErrorIfTypeMismatch": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if the value found when the path is resolved is a value of a type other than an object. If 'false' a null value will be returned if the value found when the path is resolved is a value of a type other than an object. Cannot be used at the same time as the valueIfTypeMismatch property.",
                  "default": "true"
                },
                "valueIfTypeMismatch": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if the value found when the path is resolved is a value of a type other than an object. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
                },
                "defaultValue": {
                  "$ref": "#value",
                  "description": "An optional value that should be returned if either no value is found, a null value is found or a value of a type other than an object is found when the path is resolved. If any of the valueIfNotFound, valueIfNull or valueIfTypeMismatch properties are used, they will override the defaultValue property."
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                },
                "logLevel": {
                  "$ref": "#logLevel",
                  "description": "The log-level that will be used for this provider."
                }
              },
              "required": [
                "path"
              ],
              "allOf": [
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNotFound",
                      "valueIfNotFound"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNull",
                      "valueIfNull"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfTypeMismatch",
                      "valueIfTypeMismatch"
                    ]
                  }
                }
              ],
              "additionalProperties": false
            }
          ]
        },
        "objectPathLookupListObject": {
          "$id": "#objectPathLookupListObject",
          "description": "Creates an object where each output property has a value obtained using a path lookup.",
          "oneOf": [
            {
              "type": "array",
              "description": "A list of the properties that should be created on the output object. With this syntax, the path lookups will be performed on the automation data.",
              "items": {
                "type": "object",
                "properties": {
                  "propertyName": {
                    "$ref": "#text",
                    "description": "The name of this property on the output object."
                  },
                  "path": {
                    "$ref": "#text",
                    "description": "The path used to perform the lookup to obtain a value for the output property."
                  },
                  "raiseErrorIfNotFound": {
                    "$ref": "#condition",
                    "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be set on the output property if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                    "default": "true"
                  },
                  "valueIfNotFound": {
                    "$ref": "#value",
                    "description": "An optional value that should be set on the output property if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                  },
                  "raiseErrorIfNull": {
                    "$ref": "#condition",
                    "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be set on the output property if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                    "default": "false"
                  },
                  "valueIfNull": {
                    "$ref": "#value",
                    "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                  },
                  "defaultValue": {
                    "$ref": "#value",
                    "description": "An optional value that should be returned if either no value is found or a null value is found when the path is resolved. If any of the valueIfNotFound or valueIfNull properties are used, they will override the defaultValue property."
                  },
                  "logLevel": {
                    "$ref": "#logLevel",
                    "description": "The log-level that will be used for this provider."
                  }
                },
                "required": [
                  "propertyName",
                  "path"
                ],
                "allOf": [
                  {
                    "not": {
                      "required": [
                        "raiseErrorIfNotFound",
                        "valueIfNotFound"
                      ]
                    }
                  },
                  {
                    "not": {
                      "required": [
                        "raiseErrorIfNull",
                        "valueIfNull"
                      ]
                    }
                  }
                ],
                "additionalProperties": false
              },
              "additionalItems": false
            },
            {
              "type": "object",
              "description": "With this syntax, a data object can be specified on which the path lookups will be performed.",
              "properties": {
                "properties": {
                  "type": "array",
                  "description": "A list of the properties that should be created on the output object.",
                  "items": {
                    "type": "object",
                    "properties": {
                      "propertyName": {
                        "$ref": "#text",
                        "description": "The name of this property on the output object."
                      },
                      "path": {
                        "$ref": "#text",
                        "description": "The path used to perform the lookup to obtain a value for the output property."
                      },
                      "raiseErrorIfNotFound": {
                        "$ref": "#condition",
                        "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be set on the output property if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                        "default": "true"
                      },
                      "valueIfNotFound": {
                        "$ref": "#value",
                        "description": "An optional value that should be set on the output property if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                      },
                      "raiseErrorIfNull": {
                        "$ref": "#condition",
                        "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be set on the output property if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                        "default": "false"
                      },
                      "valueIfNull": {
                        "$ref": "#value",
                        "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                      },
                      "defaultValue": {
                        "$ref": "#value",
                        "description": "An optional value that should be returned if either no value is found or a null value is found when the path is resolved. If any of the valueIfNotFound or valueIfNull properties are used, they will override the defaultValue property."
                      }
                    },
                    "required": [
                      "propertyName",
                      "path"
                    ],
                    "additionalProperties": false
                  },
                  "additionalItems": false
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                }
              },
              "required": [
                "properties"
              ],
              "additionalProperties": false
            }
          ]
        },
        "proRataCalculationByRiskAndStateObject": {
          "$id": "#proRataCalculationByRiskAndStateObject",
          "description": "Re-performs the pro-rata calculation associated with an adjustment or cancellation policy transaction, and returns a breakdown of the payable (or refundable) premium, broken down by section and state. To work, the calculation results associated with the transaction must include premium amounts broken down by section and risk. See UB-7290 for more information.",
          "type": "object",
          "properties": {
            "policyTransactionId": {
              "$ref": "#text",
              "description": "The ID (GUID) of the policy transaction that the pro-rata calculation should be re-performed on."
            }
          },
          "required": [
            "policyTransactionId"
          ],
          "additionalProperties": false
        }
      },
      "oneOf": [
        {
          "required": [
            "entityObject"
          ]
        },
        {
          "required": [
            "contextEntitiesObject"
          ]
        },
        {
          "required": [
            "patchObject"
          ]
        },
        {
          "required": [
            "jsonTextToObject"
          ]
        },
        {
          "required": [
            "jsonObject"
          ]
        },
        {
          "required": [
            "xmlTextToObject"
          ]
        },
        {
          "required": [
            "xmlObject"
          ]
        },
        {
          "required": [
            "objectPathLookupObject"
          ]
        },
        {
          "required": [
            "objectPathLookupListObject"
          ]
        },
        {
          "required": [
            "proRataCalculationByRiskAndStateObject"
          ]
        }
      ],
      "additionalProperties": false
    },
    "binary": {
      "$id": "#binary",
      "type": "object",
      "description": "Binary data generated from a specific binary data provider type.",
      "properties": {
        "fileBinary": {
          "$id": "#fileBinary",
          "description": "Reads the binary data from a binary data file.",
          "$ref": "#file"
        },
        "base64TextBinary": {
          "$id": "#base64TextBinary",
          "description": "Reads the binary data from a string (base64 format).",
          "$ref": "#text"
        },
        "objectPathLookupBinary": {
          "$id": "#objectPathLookupBinary",
          "description": "Reads binary data from the automation data using a path defined by a text provider.",
          "oneOf": [
            {
              "$ref": "#jsonPointerOrJsonPath",
              "description": "The path that the value will be read from."
            },
            {
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                "valueIfNotFound": {
                  "$ref": "#binary",
                  "description": "An optional value that should be returned if no value is found when the path is resolved."
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                }
              },
              "required": [
                "path"
              ],
              "additionalProperties": false
            }
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "fileBinary"
          ]
        },
        {
          "required": [
            "base64TextBinary"
          ]
        },
        {
          "required": [
            "objectPathLookupBinary"
          ]
        }
      ],
      "additionalProperties": false
    },
    "file": {
      "$id": "#file",
      "type": "object",
      "description": "Dynamically provides a file.",
      "properties": {
        "textFile": {
          "$id": "#textFile",
          "type": "object",
          "description": "Generates a text file from its component attributes.",
          "properties": {
            "outputFilename": {
              "$ref": "#text",
              "description": "The file will be given the filename specified here using a text provider"
            },
            "sourceData": {
              "$ref": "#text",
              "description": "The file will be created using the text data specified here using a text provider."
            }
          },
          "required": [
            "outputFilename",
            "sourceData"
          ],
          "additionalProperties": false
        },
        "binaryFile": {
          "$id": "#binaryFile",
          "type": "object",
          "description": "Generates a  data file from its component attributes.",
          "properties": {
            "outputFilename": {
              "$ref": "#text",
              "description": "The file will be given the filename specified here using a text provider"
            },
            "sourceData": {
              "$ref": "#binary",
              "description": "The file will be created using the binary data specified here using a binary data provider."
            }
          },
          "additionalProperties": false,
          "required": [
            "outputFilename",
            "sourceData"
          ]
        },
        "pdfFile": {
          "$id": "#pdfFile",
          "description": "Generates a PDF file from another file format.",
          "oneOf": [
            {
              "$ref": "#file",
              "description": "The file to be converted into a PDF file is specified here using a file provider."
            },
            {
              "type": "object",
              "properties": {
                "outputFilename": {
                  "$ref": "#text",
                  "description": "When defined, the file will automatically be renamed to the filename specified here using a text provider."
                },
                "sourceFile": {
                  "$ref": "#file",
                  "description": "The file to be converted into a PDF file is specified here using a file provider."
                }
              },
              "required": [
                "sourceFile"
              ],
              "additionalProperties": false
            }
          ]
        },
        "msWordFile": {
          "$id": "#msWordFile",
          "description": "Replaces merge fields in a word file with values from the automation data or a specified data object.",
          "type": "object",
          "properties": {
            "outputFilename": {
              "$ref": "#text",
              "description": "When defined, the file will automatically be renamed to the filename specified here using a text provider. If not defined, the original filename will be kept and only the extension changed."
            },
            "sourceFile": {
              "$ref": "#file",
              "description": "The word file that is to have data merged into it is specified here using a file provider."
            },
            "dataObject": {
              "$ref": "#object",
              "description": "The data object that will be used to generate merge fields for the word file to merge with. If ommitted, the entire automation data will be used to generate merge field values."
            },
            "flattenDataObject": {
              "$ref": "#condition",
              "description": "If true, all nested properties in the dataObject parameter will be flattened into a single-level object structure in the view model for the merge process. For example, business.employees[2].address.postcode becomes BusinessEmployees2AddressPostcode. If false, property names are simply turned into pascal case, while retaining their hierarchical structure.",
              "default": true
            },
            "repeatingRangeStartIndex": {
              "$ref": "#integer",
              "description": "If used, specifies the index that should be used in the flattened data object to represent the first repeating instance in a list within the source data object.",
              "default": 1
            },
            "content": {
              "type": "array",
              "description": "A list source files, each identified by an alias, whose content can be merged into the MS Word file using merge directives.",
              "items": {
                "$ref": "#contentSourceFile"
              },
              "additionalItems": false
            },
            "removeUnusedMergeFields": {
              "$ref": "#condition",
              "description": "If true, all merge fields that resolve to null or empty values will be removed from the document.",
              "default": false
            },
            "removeParagraphsWhereAllMergeFieldsAreUnused": {
              "$ref": "#condition",
              "description": "If true, all paragraphs that contain merge fields and where all those merge fields resolve to null or empty values will be removed from the document.",
              "default": false
            },
            "removeTableRowsWhereAllMergeFieldsAreUnused": {
              "$ref": "#condition",
              "description": "If true, all table rows that contain merge fields and where all those merge fields resolve to null or empty values will be removed from the document.",
              "default": false
            },
            "removeTablesWhereAllMergeFieldsAreUnused": {
              "$ref": "#condition",
              "description": "If true, all tables that contain merge fields and where all those merge fields resolve to null or empty values will be removed from the document.",
              "default": false
            },
            "removeRangesWhereAllMergeFieldsAreUnused": {
              "$ref": "#condition",
              "description": "If true, all ranges that contain merge fields and where all those merge fields resolve to null or empty values will be removed from the document.",
              "default": false
            }
          },
          "required": [
            "sourceFile"
          ],
          "additionalProperties": false
        },
        "msExcelFile": {
          "$id": "#msExcelFile",
          "description": "Populates an excel file template with data from a view model from the automation data or a specified data object.",
          "type": "object",
          "properties": {
            "outputFilename": {
              "$ref": "#text",
              "description": "When defined, the file will automatically be renamed to the filename specified here using a text provider. If not defined, the original filename will be kept and only the extension changed."
            },
            "sourceFile": {
              "$ref": "#file",
              "description": "The excel file that is to have data merged into it is specified here using a file provider."
            },
            "dataObject": {
              "$ref": "#object",
              "description": "The data object that will be used to generate the view model whose data will be merged into the excel file. If omitted, the entire automation data will be used to generate the view model."
            }
          },
          "required": [
            "sourceFile"
          ],
          "additionalProperties": false
        },
        "productFile": {
          "$id": "#productFile",
          "description": "Reads a file with the specified path from the assets folder of a product. If no product is specified, the product in the automation context is used.",
          "type": "object",
          "properties": {
            "repository": {
              "type": "string",
              "description": "Denotes whether the file should be read from the Quote or Claim folder.",
              "enum": [
                "quote",
                "claim",
                "shared"
              ]
            },
            "visibility": {
              "type": "string",
              "description": "Denotes whether the file should be read from the public Assets folder, or the private Files folder.",
              "enum": [
                "public",
                "private"
              ]
            },
            "outputFilename": {
              "$ref": "#text",
              "description": "When defined, the file will automatically be renamed to the filename specified here using a text provider."
            },
            "productAlias": {
              "$ref": "#text",
              "description": "The alias of the product from which the file should be loaded. This field is optional and does not need to be provided if the trigger provides a product context. If there is no product context, and the productAlias is not provided, then this will fail."
            },
            "environment": {
              "$ref": "#environment",
              "description": "The product environment for the product from which the file should be loaded. This field is optional and does not need to be provided if the trigger provides a product context. If there is no product context, and the environment is not provided, then this will fail."
            },
            "filePath": {
              "$ref": "#text",
              "description": "The path within the folder specified by the repository and visibility properties, where the file should be loaded from, defined by a text provider"
            }
          },
          "required": [
            "repository",
            "visibility",
            "filePath"
          ],
          "additionalProperties": false
        },
        "entityFile": {
          "$id": "#entityFile",
          "type": "object",
          "description": "Reads a file from the documents attached to an entity.",
          "properties": {
            "outputFilename": {
              "$ref": "#text",
              "description": "When defined, the file will automatically be renamed to the filename specified here using a text provider"
            },
            "filename": {
              "$ref": "#text",
              "description": "The filename of the file that should be read from the documents attached to the policy transaction."
            },
            "entity": {
              "$ref": "#entity",
              "description": "The reference to the entity."
            }
          },
          "additionalProperties": false,
          "required": [
            "filename",
            "entity"
          ]
        },
        "archiveFile": {
          "$id": "#archiveFile",
          "description": "Provides an archive file, either created from scratch or based on a source archive file on which a list of operations is performed.",
          "type": "object",
          "properties": {
            "sourceFile": {
              "$ref": "#file",
              "description": "An optional archive file that the output file should be based on. If omitted, a new archive file will be created."
            },
            "sourceFilePassword": {
              "$ref": "#text",
              "description": "If a source archive file is used, and that file is password protected, specify that password using this text provider."
            },
            "format": {
              "$ref": "#archiveFileFormat",
              "description": "The type of archive that should be created or opened. Initially only 'zip' is supported. When using a sourceFile it is optional to specify the fileFormat. In that case, if omitted the format will be detected based on the filename extension."
            },
            "outputFilename": {
              "$ref": "#text",
              "description": "The filename for the generated file. If not used, the output filename will be the filename of the sourceFile."
            },
            "password": {
              "$ref": "#text",
              "description": "If used, the provided text value will be set as a password on the output archive file. If a source archive file with a password is used, this will replace that password. If a null value is provided, an existing password will be removed."
            },
            "operations": {
              "type": "array",
              "description": "The list of operations that should be performed on the archive file in sequential order.",
              "items": {
                "$ref": "#archiveFileOperation",
                "description": "An operation that should be performed on the archive file."
              },
              "additionalItems": false
            }
          },
          "anyOf": [
            {
              "required": [
                "sourceFile"
              ]
            },
            {
              "required": [
                "format",
                "outputFilename"
              ]
            }
          ],
          "additionalProperties": false
        },
        "extractFromArchiveFile": {
          "$id": "#extractFromArchiveFile",
          "description": "Provides a file that has been extracted from a archive file.",
          "type": "object",
          "properties": {
            "sourceFile": {
              "$ref": "#file",
              "description": "The archive file that the file should be extracted from."
            },
            "password": {
              "$ref": "#text",
              "description": "If the source archive file is password protected then the password should be provided using this parameter."
            },
            "format": {
              "$ref": "#text",
              "description": "The file format of the source file. If omitted the format will be detected based on the filename extension. Initially only 'zip' is supported."
            },
            "filePath": {
              "$ref": "#text",
              "description": "The file path within the zip file of the file that should be extracted."
            },
            "outputFilename": {
              "$ref": "#text",
              "description": "The extracted file can be given a custom filename using this parameter."
            }
          },
          "required": [
            "sourceFile",
            "filePath"
          ],
          "additionalProperties": false
        },
        "objectPathLookupFile": {
          "$id": "#objectPathLookupFile",
          "description": "Reads a file from a property in the automation data referenced by path passed as a text provider.",
          "oneOf": [
            {
              "$ref": "#jsonPointerOrJsonPath",
              "description": "The path that the value will be read from."
            },
            {
              "type": "object",
              "properties": {
                "path": {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                "raiseErrorIfNotFound": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                  "default": "true"
                },
                "valueIfNotFound": {
                  "$ref": "#file",
                  "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                },
                "raiseErrorIfNull": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                  "default": "false"
                },
                "valueIfNull": {
                  "$ref": "#file",
                  "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                },
                "raiseErrorIfTypeMismatch": {
                  "$ref": "#condition",
                  "description": "If 'true' an error will be raised if the value found when the path is resolved is a value of a type other than a file. If 'false' a null value will be returned if the value found when the path is resolved is a value of a type other than a file. Cannot be used at the same time as the valueIfTypeMismatch property.",
                  "default": "true"
                },
                "valueIfTypeMismatch": {
                  "$ref": "#file",
                  "description": "An optional value that should be returned if the value found when the path is resolved is a value of a type other than a file. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
                },
                "defaultValue": {
                  "$ref": "#file",
                  "description": "An optional value that should be returned if either no value is found, a null value is found or a value of a type other than a file is found when the path is resolved. If any of the valueIfNotFound, valueIfNull or valueIfTypeMismatch properties are used, they will override the defaultValue property."
                },
                "dataObject": {
                  "$ref": "#object",
                  "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                },
                "logLevel": {
                  "$ref": "#logLevel",
                  "description": "The log-level that will be used for this provider."
                }
              },
              "required": [
                "path"
              ],
              "allOf": [
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNotFound",
                      "valueIfNotFound"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfNull",
                      "valueIfNull"
                    ]
                  }
                },
                {
                  "not": {
                    "required": [
                      "raiseErrorIfTypeMismatch",
                      "valueIfTypeMismatch"
                    ]
                  }
                }
              ],
              "additionalProperties": false
            }
          ]
        }
      },
      "oneOf": [
        {
          "required": [
            "binaryFile"
          ]
        },
        {
          "required": [
            "textFile"
          ]
        },
        {
          "required": [
            "pdfFile"
          ]
        },
        {
          "required": [
            "msWordFile"
          ]
        },
        {
          "required": [
            "msExcelFile"
          ]
        },
        {
          "required": [
            "productFile"
          ]
        },
        {
          "required": [
            "entityFile"
          ]
        },
        {
          "required": [
            "archiveFile"
          ]
        },
        {
          "required": [
            "extractFromArchiveFile"
          ]
        },
        {
          "required": [
            "objectPathLookupFile"
          ]
        }
      ],
      "additionalProperties": false
    },
    "date": {
      "$id": "#date",
      "description": "Dynamically provides a date value.",
      "oneOf": [
        {
          "type": "string",
          "format": "date",
          "description": "A hard coded date value, e.g. '2020-01-01'."
        },
        {
          "type": "object",
          "description": "A specific date provider type.",
          "properties": {
            "textToDate": {
              "$id": "#textToDate",
              "description": "Parses a date value from a text value defined by a text provider. Only values defined in date formats supported by the 'en-AU' locale can currently be parsed.",
              "$ref": "#text"
            },
            "objectPathLookupDate": {
              "$id": "#objectPathLookupDate",
              "description": "Reads a date value from the automation data (or a custom data object) using a path defined by a text provider.",
              "oneOf": [
                {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                {
                  "type": "object",
                  "properties": {
                    "path": {
                      "$ref": "#jsonPointerOrJsonPath",
                      "description": "The path that the value will be read from."
                    },
                    "raiseErrorIfNotFound": {
                      "$ref": "#condition",
                      "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                      "default": "true"
                    },
                    "valueIfNotFound": {
                      "$ref": "#date",
                      "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                    },
                    "raiseErrorIfNull": {
                      "$ref": "#condition",
                      "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                      "default": "false"
                    },
                    "valueIfNull": {
                      "$ref": "#date",
                      "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                    },
                    "raiseErrorIfTypeMismatch": {
                      "$ref": "#condition",
                      "description": "If 'true' an error will be raised if the value found when the path is resolved is a value of a type other than a date. If 'false' a null value will be returned if the value found when the path is resolved is a value of a type other than a date. Cannot be used at the same time as the valueIfTypeMismatch property.",
                      "default": "true"
                    },
                    "valueIfTypeMismatch": {
                      "$ref": "#date",
                      "description": "An optional value that should be returned if the value found when the path is resolved is a value of a type other than a date. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
                    },
                    "defaultValue": {
                      "$ref": "#date",
                      "description": "An optional value that should be returned if either no value is found, a null value is found or a value of a type other than a date is found when the path is resolved. If any of the valueIfNotFound, valueIfNull or valueIfTypeMismatch properties are used, they will override the defaultValue property."
                    },
                    "dataObject": {
                      "$ref": "#object",
                      "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                    },
                    "logLevel": {
                      "$ref": "#logLevel",
                      "description": "The log-level that will be used for this provider."
                    }
                  },
                  "required": [
                    "path"
                  ],
                  "allOf": [
                    {
                      "not": {
                        "required": [
                          "raiseErrorIfNotFound",
                          "valueIfNotFound"
                        ]
                      }
                    },
                    {
                      "not": {
                        "required": [
                          "raiseErrorIfNull",
                          "valueIfNull"
                        ]
                      }
                    },
                    {
                      "not": {
                        "required": [
                          "raiseErrorIfTypeMismatch",
                          "valueIfTypeMismatch"
                        ]
                      }
                    }
                  ],
                  "additionalProperties": false
                }
              ]
            }
          },
          "oneOf": [
            {
              "required": [
                "textToDate"
              ]
            },
            {
              "required": [
                "objectPathLookupDate"
              ]
            }
          ],
          "additionalProperties": false
        }
      ]
    },
    "time": {
      "$id": "#time",
      "description": "Dynamically provides a time value.",
      "oneOf": [
        {
          "type": "string",
          "format": "time",
          "description": "A hard coded time value, e.g. '20:20:39+00:00'."
        },
        {
          "type": "object",
          "description": "A specific time provider type.",
          "properties": {
            "textToTime": {
              "$id": "#textToTime",
              "description": "Parses a time value from a text value defined by a text provider. Only values defined in time formats supported by the 'en-AU' locale can currently be parsed.",
              "$ref": "#text"
            },
            "objectPathLookupTime": {
              "$id": "#objectPathLookupTime",
              "description": "Reads a time value from the automation data (or a custom data object) using a path defined by a text provider.",
              "oneOf": [
                {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                {
                  "type": "object",
                  "properties": {
                    "path": {
                      "$ref": "#jsonPointerOrJsonPath",
                      "description": "The path that the value will be read from."
                    },
                    "raiseErrorIfNotFound": {
                      "$ref": "#condition",
                      "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                      "default": "true"
                    },
                    "valueIfNotFound": {
                      "$ref": "#time",
                      "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                    },
                    "raiseErrorIfNull": {
                      "$ref": "#condition",
                      "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                      "default": "false"
                    },
                    "valueIfNull": {
                      "$ref": "#time",
                      "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                    },
                    "raiseErrorIfTypeMismatch": {
                      "$ref": "#condition",
                      "description": "If 'true' an error will be raised if the value found when the path is resolved is a value of a type other than a time value. If 'false' a null value will be returned if the value found when the path is resolved is a value of a type other than a time value. Cannot be used at the same time as the valueIfTypeMismatch property.",
                      "default": "true"
                    },
                    "valueIfTypeMismatch": {
                      "$ref": "#time",
                      "description": "An optional value that should be returned if the value found when the path is resolved is a value of a type other than a time value. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
                    },
                    "defaultValue": {
                      "$ref": "#time",
                      "description": "An optional value that should be returned if either no value is found, a null value is found or a value of a type other than a time value is found when the path is resolved. If any of the valueIfNotFound, valueIfNull or valueIfTypeMismatch properties are used, they will override the defaultValue property."
                    },
                    "dataObject": {
                      "$ref": "#object",
                      "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                    },
                    "logLevel": {
                      "$ref": "#logLevel",
                      "description": "The log-level that will be used for this provider."
                    }
                  },
                  "required": [
                    "path"
                  ],
                  "allOf": [
                    {
                      "not": {
                        "required": [
                          "raiseErrorIfNotFound",
                          "valueIfNotFound"
                        ]
                      }
                    },
                    {
                      "not": {
                        "required": [
                          "raiseErrorIfNull",
                          "valueIfNull"
                        ]
                      }
                    },
                    {
                      "not": {
                        "required": [
                          "raiseErrorIfTypeMismatch",
                          "valueIfTypeMismatch"
                        ]
                      }
                    }
                  ],
                  "additionalProperties": false
                }
              ]
            }
          },
          "oneOf": [
            {
              "required": [
                "textToTime"
              ]
            },
            {
              "required": [
                "objectPathLookupTime"
              ]
            }
          ],
          "additionalProperties": false
        }
      ]
    },
    "dateTime": {
      "$id": "#dateTime",
      "description": "Dynamically provides a date-time value.",
      "oneOf": [
        {
          "type": "string",
          "format": "date-time",
          "description": "A hard coded time value, e.g. '2018-11-13T20:20:39+00:00'."
        },
        {
          "type": "object",
          "description": "A specific date-time provider type.",
          "properties": {
            "dateAndTimeDateTime": {
              "$id": "#dateAndTimeDateTime",
              "description": "Creates a date-time from separate date and time valuesd provided by a date provider and a time provider.",
              "type": "object",
              "properties": {
                "date": {
                  "$ref": "#date",
                  "description": "The date that will be used to create the date-time value."
                },
                "time": {
                  "$ref": "#time",
                  "description": "The time that will be used to create the date-time value."
                }
              },
              "required": [
                "date",
                "time"
              ],
              "additionalProperties": false
            },
            "textToDateTime": {
              "$id": "#textToDateTime",
              "description": "Parses a date-time value from a text value defined by a text provider. Currently only ISO formatted strings are supported, e.g. '2018-11-13T20:20:39+00:00'.",
              "$ref": "#text"
            },
            "objectPathLookupDateTime": {
              "$id": "#objectPathLookupDateTime",
              "description": "Reads a date-time value from the automation data (or a custom data object) using a path defined by a text provider.",
              "oneOf": [
                {
                  "$ref": "#jsonPointerOrJsonPath",
                  "description": "The path that the value will be read from."
                },
                {
                  "type": "object",
                  "properties": {
                    "path": {
                      "$ref": "#jsonPointerOrJsonPath",
                      "description": "The path that the value will be read from."
                    },
                    "raiseErrorIfNotFound": {
                      "$ref": "#condition",
                      "description": "If 'true' an error will be raised if no value is found when the path is resolved. If 'false' a null value will be returned if no value is found when the path is resolved. Cannot be used at the same time as the valueIfNotFound property.",
                      "default": "true"
                    },
                    "valueIfNotFound": {
                      "$ref": "#dateTime",
                      "description": "An optional value that should be returned if no value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNotFound property."
                    },
                    "raiseErrorIfNull": {
                      "$ref": "#condition",
                      "description": "If 'true' an error will be raised if a null value is found when the path is resolved. If 'false' a null value will be returned if a null value is found when the path is resolved. Cannot be used at the same time as the valueIfNull property.",
                      "default": "false"
                    },
                    "valueIfNull": {
                      "$ref": "#dateTime",
                      "description": "An optional value that should be returned if a null value is found when the path is resolved. Cannot be used at the same time as the raiseErrorIfNull property."
                    },
                    "raiseErrorIfTypeMismatch": {
                      "$ref": "#condition",
                      "description": "If 'true' an error will be raised if the value found when the path is resolved is a value of a type other than a date-time value. If 'false' a null value will be returned if the value found when the path is resolved is a value of a type other than a date-time value. Cannot be used at the same time as the valueIfTypeMismatch property.",
                      "default": "true"
                    },
                    "valueIfTypeMismatch": {
                      "$ref": "#dateTime",
                      "description": "An optional value that should be returned if the value found when the path is resolved is a value of a type other than a date-time value. Cannot be used at the same time as the raiseErrorIfTypeMismatch property."
                    },
                    "defaultValue": {
                      "$ref": "#dateTime",
                      "description": "An optional value that should be returned if either no value is found, a null value is found or a value of a type other than a date-time value is found when the path is resolved. If any of the valueIfNotFound, valueIfNull or valueIfTypeMismatch properties are used, they will override the defaultValue property."
                    },
                    "dataObject": {
                      "$ref": "#object",
                      "description": "An optional object to read the value from. If omitted, the automation data will be used by default."
                    },
                    "logLevel": {
                      "$ref": "#logLevel",
                      "description": "The log-level that will be used for this provider."
                    }
                  },
                  "required": [
                    "path"
                  ],
                  "allOf": [
                    {
                      "not": {
                        "required": [
                          "raiseErrorIfNotFound",
                          "valueIfNotFound"
                        ]
                      }
                    },
                    {
                      "not": {
                        "required": [
                          "raiseErrorIfNull",
                          "valueIfNull"
                        ]
                      }
                    },
                    {
                      "not": {
                        "required": [
                          "raiseErrorIfTypeMismatch",
                          "valueIfTypeMismatch"
                        ]
                      }
                    }
                  ],
                  "additionalProperties": false
                }
              ]
            }
          },
          "oneOf": [
            {
              "required": [
                "dateAndTimeDateTime"
              ]
            },
            {
              "required": [
                "textToDateTime"
              ]
            },
            {
              "required": [
                "objectPathLookupDateTime"
              ]
            }
          ],
          "additionalProperties": false
        }
      ]
    },
    "duration": {
      "$id": "#duration",
      "description": "Dynamically provides a duration value.",
      "oneOf": [
        {
          "type": "string",
          "format": "duration",
          "description": "A hard coded duration value in ISO 8601 format, e.g. 'P3Y6M4DT12H30M5S', 'P1D', 'PT1H30M' etc."
        },
        {
          "type": "object",
          "description": "A specific duration provider type.",
          "properties": {
            "periodTypeValueDuration": {
              "$id": "#periodTypeValueDuration",
              "description": "Creates a duration from a period type and an integer value, e.g. '1/day', '30/minute', '3/month' etc.",
              "type": "object",
              "properties": {
                "value": {
                  "$ref": "#integer",
                  "description": "The integer value used to create the duration value."
                },
                "periodType": {
                  "$ref": "#periodType",
                  "description": "The period type that will be used to create the duration value."
                }
              },
              "required": [
                "value",
                "periodType"
              ],
              "additionalProperties": false
            }
          },
          "oneOf": [
            {
              "required": [
                "periodTypeValueDuration"
              ]
            }
          ],
          "additionalProperties": false
        }
      ]
    },
    "period": {
      "$id": "#period",
      "description": "Dynamically provides a period value.",
      "oneOf": [
        {
          "type": "object",
          "description": "A specific period provider type.",
          "properties": {
            "fromDateTimeToDateTimePeriod": {
              "$id": "#fromDateTimeToDateTimePeriod",
              "description": "Creates a duration from two date-time values.",
              "type": "object",
              "properties": {
                "fromDateTime": {
                  "$ref": "#dateTime",
                  "description": "The period will start at this date-time value."
                },
                "toDateTime": {
                  "$ref": "#dateTime",
                  "description": "The period will end at this date-time value."
                }
              },
              "required": [
                "fromDateTime",
                "toDateTime"
              ],
              "additionalProperties": false
            },
            "calendarPeriod": {
              "$id": "#calendarPeriod",
              "description": "Generates a period value from a periodType and a relationship to present time e.g. 'current/day', 'previous/month', 'next/quarter' etc.",
              "type": "object",
              "properties": {
                "value": {
                  "type": "string",
                  "description": "The relationship between the period type and the present time.",
                  "enum": [
                    "previous",
                    "current",
                    "next"
                  ]
                },
                "periodType": {
                  "$ref": "#periodType",
                  "description": "The period type that will be used to create the period value."
                }
              },
              "required": [
                "value",
                "periodType"
              ],
              "additionalProperties": false
            },
            "lastPeriod": {
              "$id": "#lastPeriod",
              "description": "Creates a period representing the last 'duration' (e.g. 10 seconds, 1 day, 3 months etc.), where the duration is represented by a duration provider.",
              "$ref": "#duration"
            }
          },
          "oneOf": [
            {
              "required": [
                "fromDateTimeToDateTimePeriod"
              ]
            },
            {
              "required": [
                "calendarPeriod"
              ]
            },
            {
              "required": [
                "lastPeriod"
              ]
            }
          ],
          "additionalProperties": false
        }
      ]
    },
    "periodType": {
      "$id": "#periodType",
      "type": "string",
      "description": "A period type.",
      "enum": [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ]
    },
    "eventType": {
      "$id": "#eventType",
      "type": "string",
      "description": "The event type of an event.",
      "enum": [
        "quoteCreated",
        "newBusinessQuoteCreated",
        "adjustmentQuoteCreated",
        "renewalQuoteCreated",
        "cancellationQuoteCreated",
        "quoteActualised",
        "quoteFormDataUpdated",
        "quoteCustomerAssociated",
        "quoteCalculationResultCreated",
        "customerDetailsUpdated",
        "quoteSubmitted",
        "quoteEnquiryMade",
        "quoteSaved",
        "quoteReferenceAssigned",
        "quoteVersionCreated",
        "quoteImported",
        "quoteDiscarded",
        "quoteWorkflowStepChanged",
        "quoteStateChanged",
        "quoteBound",
        "quoteRolledBack",
        "quoteCustomerAssociationInvitationCreated",
        "quoteExpiryTimestampSet",
        "formDataPatched",
        "quoteFileAttached",
        "quoteOrganisationAssociationUpdated",
        "policyIssued",
        "policyAdjusted",
        "policyRenewed",
        "policyCancelled",
        "policyImported",
        "policyFormDataUpdated",
        "policyStateChanged",
        "claimCreated",
        "claimActualised",
        "claimAmountUpdated",
        "claimStatusUpdated",
        "claimStateChanged",
        "claimNumberUpdated",
        "claimFormDataUpdated",
        "claimCalculationResultCreated",
        "claimVersionCreated",
        "claimVersionFileAttached",
        "claimImported",
        "claimUpdateImported",
        "claimDescriptionUpdated",
        "claimIncidentDateUpdated",
        "claimWorkflowStepChanged",
        "claimEnquiryMade",
        "claimPolicyAssociationCreated",
        "claimOrganisationAssociationUpdated",
        "documentAttachedToQuote",
        "documentAttachedToQuoteVersion",
        "documentAttachedToPolicy",
        "paymentMade",
        "paymentFailed",
        "fundingProposalCreated",
        "fundingProposalCreationFailed",
        "fundingProposalAccepted",
        "fundingProposalAcceptanceFailed",
        "invoiceIssued",
        "creditNoteIssued",
        "ownershipAssigned",
        "portalCreated",
        "portalUpdated",
        "portalDisabled",
        "portalEnabled",
        "portalDeleted",
        "userAccountActivationInvitationCreated",
        "userAccountActivated",
        "userCreated",
        "userDisabled",
        "userEdited",
        "userEmailAddressBlocked",
        "userEnabled",
        "userLoggedOut",
        "userLoginAttemptFailed",
        "userLoginAttemptSucceeded",
        "userModified",
        "userOrganisationAssociationUpdated",
        "userPasswordResetRequestMade",
        "userPasswordUpdated",
        "userRoleAdded",
        "userRoleAssigned",
        "userRoleRetracted",
        "userSessionInvalidated",
        "customerAgentAssigned",
        "customerAgentUnassigned",
        "customerCreated",
        "customerEdited",
        "customerExpiredQuoteOpened",
        "customerDeleted",
        "customerModified",
        "customerUndeleted",
        "organisationCreated",
        "organisationUpdated",
        "organisationDisabled",
        "organisationEnabled",
        "organisationDeleted",
        "organisationModified",
        "tenantModified",
        "tenantDisabled",
        "custom"
      ]
    },
    "error": {
      "$id": "#error",
      "description": "Represents an error which has occurred within the application.",
      "type": "object",
      "properties": {
        "code": {
          "$ref": "#text",
          "description": "The error code, e.g. 'record.not.found' - we are using a string rather than an int as the error code can then convey some meaning in and of itself, yet it still must be unique."
        },
        "title": {
          "$ref": "#text",
          "description": "A title for the message. This is used when the message is presented to the user in a dialog."
        },
        "message": {
          "$ref": "#text",
          "description": "The error message."
        },
        "httpStatusCode": {
          "$ref": "#integer",
          "description": "A HTTP Status code, e.g. 409."
        },
        "additionalDetails": {
          "type": "array",
          "description": "If there are additional details, they can be passed here.",
          "items": {
            "$ref": "#text"
          },
          "additionalItems": false
        },
        "data": {
          "$ref": "#object",
          "description": "Any additional data which you may want to pass with this error which may assist in error handling."
        }
      },
      "required": [
        "code",
        "title",
        "message",
        "httpStatusCode"
      ],
      "additionalProperties": false
    },
    "errorCondition": {
      "$id": "#errorCondition",
      "type": "object",
      "description": "An error condition and an associated error object that will be raised if the condition is true.",
      "properties": {
        "condition": {
          "$ref": "#condition",
          "description": "The condition that will be evaluated."
        },
        "error": {
          "$ref": "#error",
          "description": "The error that will be raised if the condition is true."
        }
      },
      "required": [
        "condition",
        "error"
      ],
      "additionalProperties": false
    },
    "httpRequest": {
      "$id": "#httpRequest",
      "type": "object",
      "description": "An outbound HTTP request.",
      "properties": {
        "httpVerb": {
          "description": "The HTTP verb to use for the HTTP request.",
          "$ref": "#httpVerb",
          "default": "get"
        },
        "url": {
          "description": "The URL to use for the the HTTP request.",
          "$ref": "#text"
        },
        "headers": {
          "type": "array",
          "description": "Additional or custom headers to be added to the HTTP request.",
          "items": {
            "$ref": "#header"
          },
          "additionalItems": false
        },
        "contentType": {
          "description": "The content-type to use for the HTTP request.",
          "$ref": "#text"
        },
        "characterSet": {
          "description": "The IANA character set, e.g. \"UTF-8\". Only applicable if it's a text MIME type.",
          "$ref": "#text"
        },
        "content": {
          "description": "The content to use for the body of the HTTP response. It should match the content-type.",
          "$ref": "#content"
        },
        "clientCertificate": {
          "description": "Allows you to optionally specify a custom SSL certificate to use when making this request. Due to current limitations, the client certificate must also be installed into the certificate store on the uBind servers, and so a request must be made to the uBind support team.",
          "type": "object",
          "properties": {
            "format": {
              "description": "Specifies the format of the certificate data that will be imported.",
              "$ref": "#certificateFormat"
            },
            "certificateData": {
              "description": "The certificate data that should be imported.",
              "$ref": "#binary"
            },
            "password": {
              "description": "The password that should be used when importing the certificate data.",
              "$ref": "#text"
            }
          },
          "required": [
            "certificateData",
            "password"
          ],
          "additionalProperties": false
        }
      },
      "required": [
        "url"
      ],
      "additionalProperties": false
    },
    "httpResponse": {
      "$id": "#httpResponse",
      "description": "The response to an inbound HTTP request.",
      "type": "object",
      "properties": {
        "httpStatusCode": {
          "description": "The HTTP status code to be set for the HTTP response.",
          "$ref": "#httpStatusCode"
        },
        "reasonPhrase": {
          "description": "The text which is typically sent by servers together with the status code.",
          "$ref": "#text"
        },
        "headers": {
          "type": "array",
          "description": "Additional or custom headers to be added to the HTTP response.",
          "items": {
            "$ref": "#header"
          },
          "additionalItems": false
        },
        "contentType": {
          "description": "The content-type to use for the HTTP response.",
          "$ref": "#text"
        },
        "characterSet": {
          "description": "The IANA character set, e.g. \"UTF-8\". Only applicable if it's a text MIME type.",
          "$ref": "#text"
        },
        "content": {
          "description": "The content to use for the body of the HTTP request. It should match the content-type.",
          "$ref": "#content"
        }
      },
      "required": [
        "contentType",
        "content"
      ],
      "additionalProperties": false
    },
    "staticHttpVerb": {
      "$id": "#staticHttpVerb",
      "description": "A static HTTP verb string value. Can be one of the commonly used HTTP verbs such as GET, POST etc. or any custom verb.",
      "type": "string",
      "examples": [
        "GET",
        "POST",
        "MY-CUSTOM-VERB"
      ],
      "default": "GET"
    },
    "httpVerb": {
      "$id": "#httpVerb",
      "description": "A static HTTP verb string value or a string value generated by a text provider.",
      "oneOf": [
        {
          "$ref": "#staticHttpVerb"
        },
        {
          "$ref": "#textProvider"
        }
      ]
    },
    "httpStatusCode": {
      "$id": "#httpStatusCode",
      "$ref": "#integer",
      "description": "The HTTP Code for a HTTP response. If not provided, it defaults to 200.",
      "default": 200
    },
    "header": {
      "$id": "#header",
      "type": "object",
      "description": "A header that can be attached to a HTTP request or email. Can be defined by a single named property with a text value, or as a name-value pair, where the name is defined by text provider and the value is either defied by a text provider or a list of text providers.",
      "oneOf": [
        {
          "minProperties": 1,
          "maxProperties": 1,
          "additionalProperties": {
            "$ref": "#text",
            "description": "The text value of a single named property, defined by a text provider."
          }
        },
        {
          "properties": {
            "name": {
              "$ref": "#text",
              "description": "The name of the header, defined by a text provider."
            },
            "value": {
              "oneOf": [
                {
                  "$ref": "#text",
                  "description": "A single value of the header, defined by a text provider."
                },
                {
                  "type": "array",
                  "description": "A list of values in the header.",
                  "items": {
                    "$ref": "#text",
                    "description": "An item in the list of values for the header, defined by a text provider."
                  },
                  "additionalItems": false
                }
              ]
            }
          },
          "required": [
            "name",
            "value"
          ],
          "additionalProperties": false
        }
      ]
    },
    "content": {
      "$id": "#content",
      "description": "Content for an email, HTTP request or HTTP response. May be a single content or an array of content (multi-part).",
      "oneOf": [
        {
          "$ref": "#text",
          "description": "Text content defined by a text provider."
        },
        {
          "$ref": "#binary",
          "description": "Binary data content defined by a binary data provider."
        },
        {
          "type": "array",
          "description": "A list of mime-type and content pairs, to be used when this content is multi-part.",
          "items": {
            "type": "object",
            "description": "A mime-type/content pair, representing a part in multi-part content.",
            "properties": {
              "contentType": {
                "description": "The mime-type for this part in the multi-part content",
                "$ref": "#text"
              },
              "characterSet": {
                "description": "The IANA character set, e.g. UTF-8",
                "$ref": "#text"
              },
              "content": {
                "description": "The content for this part in the multi-part content",
                "$ref": "#content"
              }
            },
            "required": [
              "contentType",
              "content"
            ],
            "additionalProperties": false
          }
        }
      ]
    },
    "email": {
      "$id": "#email",
      "type": "object",
      "description": "An email.",
      "properties": {
        "from": {
          "$ref": "#emailAddress",
          "description": "An email address that will be recorded as the sender of the email.",
          "default": "uBind <no-reply@ubind.io>"
        },
        "replyTo": {
          "type": "array",
          "description": "A list of email addresses that will be used as the reply-to header for the email.",
          "items": {
            "$ref": "#emailAddress"
          },
          "additionalItems": false
        },
        "to": {
          "type": "array",
          "description": "An email address or list of email addresses, to which the email will be addressed.",
          "items": {
            "$ref": "#emailAddress"
          },
          "additionalItems": false
        },
        "cc": {
          "type": "array",
          "description": "An email address or list of email addresses, to which a carbon copy of the email will be sent.",
          "items": {
            "$ref": "#emailAddress"
          },
          "additionalItems": false
        },
        "bcc": {
          "type": "array",
          "description": "An email address or list of email addresses, to which a blind carbon copy of the email will be sent.",
          "items": {
            "$ref": "#emailAddress"
          },
          "additionalItems": false
        },
        "subject": {
          "$ref": "#text",
          "description": "The subject of the email."
        },
        "textBody": {
          "$ref": "#text",
          "description": "The text-only version of the email body."
        },
        "htmlBody": {
          "$ref": "#text",
          "description": "The html version of the email body."
        },
        "attachments": {
          "type": "array",
          "description": "A list of file attachments for the email.",
          "items": {
            "$ref": "#fileAttachment"
          },
          "additionalItems": false
        },
        "comments": {
          "$ref": "#text",
          "description": "To go in the 'comments' header of the email as per RFC5322."
        },
        "keywords": {
          "type": "array",
          "description": "To go in the 'keywords' header of the email as per RFC5322.",
          "items": {
            "$ref": "#text",
            "description": "a keyword associated with the email content."
          },
          "additionalItems": false
        },
        "headers": {
          "type": "array",
          "description": "Additional or custom headers to be added to the email.",
          "items": {
            "$ref": "#header"
          },
          "additionalItems": false
        }
      },
      "required": [
        "from",
        "to"
      ],
      "anyOf": [
        {
          "required": [
            "textBody"
          ]
        },
        {
          "required": [
            "htmlBody"
          ]
        }
      ],
      "additionalProperties": false
    },
    "emailAddress": {
      "$id": "#emailAddress",
      "$ref": "#text",
      "description": "The RFC5322 format email address, e.g. \"John Doe <j.doe@mail.com>\" or just \"betty.j@mail.com\""
    },
    "staticPhoneNumber": {
      "$id": "#staticPhoneNumber",
      "description": "A static phone number string.",
      "type": "string",
      "pattern": "^\\+?[0-9]{10}[0-9]*$"
    },
    "phoneNumber": {
      "$id": "#phoneNumber",
      "description": "A static phone number string or a phone number string generated by a text provider.",
      "oneOf": [
        {
          "$ref": "#staticPhoneNumber"
        },
        {
          "$ref": "#textProvider"
        }
      ]
    },
    "staticArchiveFileFormat": {
      "$id": "#staticArchiveFileFormat",
      "description": "A static archive file format string.",
      "type": "string",
      "enum": [
        "zip"
      ]
    },
    "archiveFileFormat": {
      "$id": "#archiveFileFormat",
      "description": "A static archive file format string or a archive file format string generated by a text provider.",
      "oneOf": [
        {
          "$ref": "#staticArchiveFileFormat"
        },
        {
          "$ref": "#textProvider"
        }
      ]
    },
    "fileAttachment": {
      "$id": "#fileAttachment",
      "description": "An email attachment.",
      "type": "object",
      "properties": {
        "outputFilename": {
          "$ref": "#text",
          "description": "When defined, the file will automatically be renamed to the filename specified here using a text provider."
        },
        "sourceFile": {
          "$ref": "#file",
          "description": "The file that will be attached to the email, specified by a file provider."
        },
        "includeCondition": {
          "$ref": "#condition",
          "description": "If this property is included, the condition must evaluate to true in order for the attachment to be included."
        }
      },
      "required": [
        "sourceFile"
      ],
      "additionalProperties": false
    },
    "contentSourceFile": {
      "$id": "#contentSourceFile",
      "type": "object",
      "description": "A list source files, each identified by an alias, whose content can be merged into the MS Word file using merge directives.",
      "properties": {
        "sourceFile": {
          "$ref": "#file",
          "description": "A source file whose content can be merged into the MS Word file."
        },
        "alias": {
          "$ref": "#alias",
          "description": "An alias for the source file used to identify it using a merge directive."
        },
        "includeCondition": {
          "$ref": "#condition",
          "description": "If this property is included, the condition must evaluate to true in order for the source file to be included."
        }
      },
      "required": [
        "sourceFile",
        "alias"
      ],
      "additionalProperties": false
    },
    "emailAccount": {
      "$id": "#emailAccount",
      "description": "The details and credentials needed to receive emails from a remote server.",
      "type": "object",
      "properties": {
        "protocol": {
          "type": "string",
          "description": "The protocol being used for connecting to the incoming mail server. One of POP3 or IMAP.",
          "enum": [
            "POP3",
            "IMAP",
            "pop3",
            "imap"
          ],
          "default": "pop3"
        },
        "encryptionMethod": {
          "type": "string",
          "description": "The encryption method used. If omitted, the default encryption method is 'none'.",
          "enum": [
            "none",
            "SSL",
            "TLS",
            "ssl",
            "tls"
          ],
          "default": "tls"
        },
        "hostname": {
          "$ref": "#text",
          "description": "The host that will be connected to."
        },
        "port": {
          "$ref": "#integer",
          "description": "The port that will be connected to. If omitted, the default port will be based on the protocol and encryption method (110 for 'pop3/none', 995 for 'pop3/SSL', 143 for 'imap/none' and 993 for 'imap/SSL')."
        },
        "username": {
          "$ref": "#text",
          "description": "The username that will be used for authentication."
        },
        "password": {
          "$ref": "#text",
          "description": "The password that will be used for authentication"
        },
        "pollingIntervalSeconds": {
          "type": "integer",
          "description": "Defines the frequency in seconds that the incoming mail server will be polled. If omitted the default value is every 60 seconds.",
          "default": 60
        }
      },
      "required": [
        "hostname",
        "username",
        "password"
      ],
      "additionalProperties": false
    },
    "archiveFileOperation": {
      "$id": "#archiveFileOperation",
      "type": "object",
      "description": "An operation that will be performed by the archiveFile provider on an archive file.",
      "properties": {
        "addFile": {
          "$id": "#archiveFileAddFileOperation",
          "type": "object",
          "description": "An archive file operation used to add a file to a location within an archive file.",
          "properties": {
            "sourceFile": {
              "$ref": "#file",
              "description": "This is the file that should be added to the archive file, specified by a file provider."
            },
            "destinationFileName": {
              "$ref": "#text",
              "description": "If this property is used then the source file will automatically be renamed to the filename specified here using a text provider before being added to the archive file. If omitted, the filename of the sourceFile will be used."
            },
            "destinationFolderPath": {
              "$ref": "#text",
              "description": "This is the path to the folder within the archive file that the new file should be added to. If omitted, the file will be added to the root of the archive.",
              "examples": [
                "folder/name/"
              ]
            },
            "compressionLevel": {
              "type": "string",
              "description": "This parameter can optionally be used to specify a non-default compression level for the new file.",
              "enum": [
                "optimal",
                "fastest",
                "noCompression",
                "smallestSize"
              ],
              "default": "optimal"
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "If this property is used, the condition must evaluate to true in order for this operation to be performed."
            },
            "whenDestinationFolderNotFound": {
              "type": "string",
              "description": "Describes what should happen if the folder identified by the destinationFolderPath cannot be found.",
              "enum": [
                "create",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "create"
            },
            "whenDestinationFolderContainsEntryWithSameName": {
              "type": "string",
              "description": "Describes what should happen if there is already an entry (file or folder) with the same name in the destination folder.",
              "enum": [
                "replace",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            }
          },
          "required": [
            "sourceFile"
          ],
          "additionalProperties": false
        },
        "addFolder": {
          "$id": "#archiveFileAddFolderOperation",
          "type": "object",
          "description": "An archive file operation used to add a folder to a location within an archive file.",
          "properties": {
            "folderName": {
              "$ref": "#text",
              "description": "The name of the new folder that should be added."
            },
            "destinationFolderPath": {
              "$ref": "#text",
              "description": "This is the path to the folder within the archive file where the new folder should be added. If omitted, the new folder will be added to the root of the archive.",
              "examples": [
                "folder/name/"
              ]
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "If this property is used, the condition must evaluate to true in order for this operation to be performed."
            },
            "whenDestinationFolderNotFound": {
              "type": "string",
              "description": "Describes what should happen if the folder identified by the destinationFolderPath cannot be found.",
              "enum": [
                "create",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "create"
            },
            "whenDestinationFolderContainsFileWithSameName": {
              "type": "string",
              "description": "Describes what should happen if there is already a file with the same name in the destination folder.",
              "enum": [
                "replace",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            },
            "whenDestinationFolderContainsFolderWithSameName": {
              "type": "string",
              "description": "Describes what should happen if there is already a folder with the same name in the destination folder.",
              "enum": [
                "skip",
                "end",
                "raiseError"
              ],
              "default": "skip"
            }
          },
          "required": [
            "folderName"
          ],
          "additionalProperties": false
        },
        "copyFile": {
          "$id": "#archiveFileCopyFileOperation",
          "type": "object",
          "description": "An operation used to copy a file from one location to another location within an archive file.",
          "properties": {
            "sourceFilePath": {
              "$ref": "#text",
              "description": "The location of the file that should be copied to the destination folder.",
              "examples": [
                "source/file-to-copy.ext"
              ]
            },
            "destinationFolderPath": {
              "$ref": "#text",
              "description": "The destination location that the file should be copied to. If omitted, the file will be copied to the root of the archive.",
              "examples": [
                "destination/folder/"
              ]
            },
            "destinationFileName": {
              "$ref": "#text",
              "description": "If this property is used, the source file will automatically be renamed to the filename specified here before being copied to the destination folder. If omitted, the filename will not be changed."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "If this property is included, the condition must evaluate to true in order for this operation to be performed."
            },
            "whenSourceFileNotFound": {
              "type": "string",
              "description": "Describes what should happen if the file identified by the sourceFilePath cannot be found.",
              "enum": [
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            },
            "whenDestinationFolderNotFound": {
              "type": "string",
              "description": "Describes what should happen if the folder identified by the destinationFolderPath cannot be found.",
              "enum": [
                "create",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "create"
            },
            "whenDestinationFolderContainsEntryWithSameName": {
              "type": "string",
              "description": "Describes what should happen if there is already an entry (file or folder) with the same name in the destination folder.",
              "enum": [
                "replace",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            }
          },
          "required": [
            "sourceFilePath"
          ],
          "additionalProperties": false
        },
        "copyFolder": {
          "$id": "#archiveFileCopyFolderOperation",
          "type": "object",
          "description": "An operation used to copy a folder from one location to another location within an archive file.",
          "properties": {
            "sourceFolderPath": {
              "$ref": "#text",
              "description": "The location of the folder that should be copied to the destination folder.",
              "examples": [
                "source/folder-to-copy/"
              ]
            },
            "destinationFolderPath": {
              "$ref": "#text",
              "description": "The destination location that the folder should be copied to. If omitted, the folder will be copied to the root of the archive.",
              "examples": [
                "destination/"
              ]
            },
            "destinationFolderName": {
              "$ref": "#text",
              "description": "If this property is used, the source folder will automatically be renamed to the folder name specified here before being copied to the destination folder. If omitted, the folder name will not be changed."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "If this property is included, the condition must evaluate to true in order for this operation to be performed."
            },
            "whenSourceFolderNotFound": {
              "type": "string",
              "description": "Describes what should happen if the folder identified by the sourceFolderPath cannot be found.",
              "enum": [
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            },
            "whenDestinationFolderNotFound": {
              "type": "string",
              "description": "Describes what should happen if the folder identified by the destinationFolderPath cannot be found.",
              "enum": [
                "create",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "create"
            },
            "whenDestinationFolderContainsFileWithSameName": {
              "type": "string",
              "description": "Describes what should happen if there is already a file with the same name in the destination folder.",
              "enum": [
                "replace",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            },
            "whenDestinationFolderContainsFolderWithSameName": {
              "type": "string",
              "description": "Describes what should happen if there is already a folder with the same name in the destination folder.",
              "enum": [
                "merge",
                "replace",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            }
          },
          "required": [
            "sourceFolderPath"
          ],
          "additionalProperties": false
        },
        "moveFile": {
          "$id": "#archiveFileMoveFileOperation",
          "type": "object",
          "description": "An operation used to move a file from one location to another location within an archive file.",
          "properties": {
            "sourceFilePath": {
              "$ref": "#text",
              "description": "The location of the file that should be moved to the destination folder.",
              "examples": [
                "source/file-to-copy.ext"
              ]
            },
            "destinationFolderPath": {
              "$ref": "#text",
              "description": "The destination location that the file should be moved to. If omitted, the file will be moved to the root of the archive.",
              "examples": [
                "destination/folder/"
              ]
            },
            "destinationFileName": {
              "$ref": "#text",
              "description": "If this property is used, the source file will automatically be renamed to the filename specified here before being moved to the destination folder. If omitted, the filename will not be changed."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "If this property is included, the condition must evaluate to true in order for this operation to be performed."
            },
            "whenSourceFileNotFound": {
              "type": "string",
              "description": "Describes what should happen if the file identified by the sourceFilePath cannot be found.",
              "enum": [
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            },
            "whenDestinationFolderNotFound": {
              "type": "string",
              "description": "Describes what should happen if the folder identified by the destinationFolderPath cannot be found.",
              "enum": [
                "create",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "create"
            },
            "whenDestinationFolderContainsEntryWithSameName": {
              "type": "string",
              "description": "Describes what should happen if there is already an entry (file or folder) with the same name in the destination folder.",
              "enum": [
                "replace",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            }
          },
          "required": [
            "sourceFilePath"
          ],
          "additionalProperties": false
        },
        "moveFolder": {
          "$id": "#archiveFileMoveFolderOperation",
          "type": "object",
          "description": "An operation used to move a folder from one location to another location within an archive file.",
          "properties": {
            "sourceFolderPath": {
              "$ref": "#text",
              "description": "The location of the folder that should be moved to the destination folder.",
              "examples": [
                "source/folder-to-copy/"
              ]
            },
            "destinationFolderPath": {
              "$ref": "#text",
              "description": "The destination location that the folder should be moved to. If omitted, the folder will be moved to the root of the archive.",
              "examples": [
                "destination/"
              ]
            },
            "destinationFolderName": {
              "$ref": "#text",
              "description": "If this property is used, the source folder will automatically be renamed to the folder name specified here before being moved to the destination folder. If omitted, the folder name will not be changed."
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "If this property is included, the condition must evaluate to true in order for this operation to be performed."
            },
            "whenSourceFolderNotFound": {
              "type": "string",
              "description": "Describes what should happen if the folder identified by the sourceFolderPath cannot be found.",
              "enum": [
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            },
            "whenDestinationFolderNotFound": {
              "type": "string",
              "description": "Describes what should happen if the folder identified by the destinationFolderPath cannot be found.",
              "enum": [
                "create",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "create"
            },
            "whenDestinationFolderContainsFileWithSameName": {
              "type": "string",
              "description": "Describes what should happen if there is already a file with the same name in the destination folder.",
              "enum": [
                "replace",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            },
            "whenDestinationFolderContainsFolderWithSameName": {
              "type": "string",
              "description": "Describes what should happen if there is already a folder with the same name in the destination folder.",
              "enum": [
                "merge",
                "replace",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            }
          },
          "required": [
            "sourceFolderPath"
          ],
          "additionalProperties": false
        },
        "removeEntry": {
          "$id": "#archiveFileRemoveEntryOperation",
          "type": "object",
          "description": "An operation used to remove an entry (file or folder) from a specified location within an archive file.",
          "properties": {
            "path": {
              "$ref": "#text",
              "description": "The path within the archive file that identifies the file or folder that should be removed.",
              "examples": [
                "folder/file-to-remove.ext",
                "folder/folder-to-remove/"
              ]
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "If this property is included, the condition must evaluate to true in order for this operation to be performed."
            },
            "whenEntryNotFound": {
              "type": "string",
              "description": "Describes what should happen if the file or folder identified by the path cannot be found.",
              "enum": [
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            }
          },
          "required": [
            "path"
          ],
          "additionalProperties": false
        },
        "replaceFile": {
          "$id": "#archiveFileReplaceFileOperation",
          "type": "object",
          "description": "An operation used to replace an entry at a specified location within an archive file with a new file.",
          "properties": {
            "sourceFile": {
              "$ref": "#file",
              "description": "The file that should replace the target file in the archive file, specified by a file provider."
            },
            "targetFileName": {
              "$ref": "#text",
              "description": "If this property is used, the operation will try to replace an entry (file or folder) with this name. If omitted, the filename of the sourceFile will be used."
            },
            "targetFolderPath": {
              "$ref": "#text",
              "description": "The location of the entry that should be replaced with the sourceFile. If omitted, the target entry will be assumed to be in the root of the archive.",
              "examples": [
                "folder/name/"
              ]
            },
            "compressionLevel": {
              "type": "string",
              "description": "This parameter can optionally be used to specify a non-default compression level for the new file.",
              "enum": [
                "optimal",
                "fastest",
                "noCompression",
                "smallestSize"
              ],
              "default": "optimal"
            },
            "runCondition": {
              "$ref": "#condition",
              "description": "If this property is included, the condition must evaluate to true in order for this operation to be performed."
            },
            "whenTargetEntryNotFound": {
              "type": "string",
              "description": "Describes what should happen if the target entry (file or folder) is not found within the archive file.",
              "enum": [
                "add",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "raiseError"
            },
            "whenTargetFolderNotFound": {
              "type": "string",
              "description": "Describes what should happen if the target file was not found when attempting to replace, and the 'add' behaviour was selected, but the folder identified by the path parameter doesn't exist.",
              "enum": [
                "create",
                "skip",
                "end",
                "raiseError"
              ],
              "default": "create"
            }
          },
          "required": [
            "sourceFile"
          ],
          "additionalProperties": false
        }
      },
      "oneOf": [
        {
          "required": [
            "addFile"
          ]
        },
        {
          "required": [
            "addFolder"
          ]
        },
        {
          "required": [
            "copyFile"
          ]
        },
        {
          "required": [
            "copyFolder"
          ]
        },
        {
          "required": [
            "moveFile"
          ]
        },
        {
          "required": [
            "moveFolder"
          ]
        },
        {
          "required": [
            "removeEntry"
          ]
        },
        {
          "required": [
            "replaceFile"
          ]
        }
      ],
      "additionalProperties": false
    },
    "staticFileTransferProtocol": {
      "$id": "#staticFileTransferProtocol",
      "description": "A static file transfer protocol string.",
      "type": "string",
      "enum": [
        "sftp"
      ],
      "default": "sftp"
    },
    "fileTransferProtocol": {
      "$id": "#fileTransferProtocol",
      "description": "A static file transfer protocol string value or a file transfer protocol string value generated by a text provider.",
      "oneOf": [
        {
          "$ref": "#staticFileTransferProtocol"
        },
        {
          "$ref": "#textProvider"
        }
      ]
    },
    "staticCertificateFormat": {
      "$id": "#staticCertificateFormat",
      "description": "A static certificate format string.",
      "type": "string",
      "enum": [
        "pfx"
      ],
      "default": "pfx"
    },
    "certificateFormat": {
      "$id": "#certificateFormat",
      "description": "A static certificate format string value or an certificate format string value generated by a text provider.",
      "anyOf": [
        {
          "$ref": "#text"
        }
      ]
    },
    "sms": {
      "$id": "#sms",
      "type": "object",
      "description": "An SMS.",
      "properties": {
        "from": {
          "$ref": "#text",
          "description": "A phone number that will be used as the from number for the SMS."
        },
        "to": {
          "oneOf": [
            {
              "$ref": "#text",
              "description": "A single numbers to which the SMS will be sent."
            },
            {
              "type": "array",
              "description": "A list of numbers to which the SMS will be sent.",
              "items": {
                "$ref": "#text"
              },
              "additionalItems": false
            }
          ]
        },
        "content": {
          "$ref": "#text",
          "description": "The text content of the SMS."
        }
      },
      "required": [
        "to",
        "content"
      ],
      "additionalProperties": false
    },
    "staticLogLevel": {
      "$id": "#staticLogLevel",
      "description": "A static log-level that can be specified for an automation, trigger, action or provider.",
      "type": "integer",
      "minimum": 0,
      "maximum": 5
    },
    "logLevel": {
      "$id": "#logLevel",
      "description": "The log-level that can be specified for an automation, trigger, action or provider, or an integer value generated by an integer provider. 0 means no logging at all, and 5 means the most detailed logging possible.",
      "oneOf": [
        {
          "$ref": "#staticLogLevel"
        },
        {
          "$ref": "#integerProvider"
        }
      ]
    },
    "relationship": {
      "$id": "#relationship",
      "type": "object",
      "description": "A relationship with a related entity.",
      "properties": {
        "relationshipType": {
          "type": "string",
          "description": "The alias of the relationship type of the relationship that should be added to the entity.",
          "enum": [
            "messageSender",
            "messageRecipient",
            "customerMessage",
            "quoteMessage",
            "quoteVersionMessage",
            "policyMessage",
            "policyTransactionMessage",
            "claimMessage",
            "claimVersionMessage",
            "reportMessage",
            "productMessage",
            "organisationMessage",
            "eventPerformingUser",
            "quoteEvent",
            "quoteVersionEvent",
            "policyEvent",
            "policyTransactionEvent",
            "claimEvent",
            "claimVersionEvent",
            "customerEvent",
            "userEvent",
            "productEvent",
            "portalEvent",
            "tenantEvent",
            "organisationEvent",
            "emailEvent",
            "documentEvent",
            "creditNoteEvent",
            "invoiceEvent",
            "paymentEvent",
            "refundEvent"
          ]
        },
        "sourceEntity": {
          "$ref": "#entity",
          "description": "A reference to the source entity that the relationship should be created from."
        },
        "targetEntity": {
          "$ref": "#entity",
          "description": "A reference to the target entity that the relationship should be created to."
        }
      },
      "oneOf": [
        {
          "required": [
            "relationshipType",
            "sourceEntity"
          ]
        },
        {
          "required": [
            "relationshipType",
            "targetEntity"
          ]
        }
      ],
      "additionalProperties": false
    },
    "tag": {
      "$id": "#tag",
      "description": "A tag that can be set on an entity.",
      "$ref": "#text"
    },
    "staticJsonPointer": {
      "$id": "#staticJsonPointer",
      "description": "A static JSON pointer string value. Can be absolute or relative.",
      "type": "string",
      "pattern": "^(([0-9]+)|(#))?((\\/)(([a-zA-Z][a-zA-Z0-9-\\_]*)|([0-9]+))?)+$"
    },
    "jsonPointer": {
      "$id": "#jsonPointer",
      "description": "A static JSON pointer string value or a string value generated by a text provider. Can be absolute or relative.",
      "oneOf": [
        {
          "$ref": "#staticJsonPointer"
        },
        {
          "$ref": "#textProvider"
        }
      ]
    },
    "staticJsonPath": {
      "$id": "#staticJsonPath",
      "description": "A static JSON path string value. Can be absolute or relative.",
      "type": "string",
      "pattern": "^(#)?([a-z][a-zA-Z0-9]+(\\[[0-9]+\\])?)(\\.?([a-zA-Z][a-zA-Z0-9]+(\\[[0-9]+\\])?)?)+$"
    },
    "jsonPath": {
      "$id": "#jsonPath",
      "description": "A static JSON path string value or a string value generated by a text provider. Can be absolute or relative.",
      "oneOf": [
        {
          "$ref": "#staticJsonPath"
        },
        {
          "$ref": "#textProvider"
        }
      ]
    },
    "staticJsonPointerOrStaticJsonPath": {
      "$id": "#staticJsonPointerOrStaticJsonPath",
      "description": "A static JSON pointer string value or a static JSON path string value. Can be absolute or relative.",
      "oneOf": [
        {
          "$ref": "#staticJsonPointer"
        },
        {
          "$ref": "#staticJsonPath"
        }
      ]
    },
    "jsonPointerOrJsonPath": {
      "$id": "#jsonPointerOrJsonPath",
      "description": "A static JSON pointer string value, a static JSON path string value, or a string value generated by a text provider. Can be absolute or relative.",
      "anyOf": [
        {
          "$ref": "#staticJsonPointerOrStaticJsonPath"
        },
        {
          "$ref": "#textProvider"
        }
      ]
    },
    "name": {
      "$id": "#name",
      "type": "string",
      "description": "A display name for the object that will be used in the UI.",
      "minLength": 2,
      "pattern": "^([A-Za-z0-9 -,:\\[\\]]+)$"
    },
    "alias": {
      "$id": "#alias",
      "type": "string",
      "description": "An unique ID for the object that is used to reference it and its output data in the automation data.",
      "minLength": 2,
      "pattern": "^([A-Za-z0-9]+)$"
    },
    "description": {
      "$id": "#description",
      "type": "string",
      "description": "A description of an object that helps explain its purpose."
    },
    "entityAlias": {
      "$id": "#entityAlias",
      "description": "An unique alias for an entity in the ubind tenancy.",
      "type": "string",
      "minLength": 2,
      "pattern": "^([a-z])([a-z0-9\\-]+)([a-z0-9])$"
    },
    "environment": {
      "$id": "#environment",
      "type": "string",
      "description": "The environment to which a product is deployed. If not provided, it defaults to development.",
      "enum": [
        "development",
        "staging",
        "production"
      ],
      "default": "development"
    },
    "policyTransactionType": {
      "$id": "#policyTransactionType",
      "type": "string",
      "description": "A policy transaction type.",
      "enum": [
        "newBusiness",
        "adjustment",
        "renewal",
        "cancellation"
      ],
      "default": "newBusiness"
    },
    "dayOfTheWeek": {
      "$id": "#dayOfTheWeek",
      "type": "string",
      "description": "A day of the week.",
      "enum": [
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday"
      ]
    },
    "calendarMonth": {
      "$id": "#calendarMonth",
      "type": "string",
      "description": "A calendar month.",
      "enum": [
        "january",
        "february",
        "march",
        "april",
        "may",
        "june",
        "july",
        "august",
        "september",
        "october",
        "november",
        "december"
      ]
    },
    "additionalProperties": {
      "$id": "#additionalProperties",
      "description": "A construct for setting the values of a list of additional properties on an entity.",
      "type": "object",
      "additionalProperties": {
        "$ref": "#value",
        "description": "A property named after the alias of an additional property on the entity in the relevant context. The value must match the data type of the additional property."
      }
    },
    "personConstructor": {
      "$id": "#personConstructor",
      "type": "object",
      "description": "A construct that collects the details necessary to create a new Person entity.",
      "properties": {
        "namePrefix": {
          "$ref": "#text",
          "description": "An optional name prefix for the person."
        },
        "firstName": {
          "$ref": "#text",
          "description": "The first name of the person."
        },
        "middleNames": {
          "$ref": "#text",
          "description": "An optional middle names for the person."
        },
        "lastName": {
          "$ref": "#text",
          "description": "An optional last name for the person."
        },
        "nameSuffix": {
          "$ref": "#text",
          "description": "An optional name suffix for the person."
        },
        "preferredName": {
          "$ref": "#text",
          "description": "An optional preferred name for the person."
        },
        "company": {
          "$ref": "#text",
          "description": "An optional company for the person."
        },
        "title": {
          "$ref": "#text",
          "description": "An optional title for the person."
        },
        "phoneNumbers": {
          "type": "array",
          "description": "An optional list of phone numbers associated with this person.",
          "items": {
            "$id": "#phoneNumberConstructor",
            "type": "object",
            "descriptions": "A construct that collects the details necessary to create a new phone number for an entity.",
            "properties": {
              "phoneNumber": {
                "$ref": "#phoneNumber",
                "description": "The phone number itself."
              },
              "label": {
                "$ref": "#text",
                "description": "A label for the phone number."
              },
              "default": {
                "$ref": "#condition",
                "description": "When true, this phone number will be set as the default phone number for the new person. If omitted on all phone numbers, the first phone number will automatically be set as the default."
              }
            },
            "required": [
              "phoneNumber",
              "label"
            ],
            "additionalProperties": false
          },
          "additionalItems": false
        },
        "emailAddresses": {
          "type": "array",
          "description": "An optional list of email addresses associated with this person.",
          "items": {
            "$id": "#emailAddressConstructor",
            "type": "object",
            "descriptions": "A construct that collects the details necessary to create a new email address for an entity.",
            "properties": {
              "emailAddress": {
                "$ref": "#emailAddress",
                "description": "The email address itself."
              },
              "label": {
                "$ref": "#text",
                "description": "A label for the email address."
              },
              "default": {
                "$ref": "#condition",
                "description": "When true, this email address will be set as the default email address for the new person. If omitted on all email addresses, the first email address will automatically be set as the default."
              }
            },
            "required": [
              "emailAddress",
              "label"
            ],
            "additionalProperties": false
          },
          "additionalItems": false
        },
        "streetAddresses": {
          "type": "array",
          "description": "An optional list of street addresses associated with this person.",
          "items": {
            "$id": "#streetAddressConstructor",
            "type": "object",
            "descriptions": "A construct that collects the details necessary to create a new street address for an entity.",
            "properties": {
              "address": {
                "$ref": "#text",
                "description": "The address line of the street address."
              },
              "suburb": {
                "$ref": "#text",
                "description": "The suburb of the street address."
              },
              "state": {
                "$ref": "#text",
                "description": "The state of the street address."
              },
              "postcode": {
                "$ref": "#text",
                "description": "The postcode of the street address."
              },
              "label": {
                "$ref": "#text",
                "description": "A label for the street address."
              },
              "default": {
                "$ref": "#condition",
                "description": "When true, this street address will be set as the default street address for the new person. If omitted on all street addresses, the first street address will automatically be set as the default."
              }
            },
            "required": [
              "address",
              "suburb",
              "state",
              "postcode",
              "label"
            ],
            "additionalProperties": false
          },
          "additionalItems": false
        },
        "websiteAddresses": {
          "type": "array",
          "description": "An optional list of website addresses associated with this person.",
          "items": {
            "$id": "#websiteAddressConstructor",
            "type": "object",
            "descriptions": "A construct that collects the details necessary to create a new website address for an entity.",
            "properties": {
              "websiteAddress": {
                "$ref": "#text",
                "description": "The website address itself."
              },
              "label": {
                "$ref": "#text",
                "description": "A label for the website address."
              },
              "default": {
                "$ref": "#condition",
                "description": "When true, this website address will be set as the default website address for the new person. If omitted on all website addresses, the first website address will automatically be set as the default."
              }
            },
            "required": [
              "websiteAddress",
              "label"
            ],
            "additionalProperties": false
          },
          "additionalItems": false
        },
        "messengerIds": {
          "type": "array",
          "description": "An optional list of messenger IDs associated with this person.",
          "items": {
            "$id": "#messengerIdConstructor",
            "type": "object",
            "descriptions": "A construct that collects the details necessary to create a new messenger ID for an entity.",
            "properties": {
              "messengerId": {
                "$ref": "#text",
                "description": "The messenger ID itself."
              },
              "label": {
                "$ref": "#text",
                "description": "A label for the messenger ID."
              },
              "default": {
                "$ref": "#condition",
                "description": "When true, this messenger ID will be set as the default messenger ID for the new person. If omitted on all messenger IDs, the first messenger ID will automatically be set as the default."
              }
            },
            "required": [
              "messengerId",
              "label"
            ],
            "additionalProperties": false
          },
          "additionalItems": false
        },
        "socialMediaIds": {
          "type": "array",
          "description": "An optional list of social media IDs associated with this person.",
          "items": {
            "$id": "#socialMediaIdConstructor",
            "type": "object",
            "descriptions": "A construct that collects the details necessary to create a new social media ID for an entity.",
            "properties": {
              "socialMediaId": {
                "$ref": "#text",
                "description": "The social media ID itself."
              },
              "label": {
                "$ref": "#text",
                "description": "A label for the social media ID."
              },
              "default": {
                "$ref": "#condition",
                "description": "When true, this social media ID will be set as the default social media ID for the new person. If omitted on all social media IDs, the first social media ID will automatically be set as the default."
              }
            },
            "required": [
              "socialMediaId",
              "label"
            ],
            "additionalProperties": false
          },
          "additionalItems": false
        }
      },
      "required": [
        "firstName"
      ],
      "additionalProperties": false
    },
    "portalPage": {
      "$id": "#portalPage",
      "description": "A definition of a portal page, including an optional list of tabs on that page.",
      "type": "object",
      "properties": {
        "entityType": {
          "$ref": "#entityType",
          "description": "The entity type of the portal page."
        },
        "pageType": {
          "type": "string",
          "description": "The page type of the portal page.",
          "enum": [
            "list",
            "display"
          ]
        },
        "tabs": {
          "type": "array",
          "description": "A list of tabs on the specified page.",
          "items": {
            "$ref": "#alias",
            "description": "The alias of a tab on a portal page.",
            "examples": [
              "incomplete",
              "review",
              "history"
            ]
          },
          "additionalItems": false
        }
      },
      "required": [
        "entityType",
        "pageType"
      ],
      "additionalProperties": false
    }
  }
}